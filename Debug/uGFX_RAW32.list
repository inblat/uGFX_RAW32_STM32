
uGFX_RAW32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b40  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ee0  08007cc8  08007cc8  00017cc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08008ba8  08008ba8  00018ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08008bac  08008bac  00018bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000009c  20000000  08008bb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002009c  2**0
                  CONTENTS
  7 .bss          000008b8  2000009c  2000009c  0002009c  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000954  20000954  0002009c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00011750  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000f83  00000000  00000000  0003181c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000c553  00000000  00000000  0003279f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000000b0  00000000  00000000  0003ecf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00004998  00000000  00000000  0003eda8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00004705  00000000  00000000  00043740  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002097  00000000  00000000  00047e45  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00049edc  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000019b8  00000000  00000000  00049f58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000009c 	.word	0x2000009c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007cac 	.word	0x08007cac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000a0 	.word	0x200000a0
 80001c4:	08007cac 	.word	0x08007cac

080001c8 <clockConfig>:
void clockConfig(void);
void initFSMC(void);

void clockConfig(void)
{
	RCC->CR |= (uint32_t)RCC_CR_HSEON;
 80001c8:	4b1d      	ldr	r3, [pc, #116]	; (8000240 <clockConfig+0x78>)
 80001ca:	681a      	ldr	r2, [r3, #0]
 80001cc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
{
 80001d0:	b410      	push	{r4}
	RCC->CR |= (uint32_t)RCC_CR_HSEON;
 80001d2:	601a      	str	r2, [r3, #0]
	while(!(RCC->CR & RCC_CR_HSERDY)){};
 80001d4:	681a      	ldr	r2, [r3, #0]
 80001d6:	0392      	lsls	r2, r2, #14
 80001d8:	d5fc      	bpl.n	80001d4 <clockConfig+0xc>

    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80001da:	6c19      	ldr	r1, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80001dc:	4819      	ldr	r0, [pc, #100]	; (8000244 <clockConfig+0x7c>)

    /* PCLK1 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) | (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
 80001de:	4c1a      	ldr	r4, [pc, #104]	; (8000248 <clockConfig+0x80>)

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0){}
 80001e0:	4a17      	ldr	r2, [pc, #92]	; (8000240 <clockConfig+0x78>)
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80001e2:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80001e6:	6419      	str	r1, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80001e8:	6801      	ldr	r1, [r0, #0]
 80001ea:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80001ee:	6001      	str	r1, [r0, #0]
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80001f0:	6899      	ldr	r1, [r3, #8]
 80001f2:	6099      	str	r1, [r3, #8]
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80001f4:	6899      	ldr	r1, [r3, #8]
 80001f6:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80001fa:	6099      	str	r1, [r3, #8]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80001fc:	6899      	ldr	r1, [r3, #8]
 80001fe:	f441 51a0 	orr.w	r1, r1, #5120	; 0x1400
 8000202:	6099      	str	r1, [r3, #8]
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) | (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
 8000204:	605c      	str	r4, [r3, #4]
    RCC->CR |= RCC_CR_PLLON;
 8000206:	6819      	ldr	r1, [r3, #0]
 8000208:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 800020c:	6019      	str	r1, [r3, #0]
    while((RCC->CR & RCC_CR_PLLRDY) == 0){}
 800020e:	6813      	ldr	r3, [r2, #0]
 8000210:	019b      	lsls	r3, r3, #6
 8000212:	d5fc      	bpl.n	800020e <clockConfig+0x46>

    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000214:	4b0d      	ldr	r3, [pc, #52]	; (800024c <clockConfig+0x84>)
    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
    RCC->CFGR |= RCC_CFGR_SW_PLL;

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL){};
 8000216:	490a      	ldr	r1, [pc, #40]	; (8000240 <clockConfig+0x78>)
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000218:	f240 6005 	movw	r0, #1541	; 0x605
 800021c:	6018      	str	r0, [r3, #0]
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800021e:	6893      	ldr	r3, [r2, #8]
 8000220:	f023 0303 	bic.w	r3, r3, #3
 8000224:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000226:	6893      	ldr	r3, [r2, #8]
 8000228:	f043 0302 	orr.w	r3, r3, #2
 800022c:	6093      	str	r3, [r2, #8]
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL){};
 800022e:	688b      	ldr	r3, [r1, #8]
 8000230:	f003 030c 	and.w	r3, r3, #12
 8000234:	2b08      	cmp	r3, #8
 8000236:	d1fa      	bne.n	800022e <clockConfig+0x66>
}
 8000238:	f85d 4b04 	ldr.w	r4, [sp], #4
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	40023800 	.word	0x40023800
 8000244:	40007000 	.word	0x40007000
 8000248:	08402a04 	.word	0x08402a04
 800024c:	40023c00 	.word	0x40023c00

08000250 <initFSMC>:

void initFSMC(void)
{


	RCC->AHB3ENR |= RCC_AHB3ENR_FSMCEN;
 8000250:	491b      	ldr	r1, [pc, #108]	; (80002c0 <initFSMC+0x70>)
	//RCC->AHB3RSTR |= RCC_AHB3RSTR_FSMCRST;
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN | RCC_AHB1ENR_GPIODEN;

	//GPIOE FSMC
	GPIOE->MODER |= GPIO_MODER_MODE15_1 | GPIO_MODER_MODE14_1 | GPIO_MODER_MODE13_1 | GPIO_MODER_MODE12_1 |
 8000252:	4a1c      	ldr	r2, [pc, #112]	; (80002c4 <initFSMC+0x74>)
	//GPIOE->PUPDR = 0x00000000;
	GPIOE->AFR[1] = 0xCCCCCCCC;
	GPIOE->AFR[0] = 0xC0000000;

	//GPIOD FSMC
	GPIOD->MODER |= GPIO_MODER_MODE15_1 | GPIO_MODER_MODE14_1 | GPIO_MODER_MODE13_1 | GPIO_MODER_MODE10_1 |
 8000254:	4b1c      	ldr	r3, [pc, #112]	; (80002c8 <initFSMC+0x78>)
			GPIO_MODER_MODE9_1 | GPIO_MODER_MODE8_1 | GPIO_MODER_MODE7_1 | GPIO_MODER_MODE5_1 | GPIO_MODER_MODE4_1 | GPIO_MODER_MODE1_1 | GPIO_MODER_MODE0_1; //Alternate function mode
	//GPIOD->OSPEEDR = 0xFC3FCF0F;
	GPIOD->OSPEEDR |= GPIO_OSPEEDR_OSPEED15 | GPIO_OSPEEDR_OSPEED14 | GPIO_OSPEEDR_OSPEED13 | GPIO_OSPEEDR_OSPEED10 |
 8000256:	481d      	ldr	r0, [pc, #116]	; (80002cc <initFSMC+0x7c>)
{
 8000258:	b4f0      	push	{r4, r5, r6, r7}
	RCC->AHB3ENR |= RCC_AHB3ENR_FSMCEN;
 800025a:	6b8e      	ldr	r6, [r1, #56]	; 0x38
	GPIOE->MODER |= GPIO_MODER_MODE15_1 | GPIO_MODER_MODE14_1 | GPIO_MODER_MODE13_1 | GPIO_MODER_MODE12_1 |
 800025c:	4d1c      	ldr	r5, [pc, #112]	; (80002d0 <initFSMC+0x80>)
	GPIOD->MODER |= GPIO_MODER_MODE15_1 | GPIO_MODER_MODE14_1 | GPIO_MODER_MODE13_1 | GPIO_MODER_MODE10_1 |
 800025e:	4c1d      	ldr	r4, [pc, #116]	; (80002d4 <initFSMC+0x84>)
			GPIO_OSPEEDR_OSPEED9 | GPIO_OSPEEDR_OSPEED8 | GPIO_OSPEEDR_OSPEED7 | GPIO_OSPEEDR_OSPEED5 | GPIO_OSPEEDR_OSPEED4 | GPIO_OSPEEDR_OSPEED1 | GPIO_OSPEEDR_OSPEED0;
	//GPIOD->PUPDR = 0x00000000;
	GPIOD->AFR[1] = 0xCCC00CCC;
 8000260:	4f1d      	ldr	r7, [pc, #116]	; (80002d8 <initFSMC+0x88>)
	RCC->AHB3ENR |= RCC_AHB3ENR_FSMCEN;
 8000262:	f046 0601 	orr.w	r6, r6, #1
 8000266:	638e      	str	r6, [r1, #56]	; 0x38
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN | RCC_AHB1ENR_GPIODEN;
 8000268:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 800026a:	f046 0618 	orr.w	r6, r6, #24
 800026e:	630e      	str	r6, [r1, #48]	; 0x30
	GPIOE->MODER |= GPIO_MODER_MODE15_1 | GPIO_MODER_MODE14_1 | GPIO_MODER_MODE13_1 | GPIO_MODER_MODE12_1 |
 8000270:	6811      	ldr	r1, [r2, #0]
	GPIOD->AFR[0] = 0xC0CC00CC;
 8000272:	4e1a      	ldr	r6, [pc, #104]	; (80002dc <initFSMC+0x8c>)
	GPIOE->MODER |= GPIO_MODER_MODE15_1 | GPIO_MODER_MODE14_1 | GPIO_MODER_MODE13_1 | GPIO_MODER_MODE12_1 |
 8000274:	430d      	orrs	r5, r1
 8000276:	6015      	str	r5, [r2, #0]
	GPIOE->OSPEEDR |= GPIO_OSPEEDR_OSPEED15 | GPIO_OSPEEDR_OSPEED14 | GPIO_OSPEEDR_OSPEED13 | GPIO_OSPEEDR_OSPEED12 |
 8000278:	6891      	ldr	r1, [r2, #8]
 800027a:	ea6f 4181 	mvn.w	r1, r1, lsl #18
 800027e:	ea6f 4191 	mvn.w	r1, r1, lsr #18
 8000282:	6091      	str	r1, [r2, #8]
	GPIOE->AFR[1] = 0xCCCCCCCC;
 8000284:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
	GPIOE->AFR[0] = 0xC0000000;
 8000288:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
	GPIOE->AFR[1] = 0xCCCCCCCC;
 800028c:	6255      	str	r5, [r2, #36]	; 0x24
	GPIOE->AFR[0] = 0xC0000000;
 800028e:	6211      	str	r1, [r2, #32]
	GPIOD->MODER |= GPIO_MODER_MODE15_1 | GPIO_MODER_MODE14_1 | GPIO_MODER_MODE13_1 | GPIO_MODER_MODE10_1 |
 8000290:	681a      	ldr	r2, [r3, #0]
 8000292:	4314      	orrs	r4, r2
 8000294:	601c      	str	r4, [r3, #0]
	GPIOD->OSPEEDR |= GPIO_OSPEEDR_OSPEED15 | GPIO_OSPEEDR_OSPEED14 | GPIO_OSPEEDR_OSPEED13 | GPIO_OSPEEDR_OSPEED10 |
 8000296:	6899      	ldr	r1, [r3, #8]

	//NOR/PSRAM chip-select control register(BCR)
	FSMC_Bank1->BTCR[0] |= FSMC_BCR1_MBKEN | FSMC_BCR1_MWID_0 | FSMC_BCR1_WREN;
 8000298:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
	GPIOD->OSPEEDR |= GPIO_OSPEEDR_OSPEED15 | GPIO_OSPEEDR_OSPEED14 | GPIO_OSPEEDR_OSPEED13 | GPIO_OSPEEDR_OSPEED10 |
 800029c:	4308      	orrs	r0, r1
 800029e:	6098      	str	r0, [r3, #8]
	GPIOD->AFR[1] = 0xCCC00CCC;
 80002a0:	625f      	str	r7, [r3, #36]	; 0x24
	GPIOD->AFR[0] = 0xC0CC00CC;
 80002a2:	621e      	str	r6, [r3, #32]
	FSMC_Bank1->BTCR[0] |= FSMC_BCR1_MBKEN | FSMC_BCR1_MWID_0 | FSMC_BCR1_WREN;
 80002a4:	6813      	ldr	r3, [r2, #0]
 80002a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80002aa:	f043 0311 	orr.w	r3, r3, #17
 80002ae:	6013      	str	r3, [r2, #0]
	FSMC_Bank1->BTCR[0] &=~ FSMC_BCR1_CBURSTRW; //Write burst enable
	*/


	//chip-select timing register(BTR)
	FSMC_Bank1->BTCR[1] |= FSMC_BTR1_ADDSET_1 | FSMC_BTR1_DATAST_1;
 80002b0:	6853      	ldr	r3, [r2, #4]
 80002b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b6:	f043 0302 	orr.w	r3, r3, #2
 80002ba:	6053      	str	r3, [r2, #4]
	PD5   ------> FSMC_NWE
	PD7   ------> FSMC_NE1
	*/


}
 80002bc:	bcf0      	pop	{r4, r5, r6, r7}
 80002be:	4770      	bx	lr
 80002c0:	40023800 	.word	0x40023800
 80002c4:	40021000 	.word	0x40021000
 80002c8:	40020c00 	.word	0x40020c00
 80002cc:	fc3fcf0f 	.word	0xfc3fcf0f
 80002d0:	aaaa8000 	.word	0xaaaa8000
 80002d4:	a82a8a0a 	.word	0xa82a8a0a
 80002d8:	ccc00ccc 	.word	0xccc00ccc
 80002dc:	c0cc00cc 	.word	0xc0cc00cc

080002e0 <gfxSystemTicks>:
//__IO uint32_t uwTick;
uint32_t uwTick;

systemticks_t gfxSystemTicks(void)
{
	return uwTick;
 80002e0:	4b01      	ldr	r3, [pc, #4]	; (80002e8 <gfxSystemTicks+0x8>)
}
 80002e2:	6818      	ldr	r0, [r3, #0]
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	2000093c 	.word	0x2000093c

080002ec <gfxMillisecondsToTicks>:

systemticks_t gfxMillisecondsToTicks(delaytime_t ms)
{
	return ms;
}
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <SysTick_Handler>:
	}
}

void SysTick_Handler(void)
{
	uwTick++;
 80002f0:	4a02      	ldr	r2, [pc, #8]	; (80002fc <SysTick_Handler+0xc>)
 80002f2:	6813      	ldr	r3, [r2, #0]
 80002f4:	3301      	adds	r3, #1
 80002f6:	6013      	str	r3, [r2, #0]
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	2000093c 	.word	0x2000093c

08000300 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000300:	4910      	ldr	r1, [pc, #64]	; (8000344 <SystemInit+0x44>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000302:	4b11      	ldr	r3, [pc, #68]	; (8000348 <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000304:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8000308:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 800030c:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800030e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8000312:	681a      	ldr	r2, [r3, #0]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000314:	4c0d      	ldr	r4, [pc, #52]	; (800034c <SystemInit+0x4c>)
  RCC->CFGR = 0x00000000;
 8000316:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8000318:	f042 0201 	orr.w	r2, r2, #1
 800031c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800031e:	6098      	str	r0, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000320:	681a      	ldr	r2, [r3, #0]
 8000322:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000326:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800032a:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 800032c:	605c      	str	r4, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800032e:	681a      	ldr	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000330:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000334:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000338:	601a      	str	r2, [r3, #0]
  RCC->CIR = 0x00000000;
 800033a:	60d8      	str	r0, [r3, #12]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800033c:	608c      	str	r4, [r1, #8]
#endif
}
 800033e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000342:	4770      	bx	lr
 8000344:	e000ed00 	.word	0xe000ed00
 8000348:	40023800 	.word	0x40023800
 800034c:	24003010 	.word	0x24003010

08000350 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000350:	4a16      	ldr	r2, [pc, #88]	; (80003ac <SystemCoreClockUpdate+0x5c>)
 8000352:	6893      	ldr	r3, [r2, #8]
 8000354:	f003 030c 	and.w	r3, r3, #12

  switch (tmp)
 8000358:	2b04      	cmp	r3, #4
 800035a:	d024      	beq.n	80003a6 <SystemCoreClockUpdate+0x56>
 800035c:	2b08      	cmp	r3, #8
 800035e:	d00a      	beq.n	8000376 <SystemCoreClockUpdate+0x26>
 8000360:	4b13      	ldr	r3, [pc, #76]	; (80003b0 <SystemCoreClockUpdate+0x60>)
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000362:	4a12      	ldr	r2, [pc, #72]	; (80003ac <SystemCoreClockUpdate+0x5c>)
 8000364:	4813      	ldr	r0, [pc, #76]	; (80003b4 <SystemCoreClockUpdate+0x64>)
 8000366:	6892      	ldr	r2, [r2, #8]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000368:	4913      	ldr	r1, [pc, #76]	; (80003b8 <SystemCoreClockUpdate+0x68>)
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800036a:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800036e:	5c82      	ldrb	r2, [r0, r2]
  SystemCoreClock >>= tmp;
 8000370:	40d3      	lsrs	r3, r2
 8000372:	600b      	str	r3, [r1, #0]
 8000374:	4770      	bx	lr
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000376:	6850      	ldr	r0, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000378:	6851      	ldr	r1, [r2, #4]
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800037a:	6852      	ldr	r2, [r2, #4]
      if (pllsource != 0)
 800037c:	0243      	lsls	r3, r0, #9
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800037e:	f3c2 1288 	ubfx	r2, r2, #6, #9
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000382:	f001 013f 	and.w	r1, r1, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000386:	bf4c      	ite	mi
 8000388:	4b0c      	ldrmi	r3, [pc, #48]	; (80003bc <SystemCoreClockUpdate+0x6c>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800038a:	4b09      	ldrpl	r3, [pc, #36]	; (80003b0 <SystemCoreClockUpdate+0x60>)
 800038c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000390:	fb03 f302 	mul.w	r3, r3, r2
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000394:	4a05      	ldr	r2, [pc, #20]	; (80003ac <SystemCoreClockUpdate+0x5c>)
 8000396:	6852      	ldr	r2, [r2, #4]
 8000398:	f3c2 4201 	ubfx	r2, r2, #16, #2
 800039c:	3201      	adds	r2, #1
 800039e:	0052      	lsls	r2, r2, #1
      SystemCoreClock = pllvco/pllp;
 80003a0:	fbb3 f3f2 	udiv	r3, r3, r2
      break;
 80003a4:	e7dd      	b.n	8000362 <SystemCoreClockUpdate+0x12>
  switch (tmp)
 80003a6:	4b05      	ldr	r3, [pc, #20]	; (80003bc <SystemCoreClockUpdate+0x6c>)
 80003a8:	e7db      	b.n	8000362 <SystemCoreClockUpdate+0x12>
 80003aa:	bf00      	nop
 80003ac:	40023800 	.word	0x40023800
 80003b0:	00f42400 	.word	0x00f42400
 80003b4:	08007d08 	.word	0x08007d08
 80003b8:	20000030 	.word	0x20000030
 80003bc:	007a1200 	.word	0x007a1200
 80003c0:	08008bb0 	.word	0x08008bb0
 80003c4:	20000000 	.word	0x20000000
 80003c8:	2000009c 	.word	0x2000009c
 80003cc:	2000009c 	.word	0x2000009c
 80003d0:	20000954 	.word	0x20000954

080003d4 <gdisp_lld_write_color>:
	GDISP_REG = index;
}

static GFXINLINE void write_data(GDisplay *g, uint16_t data) {
	(void) g;
	GDISP_RAM = data;
 80003d4:	4b01      	ldr	r3, [pc, #4]	; (80003dc <gdisp_lld_write_color+0x8>)
  LLDSPEC  void gdisp_lld_write_start(GDisplay *g) {
    acquire_bus(g);
    set_viewport(g);
  }
  LLDSPEC  void gdisp_lld_write_color(GDisplay *g) {
    write_data(g, gdispColor2Native(g->p.color));
 80003d6:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
 80003d8:	801a      	strh	r2, [r3, #0]
 80003da:	4770      	bx	lr
 80003dc:	60080000 	.word	0x60080000

080003e0 <gdisp_lld_read_start>:
	GDISP_REG = index;
 80003e0:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 80003e4:	232a      	movs	r3, #42	; 0x2a
    release_bus(g);
  }
#endif

#if GDISP_HARDWARE_STREAM_READ
  LLDSPEC  void gdisp_lld_read_start(GDisplay *g) {
 80003e6:	b410      	push	{r4}
 80003e8:	800b      	strh	r3, [r1, #0]
  write_reg2x16(g, 0x2A, g->p.x, g->p.x + g->p.cx - 1);
 80003ea:	f990 202d 	ldrsb.w	r2, [r0, #45]	; 0x2d
	GDISP_RAM = data;
 80003ee:	4b1f      	ldr	r3, [pc, #124]	; (800046c <gdisp_lld_read_start+0x8c>)
 80003f0:	b292      	uxth	r2, r2
 80003f2:	801a      	strh	r2, [r3, #0]
 80003f4:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 80003f8:	801a      	strh	r2, [r3, #0]
 80003fa:	f9b0 4030 	ldrsh.w	r4, [r0, #48]	; 0x30
 80003fe:	f9b0 202c 	ldrsh.w	r2, [r0, #44]	; 0x2c
 8000402:	4422      	add	r2, r4
 8000404:	3a01      	subs	r2, #1
 8000406:	f3c2 220f 	ubfx	r2, r2, #8, #16
 800040a:	801a      	strh	r2, [r3, #0]
 800040c:	f890 4030 	ldrb.w	r4, [r0, #48]	; 0x30
 8000410:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 8000414:	4422      	add	r2, r4
 8000416:	3a01      	subs	r2, #1
 8000418:	b2d2      	uxtb	r2, r2
	GDISP_REG = index;
 800041a:	242b      	movs	r4, #43	; 0x2b
	GDISP_RAM = data;
 800041c:	801a      	strh	r2, [r3, #0]
	GDISP_REG = index;
 800041e:	800c      	strh	r4, [r1, #0]
  write_reg2x16(g, 0x2B, g->p.y, g->p.y + g->p.cy - 1);
 8000420:	f990 202f 	ldrsb.w	r2, [r0, #47]	; 0x2f
 8000424:	b292      	uxth	r2, r2
	GDISP_RAM = data;
 8000426:	801a      	strh	r2, [r3, #0]
 8000428:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
 800042c:	801a      	strh	r2, [r3, #0]
 800042e:	f9b0 202e 	ldrsh.w	r2, [r0, #46]	; 0x2e
 8000432:	f9b0 4032 	ldrsh.w	r4, [r0, #50]	; 0x32
 8000436:	4422      	add	r2, r4
 8000438:	3a01      	subs	r2, #1
 800043a:	f3c2 220f 	ubfx	r2, r2, #8, #16
 800043e:	801a      	strh	r2, [r3, #0]
 8000440:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
 8000444:	f890 0032 	ldrb.w	r0, [r0, #50]	; 0x32
 8000448:	4402      	add	r2, r0
 800044a:	3a01      	subs	r2, #1
 800044c:	b2d2      	uxtb	r2, r2
	GDISP_REG = index;
 800044e:	202c      	movs	r0, #44	; 0x2c
	GDISP_RAM = data;
 8000450:	801a      	strh	r2, [r3, #0]
	GDISP_REG = index;
 8000452:	8008      	strh	r0, [r1, #0]
	(void) g;
}

static GFXINLINE uint16_t read_data(GDisplay *g) {
	(void) g;
	return GDISP_RAM;
 8000454:	881b      	ldrh	r3, [r3, #0]
  LLDSPEC  void gdisp_lld_read_start(GDisplay *g) {
 8000456:	b083      	sub	sp, #12
 8000458:	b29b      	uxth	r3, r3
    acquire_bus(g);
    set_viewport(g);
    setreadmode(g);
    dummy_read(g);
 800045a:	f8ad 3006 	strh.w	r3, [sp, #6]
 800045e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  }
 8000462:	b003      	add	sp, #12
 8000464:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	60080000 	.word	0x60080000

08000470 <gdisp_lld_read_color>:
 8000470:	4b01      	ldr	r3, [pc, #4]	; (8000478 <gdisp_lld_read_color+0x8>)
 8000472:	8818      	ldrh	r0, [r3, #0]
  LLDSPEC  color_t gdisp_lld_read_color(GDisplay *g) {
    uint16_t  data;

    data = read_data(g);
    return gdispNative2Color(data);
  }
 8000474:	b280      	uxth	r0, r0
 8000476:	4770      	bx	lr
 8000478:	60080000 	.word	0x60080000

0800047c <gdisp_lld_read_stop>:
  LLDSPEC  void gdisp_lld_read_stop(GDisplay *g) {
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop

08000480 <gdisp_lld_init>:
LLDSPEC bool_t gdisp_lld_init(GDisplay *g) {
 8000480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		GPIOA->BSRR |= GPIO_BSRR_BR5;//HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000484:	4f4a      	ldr	r7, [pc, #296]	; (80005b0 <gdisp_lld_init+0x130>)
 8000486:	69bb      	ldr	r3, [r7, #24]
  g->priv = 0;
 8000488:	2500      	movs	r5, #0
 800048a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
LLDSPEC bool_t gdisp_lld_init(GDisplay *g) {
 800048e:	4606      	mov	r6, r0
  g->priv = 0;
 8000490:	6145      	str	r5, [r0, #20]
 8000492:	61bb      	str	r3, [r7, #24]
  gfxSleepMilliseconds(20);
 8000494:	2014      	movs	r0, #20
 8000496:	f001 fc1f 	bl	8001cd8 <gfxSleepMilliseconds>
		GPIOA->BSRR |= GPIO_BSRR_BS5;//HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 800049a:	69bb      	ldr	r3, [r7, #24]
	GDISP_REG = index;
 800049c:	f04f 44c0 	mov.w	r4, #1610612736	; 0x60000000
		GPIOA->BSRR |= GPIO_BSRR_BS5;//HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 80004a0:	f043 0320 	orr.w	r3, r3, #32
 80004a4:	61bb      	str	r3, [r7, #24]
	GDISP_REG = index;
 80004a6:	f04f 0911 	mov.w	r9, #17
  gfxSleepMilliseconds(20);
 80004aa:	2014      	movs	r0, #20
 80004ac:	f001 fc14 	bl	8001cd8 <gfxSleepMilliseconds>
 80004b0:	f8a4 9000 	strh.w	r9, [r4]
  gfxSleepMilliseconds(20);
 80004b4:	2014      	movs	r0, #20
 80004b6:	f001 fc0f 	bl	8001cd8 <gfxSleepMilliseconds>
	GDISP_RAM = data;
 80004ba:	4b3e      	ldr	r3, [pc, #248]	; (80005b4 <gdisp_lld_init+0x134>)
 80004bc:	2707      	movs	r7, #7
	GDISP_REG = index;
 80004be:	20d0      	movs	r0, #208	; 0xd0
	GDISP_RAM = data;
 80004c0:	f04f 0e42 	mov.w	lr, #66	; 0x42
 80004c4:	2218      	movs	r2, #24
	GDISP_REG = index;
 80004c6:	21d1      	movs	r1, #209	; 0xd1
 80004c8:	8020      	strh	r0, [r4, #0]
 80004ca:	f04f 0cd2 	mov.w	ip, #210	; 0xd2
	GDISP_RAM = data;
 80004ce:	801f      	strh	r7, [r3, #0]
 80004d0:	2010      	movs	r0, #16
 80004d2:	f8a3 e000 	strh.w	lr, [r3]
 80004d6:	801a      	strh	r2, [r3, #0]
	GDISP_REG = index;
 80004d8:	f04f 0ec0 	mov.w	lr, #192	; 0xc0
 80004dc:	8021      	strh	r1, [r4, #0]
	GDISP_RAM = data;
 80004de:	2201      	movs	r2, #1
 80004e0:	2102      	movs	r1, #2
 80004e2:	801d      	strh	r5, [r3, #0]
 80004e4:	f04f 0803 	mov.w	r8, #3
 80004e8:	801f      	strh	r7, [r3, #0]
 80004ea:	8018      	strh	r0, [r3, #0]
 80004ec:	273b      	movs	r7, #59	; 0x3b
	GDISP_REG = index;
 80004ee:	f8a4 c000 	strh.w	ip, [r4]
	GDISP_RAM = data;
 80004f2:	801a      	strh	r2, [r3, #0]
 80004f4:	8019      	strh	r1, [r3, #0]
	GDISP_REG = index;
 80004f6:	f8a4 e000 	strh.w	lr, [r4]
	GDISP_RAM = data;
 80004fa:	8018      	strh	r0, [r3, #0]
	GDISP_REG = index;
 80004fc:	f04f 0ec5 	mov.w	lr, #197	; 0xc5
 8000500:	20c8      	movs	r0, #200	; 0xc8
	GDISP_RAM = data;
 8000502:	801f      	strh	r7, [r3, #0]
 8000504:	801d      	strh	r5, [r3, #0]
 8000506:	2732      	movs	r7, #50	; 0x32
 8000508:	8019      	strh	r1, [r3, #0]
 800050a:	f8a3 9000 	strh.w	r9, [r3]
 800050e:	2136      	movs	r1, #54	; 0x36
	GDISP_REG = index;
 8000510:	f8a4 e000 	strh.w	lr, [r4]
	GDISP_RAM = data;
 8000514:	f8a3 8000 	strh.w	r8, [r3]
 8000518:	f04f 0e45 	mov.w	lr, #69	; 0x45
	GDISP_REG = index;
 800051c:	8020      	strh	r0, [r4, #0]
	GDISP_RAM = data;
 800051e:	2006      	movs	r0, #6
 8000520:	801d      	strh	r5, [r3, #0]
 8000522:	801f      	strh	r7, [r3, #0]
 8000524:	8019      	strh	r1, [r3, #0]
 8000526:	f8a3 e000 	strh.w	lr, [r3]
 800052a:	8018      	strh	r0, [r3, #0]
 800052c:	f04f 0e16 	mov.w	lr, #22
 8000530:	2037      	movs	r0, #55	; 0x37
 8000532:	f8a3 e000 	strh.w	lr, [r3]
 8000536:	8018      	strh	r0, [r3, #0]
 8000538:	f04f 0e75 	mov.w	lr, #117	; 0x75
 800053c:	2077      	movs	r0, #119	; 0x77
 800053e:	f8a3 e000 	strh.w	lr, [r3]
 8000542:	8018      	strh	r0, [r3, #0]
 8000544:	f04f 0e54 	mov.w	lr, #84	; 0x54
 8000548:	200c      	movs	r0, #12
 800054a:	f8a3 e000 	strh.w	lr, [r3]
 800054e:	f04f 0c0a 	mov.w	ip, #10
 8000552:	8018      	strh	r0, [r3, #0]
	GDISP_REG = index;
 8000554:	f04f 0e3a 	mov.w	lr, #58	; 0x3a
	GDISP_RAM = data;
 8000558:	801d      	strh	r5, [r3, #0]
 800055a:	2055      	movs	r0, #85	; 0x55
	GDISP_REG = index;
 800055c:	8021      	strh	r1, [r4, #0]
 800055e:	212a      	movs	r1, #42	; 0x2a
	GDISP_RAM = data;
 8000560:	f8a3 c000 	strh.w	ip, [r3]
	GDISP_REG = index;
 8000564:	f8a4 e000 	strh.w	lr, [r4]
	GDISP_RAM = data;
 8000568:	8018      	strh	r0, [r3, #0]
 800056a:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
	GDISP_REG = index;
 800056e:	8021      	strh	r1, [r4, #0]
 8000570:	202b      	movs	r0, #43	; 0x2b
	GDISP_RAM = data;
 8000572:	21e0      	movs	r1, #224	; 0xe0
 8000574:	801d      	strh	r5, [r3, #0]
 8000576:	801d      	strh	r5, [r3, #0]
 8000578:	801a      	strh	r2, [r3, #0]
 800057a:	f8a3 e000 	strh.w	lr, [r3]
	GDISP_REG = index;
 800057e:	8020      	strh	r0, [r4, #0]
	GDISP_RAM = data;
 8000580:	801d      	strh	r5, [r3, #0]
  gfxSleepMilliseconds(120);
 8000582:	2078      	movs	r0, #120	; 0x78
 8000584:	801d      	strh	r5, [r3, #0]
 8000586:	801a      	strh	r2, [r3, #0]
 8000588:	8019      	strh	r1, [r3, #0]
 800058a:	f001 fba5 	bl	8001cd8 <gfxSleepMilliseconds>
	GDISP_REG = index;
 800058e:	2029      	movs	r0, #41	; 0x29
  g->g.Backlight = GDISP_INITIAL_BACKLIGHT;
 8000590:	2364      	movs	r3, #100	; 0x64
 8000592:	8020      	strh	r0, [r4, #0]
  g->g.Width = GDISP_SCREEN_WIDTH;
 8000594:	f44f 71a0 	mov.w	r1, #320	; 0x140
  g->g.Height = GDISP_SCREEN_HEIGHT;
 8000598:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  g->g.Contrast = GDISP_INITIAL_CONTRAST;
 800059c:	7437      	strb	r7, [r6, #16]
  g->g.Backlight = GDISP_INITIAL_BACKLIGHT;
 800059e:	73f3      	strb	r3, [r6, #15]
}
 80005a0:	20ff      	movs	r0, #255	; 0xff
  g->g.Orientation = GDISP_ROTATE_0;
 80005a2:	81b5      	strh	r5, [r6, #12]
  g->g.Powermode = powerOn;
 80005a4:	f886 800e 	strb.w	r8, [r6, #14]
  g->g.Width = GDISP_SCREEN_WIDTH;
 80005a8:	8131      	strh	r1, [r6, #8]
  g->g.Height = GDISP_SCREEN_HEIGHT;
 80005aa:	8172      	strh	r2, [r6, #10]
}
 80005ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80005b0:	40020000 	.word	0x40020000
 80005b4:	60080000 	.word	0x60080000

080005b8 <gdisp_lld_control>:
  }
#endif

#if GDISP_NEED_CONTROL && GDISP_HARDWARE_CONTROL
  LLDSPEC void gdisp_lld_control(GDisplay *g) {
    switch(g->p.x) {
 80005b8:	f9b0 202c 	ldrsh.w	r2, [r0, #44]	; 0x2c
  LLDSPEC void gdisp_lld_control(GDisplay *g) {
 80005bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005be:	4603      	mov	r3, r0
    switch(g->p.x) {
 80005c0:	b1f2      	cbz	r2, 8000600 <gdisp_lld_control+0x48>
 80005c2:	2a01      	cmp	r2, #1
 80005c4:	d11b      	bne.n	80005fe <gdisp_lld_control+0x46>
      }
      g->g.Powermode = (powermode_t)g->p.ptr;
      return;

    case GDISP_CONTROL_ORIENTATION:
      if (g->g.Orientation == (orientation_t)g->p.ptr)
 80005c6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80005c8:	8980      	ldrh	r0, [r0, #12]
 80005ca:	b291      	uxth	r1, r2
 80005cc:	4288      	cmp	r0, r1
 80005ce:	d015      	beq.n	80005fc <gdisp_lld_control+0x44>
        return;
      switch((orientation_t)g->p.ptr) {
 80005d0:	295a      	cmp	r1, #90	; 0x5a
 80005d2:	d04f      	beq.n	8000674 <gdisp_lld_control+0xbc>
 80005d4:	dd2a      	ble.n	800062c <gdisp_lld_control+0x74>
 80005d6:	29b4      	cmp	r1, #180	; 0xb4
 80005d8:	d052      	beq.n	8000680 <gdisp_lld_control+0xc8>
 80005da:	f5b1 7f87 	cmp.w	r1, #270	; 0x10e
 80005de:	d158      	bne.n	8000692 <gdisp_lld_control+0xda>
	GDISP_RAM = data;
 80005e0:	4c2c      	ldr	r4, [pc, #176]	; (8000694 <gdisp_lld_control+0xdc>)
	GDISP_REG = index;
 80005e2:	f04f 46c0 	mov.w	r6, #1610612736	; 0x60000000
 80005e6:	2736      	movs	r7, #54	; 0x36
	GDISP_RAM = data;
 80005e8:	25ab      	movs	r5, #171	; 0xab
        acquire_bus(g);

        write_reg(g, 0x36, 0xAB);

        release_bus(g);
        g->g.Height = GDISP_SCREEN_WIDTH;
 80005ea:	f44f 70a0 	mov.w	r0, #320	; 0x140
        g->g.Width = GDISP_SCREEN_HEIGHT;
 80005ee:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
	GDISP_REG = index;
 80005f2:	8037      	strh	r7, [r6, #0]
	GDISP_RAM = data;
 80005f4:	8025      	strh	r5, [r4, #0]
        g->g.Height = GDISP_SCREEN_WIDTH;
 80005f6:	8158      	strh	r0, [r3, #10]
        g->g.Width = GDISP_SCREEN_HEIGHT;
 80005f8:	811a      	strh	r2, [r3, #8]
        break;
      default:
        return;
      }
      g->g.Orientation = (orientation_t)g->p.ptr;
 80005fa:	8199      	strh	r1, [r3, #12]
 80005fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (g->g.Powermode == (powermode_t)g->p.ptr)
 8000600:	7b85      	ldrb	r5, [r0, #14]
 8000602:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
 8000606:	428d      	cmp	r5, r1
 8000608:	d0f8      	beq.n	80005fc <gdisp_lld_control+0x44>
      switch((powermode_t)g->p.ptr) {
 800060a:	2901      	cmp	r1, #1
 800060c:	4604      	mov	r4, r0
 800060e:	d029      	beq.n	8000664 <gdisp_lld_control+0xac>
 8000610:	2903      	cmp	r1, #3
 8000612:	d01a      	beq.n	800064a <gdisp_lld_control+0x92>
 8000614:	2900      	cmp	r1, #0
 8000616:	d1f1      	bne.n	80005fc <gdisp_lld_control+0x44>
	GDISP_REG = index;
 8000618:	f04f 45c0 	mov.w	r5, #1610612736	; 0x60000000
	GDISP_RAM = data;
 800061c:	4a1d      	ldr	r2, [pc, #116]	; (8000694 <gdisp_lld_control+0xdc>)
	GDISP_REG = index;
 800061e:	2610      	movs	r6, #16
	GDISP_RAM = data;
 8000620:	2001      	movs	r0, #1
	GDISP_REG = index;
 8000622:	802e      	strh	r6, [r5, #0]
	GDISP_RAM = data;
 8000624:	460b      	mov	r3, r1
 8000626:	8010      	strh	r0, [r2, #0]
      g->g.Powermode = (powermode_t)g->p.ptr;
 8000628:	73a3      	strb	r3, [r4, #14]
      return;
 800062a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      switch((orientation_t)g->p.ptr) {
 800062c:	bb81      	cbnz	r1, 8000690 <gdisp_lld_control+0xd8>
 800062e:	4c19      	ldr	r4, [pc, #100]	; (8000694 <gdisp_lld_control+0xdc>)
	GDISP_REG = index;
 8000630:	f04f 46c0 	mov.w	r6, #1610612736	; 0x60000000
 8000634:	2736      	movs	r7, #54	; 0x36
	GDISP_RAM = data;
 8000636:	250a      	movs	r5, #10
        g->g.Height = GDISP_SCREEN_HEIGHT;
 8000638:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
        g->g.Width = GDISP_SCREEN_WIDTH;
 800063c:	f44f 72a0 	mov.w	r2, #320	; 0x140
	GDISP_REG = index;
 8000640:	8037      	strh	r7, [r6, #0]
	GDISP_RAM = data;
 8000642:	8025      	strh	r5, [r4, #0]
        g->g.Height = GDISP_SCREEN_HEIGHT;
 8000644:	8158      	strh	r0, [r3, #10]
        g->g.Width = GDISP_SCREEN_WIDTH;
 8000646:	811a      	strh	r2, [r3, #8]
 8000648:	e7d7      	b.n	80005fa <gdisp_lld_control+0x42>
	GDISP_REG = index;
 800064a:	f04f 46c0 	mov.w	r6, #1610612736	; 0x60000000
	GDISP_RAM = data;
 800064e:	4b11      	ldr	r3, [pc, #68]	; (8000694 <gdisp_lld_control+0xdc>)
	GDISP_REG = index;
 8000650:	2710      	movs	r7, #16
        if (g->g.Powermode != powerSleep)
 8000652:	2d01      	cmp	r5, #1
 8000654:	8037      	strh	r7, [r6, #0]
	GDISP_RAM = data;
 8000656:	801a      	strh	r2, [r3, #0]
 8000658:	d018      	beq.n	800068c <gdisp_lld_control+0xd4>
          gdisp_lld_init(g);
 800065a:	f7ff ff11 	bl	8000480 <gdisp_lld_init>
 800065e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8000662:	e7e1      	b.n	8000628 <gdisp_lld_control+0x70>
	GDISP_REG = index;
 8000664:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
	GDISP_RAM = data;
 8000668:	4a0a      	ldr	r2, [pc, #40]	; (8000694 <gdisp_lld_control+0xdc>)
	GDISP_REG = index;
 800066a:	2010      	movs	r0, #16
 800066c:	8018      	strh	r0, [r3, #0]
	GDISP_RAM = data;
 800066e:	460b      	mov	r3, r1
 8000670:	8011      	strh	r1, [r2, #0]
 8000672:	e7d9      	b.n	8000628 <gdisp_lld_control+0x70>
	GDISP_REG = index;
 8000674:	f04f 46c0 	mov.w	r6, #1610612736	; 0x60000000
	GDISP_RAM = data;
 8000678:	4c06      	ldr	r4, [pc, #24]	; (8000694 <gdisp_lld_control+0xdc>)
	GDISP_REG = index;
 800067a:	2736      	movs	r7, #54	; 0x36
	GDISP_RAM = data;
 800067c:	2568      	movs	r5, #104	; 0x68
 800067e:	e7b4      	b.n	80005ea <gdisp_lld_control+0x32>
	GDISP_REG = index;
 8000680:	f04f 46c0 	mov.w	r6, #1610612736	; 0x60000000
	GDISP_RAM = data;
 8000684:	4c03      	ldr	r4, [pc, #12]	; (8000694 <gdisp_lld_control+0xdc>)
	GDISP_REG = index;
 8000686:	2736      	movs	r7, #54	; 0x36
	GDISP_RAM = data;
 8000688:	25c9      	movs	r5, #201	; 0xc9
 800068a:	e7d5      	b.n	8000638 <gdisp_lld_control+0x80>
 800068c:	460b      	mov	r3, r1
 800068e:	e7cb      	b.n	8000628 <gdisp_lld_control+0x70>
 8000690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000694:	60080000 	.word	0x60080000

08000698 <gdisp_lld_write_stop>:
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <gdisp_lld_write_start>:
	GDISP_REG = index;
 800069c:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 80006a0:	232a      	movs	r3, #42	; 0x2a
  LLDSPEC  void gdisp_lld_write_start(GDisplay *g) {
 80006a2:	b410      	push	{r4}
 80006a4:	800b      	strh	r3, [r1, #0]
  write_reg2x16(g, 0x2A, g->p.x, g->p.x + g->p.cx - 1);
 80006a6:	f990 202d 	ldrsb.w	r2, [r0, #45]	; 0x2d
	GDISP_RAM = data;
 80006aa:	4b1b      	ldr	r3, [pc, #108]	; (8000718 <gdisp_lld_write_start+0x7c>)
 80006ac:	b292      	uxth	r2, r2
 80006ae:	801a      	strh	r2, [r3, #0]
 80006b0:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 80006b4:	801a      	strh	r2, [r3, #0]
 80006b6:	f9b0 4030 	ldrsh.w	r4, [r0, #48]	; 0x30
 80006ba:	f9b0 202c 	ldrsh.w	r2, [r0, #44]	; 0x2c
 80006be:	4422      	add	r2, r4
 80006c0:	3a01      	subs	r2, #1
 80006c2:	f3c2 220f 	ubfx	r2, r2, #8, #16
 80006c6:	801a      	strh	r2, [r3, #0]
 80006c8:	f890 4030 	ldrb.w	r4, [r0, #48]	; 0x30
 80006cc:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 80006d0:	4422      	add	r2, r4
 80006d2:	3a01      	subs	r2, #1
 80006d4:	b2d2      	uxtb	r2, r2
	GDISP_REG = index;
 80006d6:	242b      	movs	r4, #43	; 0x2b
	GDISP_RAM = data;
 80006d8:	801a      	strh	r2, [r3, #0]
	GDISP_REG = index;
 80006da:	800c      	strh	r4, [r1, #0]
  write_reg2x16(g, 0x2B, g->p.y, g->p.y + g->p.cy - 1);
 80006dc:	f990 202f 	ldrsb.w	r2, [r0, #47]	; 0x2f
 80006e0:	b292      	uxth	r2, r2
	GDISP_RAM = data;
 80006e2:	801a      	strh	r2, [r3, #0]
 80006e4:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
 80006e8:	801a      	strh	r2, [r3, #0]
 80006ea:	f9b0 4032 	ldrsh.w	r4, [r0, #50]	; 0x32
 80006ee:	f9b0 202e 	ldrsh.w	r2, [r0, #46]	; 0x2e
 80006f2:	4422      	add	r2, r4
 80006f4:	3a01      	subs	r2, #1
 80006f6:	f3c2 220f 	ubfx	r2, r2, #8, #16
 80006fa:	801a      	strh	r2, [r3, #0]
 80006fc:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
 8000700:	f890 0032 	ldrb.w	r0, [r0, #50]	; 0x32
  }
 8000704:	f85d 4b04 	ldr.w	r4, [sp], #4
  write_reg2x16(g, 0x2B, g->p.y, g->p.y + g->p.cy - 1);
 8000708:	4402      	add	r2, r0
 800070a:	3a01      	subs	r2, #1
 800070c:	b2d2      	uxtb	r2, r2
	GDISP_REG = index;
 800070e:	202c      	movs	r0, #44	; 0x2c
	GDISP_RAM = data;
 8000710:	801a      	strh	r2, [r3, #0]
	GDISP_REG = index;
 8000712:	8008      	strh	r0, [r1, #0]
  }
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	60080000 	.word	0x60080000

0800071c <_gfxTaskSwitch>:
#if GFX_COMPILER == GFX_COMPILER_GCC || GFX_COMPILER == GFX_COMPILER_CYGWIN || GFX_COMPILER == GFX_COMPILER_MINGW32 || GFX_COMPILER == GFX_COMPILER_MINGW64
	#define GFX_THREADS_DONE
	#define _gfxThreadsInit()

	static __attribute__((pcs("aapcs-vfp"),naked)) void _gfxTaskSwitch(thread *oldt, thread *newt) {
		__asm__ volatile (	"push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}	\n\t"
 800071c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000720:	ed2d 8a10 	vpush	{s16-s31}
 8000724:	f8c0 d014 	str.w	sp, [r0, #20]
 8000728:	f8d1 d014 	ldr.w	sp, [r1, #20]
 800072c:	ecbd 8a10 	vpop	{s16-s31}
 8000730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000734 <WM_MinMax>:
			}
		#endif
	}
}

static void WM_MinMax(GHandle gh, GWindowMinMax minmax) {
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop

08000738 <WM_Init>:
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop

0800073c <WM_DeInit>:
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop

08000740 <line_clip>:
	#endif
}

// Parameters:	x,y and x1,y1
// Alters:		x,y x1,y1 cx,cy
static void line_clip(GDisplay *g) {
 8000740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t dy, dx;
	int16_t addx, addy;
	int16_t P, diff, i;

	// Is this a horizontal line (or a point)
	if (g->p.y == g->p.y1) {
 8000744:	f9b0 202e 	ldrsh.w	r2, [r0, #46]	; 0x2e
 8000748:	f9b0 6036 	ldrsh.w	r6, [r0, #54]	; 0x36
 800074c:	42b2      	cmp	r2, r6
static void line_clip(GDisplay *g) {
 800074e:	b083      	sub	sp, #12
 8000750:	4604      	mov	r4, r0
	if (g->p.y == g->p.y1) {
 8000752:	f000 80cc 	beq.w	80008ee <line_clip+0x1ae>
		hline_clip(g);
		return;
	}

	// Is this a vertical line (or a point)
	if (g->p.x == g->p.x1) {
 8000756:	f9b0 302c 	ldrsh.w	r3, [r0, #44]	; 0x2c
 800075a:	f9b0 7034 	ldrsh.w	r7, [r0, #52]	; 0x34
 800075e:	42bb      	cmp	r3, r7
 8000760:	f000 80fd 	beq.w	800095e <line_clip+0x21e>
	//	This should be replaced with fixed point slope based line drawing
	//	which is more efficient on modern processors as it branches less.
	//	When clipping is needed, all the clipping could also be done up front
	//	instead of on each pixel.

	if (g->p.x1 >= g->p.x) {
 8000764:	dd3b      	ble.n	80007de <line_clip+0x9e>
		dx = g->p.x1 - g->p.x;
		addx = 1;
	} else {
		dx = g->p.x - g->p.x1;
 8000766:	1bdf      	subs	r7, r3, r7
		addx = -1;
	}
	if (g->p.y1 >= g->p.y) {
 8000768:	42b2      	cmp	r2, r6
		dx = g->p.x - g->p.x1;
 800076a:	b23f      	sxth	r7, r7
 800076c:	f64f 7aff 	movw	sl, #65535	; 0xffff
	if (g->p.y1 >= g->p.y) {
 8000770:	dc3b      	bgt.n	80007ea <line_clip+0xaa>
		dy = g->p.y1 - g->p.y;
 8000772:	1ab6      	subs	r6, r6, r2
 8000774:	b236      	sxth	r6, r6
	} else {
		dy = g->p.y - g->p.y1;
		addy = -1;
	}

	if (dx >= dy) {
 8000776:	42be      	cmp	r6, r7
 8000778:	f04f 0901 	mov.w	r9, #1
 800077c:	dc3b      	bgt.n	80007f6 <line_clip+0xb6>
		dy <<= 1;
 800077e:	0076      	lsls	r6, r6, #1
		P = dy - dx;
 8000780:	fa1f fb87 	uxth.w	fp, r7
 8000784:	b2b6      	uxth	r6, r6
 8000786:	eba6 050b 	sub.w	r5, r6, fp
 800078a:	b2ad      	uxth	r5, r5
		diff = P - dx;
 800078c:	eba5 0b0b 	sub.w	fp, r5, fp

		for(i=0; i<=dx; ++i) {
 8000790:	2f00      	cmp	r7, #0
		diff = P - dx;
 8000792:	fa1f fb8b 	uxth.w	fp, fp
		P = dy - dx;
 8000796:	b22d      	sxth	r5, r5
		for(i=0; i<=dx; ++i) {
 8000798:	db1e      	blt.n	80007d8 <line_clip+0x98>
 800079a:	f04f 0800 	mov.w	r8, #0
			g->p.cx = g->p.cy = 1;
 800079e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
			if (g->p.x < g->clipx0 || g->p.x >= g->clipx1 || g->p.y < g->clipy0 || g->p.y >= g->clipy1)
 80007a2:	f9b4 2024 	ldrsh.w	r2, [r4, #36]	; 0x24
 80007a6:	429a      	cmp	r2, r3
 80007a8:	dc03      	bgt.n	80007b2 <line_clip+0x72>
 80007aa:	f9b4 2028 	ldrsh.w	r2, [r4, #40]	; 0x28
 80007ae:	429a      	cmp	r2, r3
 80007b0:	dc6d      	bgt.n	800088e <line_clip+0x14e>
			drawpixel_clip(g);
			if (P < 0) {
 80007b2:	2d00      	cmp	r5, #0
				P  += dy;
				g->p.x += addx;
			} else {
				P  += diff;
				g->p.x += addx;
 80007b4:	eb0a 0e03 	add.w	lr, sl, r3
				P  += diff;
 80007b8:	eb0b 0005 	add.w	r0, fp, r5
			if (P < 0) {
 80007bc:	db59      	blt.n	8000872 <line_clip+0x132>
				g->p.y += addy;
 80007be:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 80007c0:	f108 0801 	add.w	r8, r8, #1
				g->p.x += addx;
 80007c4:	fa0f f38e 	sxth.w	r3, lr
		for(i=0; i<=dx; ++i) {
 80007c8:	fa0f fe88 	sxth.w	lr, r8
				g->p.y += addy;
 80007cc:	444a      	add	r2, r9
		for(i=0; i<=dx; ++i) {
 80007ce:	4577      	cmp	r7, lr
 80007d0:	85a3      	strh	r3, [r4, #44]	; 0x2c
				P  += diff;
 80007d2:	b205      	sxth	r5, r0
				g->p.y += addy;
 80007d4:	85e2      	strh	r2, [r4, #46]	; 0x2e
		for(i=0; i<=dx; ++i) {
 80007d6:	dae4      	bge.n	80007a2 <line_clip+0x62>
				g->p.x += addx;
				g->p.y += addy;
			}
		}
	}
}
 80007d8:	b003      	add	sp, #12
 80007da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dx = g->p.x1 - g->p.x;
 80007de:	1aff      	subs	r7, r7, r3
	if (g->p.y1 >= g->p.y) {
 80007e0:	42b2      	cmp	r2, r6
		dx = g->p.x1 - g->p.x;
 80007e2:	b23f      	sxth	r7, r7
 80007e4:	f04f 0a01 	mov.w	sl, #1
	if (g->p.y1 >= g->p.y) {
 80007e8:	ddc3      	ble.n	8000772 <line_clip+0x32>
		dy = g->p.y - g->p.y1;
 80007ea:	1b96      	subs	r6, r2, r6
 80007ec:	b236      	sxth	r6, r6
	if (dx >= dy) {
 80007ee:	42be      	cmp	r6, r7
		dy = g->p.y - g->p.y1;
 80007f0:	f64f 79ff 	movw	r9, #65535	; 0xffff
	if (dx >= dy) {
 80007f4:	ddc3      	ble.n	800077e <line_clip+0x3e>
		dx <<= 1;
 80007f6:	007f      	lsls	r7, r7, #1
		P = dx - dy;
 80007f8:	fa1f fb86 	uxth.w	fp, r6
 80007fc:	b2bf      	uxth	r7, r7
 80007fe:	eba7 050b 	sub.w	r5, r7, fp
 8000802:	b2ad      	uxth	r5, r5
		diff = P - dy;
 8000804:	eba5 0b0b 	sub.w	fp, r5, fp
		for(i=0; i<=dy; ++i) {
 8000808:	2e00      	cmp	r6, #0
		diff = P - dy;
 800080a:	fa1f fb8b 	uxth.w	fp, fp
		P = dx - dy;
 800080e:	b22d      	sxth	r5, r5
		for(i=0; i<=dy; ++i) {
 8000810:	dbe2      	blt.n	80007d8 <line_clip+0x98>
 8000812:	f04f 0800 	mov.w	r8, #0
			g->p.cx = g->p.cy = 1;
 8000816:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800081a:	e00e      	b.n	800083a <line_clip+0xfa>
				g->p.x += addx;
 800081c:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800081e:	f108 0801 	add.w	r8, r8, #1
				g->p.y += addy;
 8000822:	fa0f f28e 	sxth.w	r2, lr
		for(i=0; i<=dy; ++i) {
 8000826:	fa0f fe88 	sxth.w	lr, r8
				g->p.x += addx;
 800082a:	4453      	add	r3, sl
		for(i=0; i<=dy; ++i) {
 800082c:	4576      	cmp	r6, lr
 800082e:	85e2      	strh	r2, [r4, #46]	; 0x2e
				P  += diff;
 8000830:	b205      	sxth	r5, r0
				g->p.x += addx;
 8000832:	85a3      	strh	r3, [r4, #44]	; 0x2c
		for(i=0; i<=dy; ++i) {
 8000834:	dbd0      	blt.n	80007d8 <line_clip+0x98>
 8000836:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
			if (g->p.x < g->clipx0 || g->p.x >= g->clipx1 || g->p.y < g->clipy0 || g->p.y >= g->clipy1)
 800083a:	f9b4 0024 	ldrsh.w	r0, [r4, #36]	; 0x24
 800083e:	4298      	cmp	r0, r3
 8000840:	dc03      	bgt.n	800084a <line_clip+0x10a>
 8000842:	f9b4 0028 	ldrsh.w	r0, [r4, #40]	; 0x28
 8000846:	4298      	cmp	r0, r3
 8000848:	dc3a      	bgt.n	80008c0 <line_clip+0x180>
			if (P < 0) {
 800084a:	2d00      	cmp	r5, #0
				g->p.y += addy;
 800084c:	eb09 0e02 	add.w	lr, r9, r2
				P  += diff;
 8000850:	eb0b 0005 	add.w	r0, fp, r5
			if (P < 0) {
 8000854:	dae2      	bge.n	800081c <line_clip+0xdc>
 8000856:	f108 0801 	add.w	r8, r8, #1
		for(i=0; i<=dy; ++i) {
 800085a:	fa0f f388 	sxth.w	r3, r8
				g->p.y += addy;
 800085e:	fa0f f28e 	sxth.w	r2, lr
				P  += dx;
 8000862:	443d      	add	r5, r7
		for(i=0; i<=dy; ++i) {
 8000864:	429e      	cmp	r6, r3
 8000866:	85e2      	strh	r2, [r4, #46]	; 0x2e
				P  += dx;
 8000868:	b22d      	sxth	r5, r5
		for(i=0; i<=dy; ++i) {
 800086a:	dae4      	bge.n	8000836 <line_clip+0xf6>
}
 800086c:	b003      	add	sp, #12
 800086e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000872:	f108 0801 	add.w	r8, r8, #1
		for(i=0; i<=dx; ++i) {
 8000876:	fa0f f288 	sxth.w	r2, r8
				g->p.x += addx;
 800087a:	fa0f f38e 	sxth.w	r3, lr
				P  += dy;
 800087e:	4435      	add	r5, r6
		for(i=0; i<=dx; ++i) {
 8000880:	4297      	cmp	r7, r2
 8000882:	85a3      	strh	r3, [r4, #44]	; 0x2c
				P  += dy;
 8000884:	b22d      	sxth	r5, r5
		for(i=0; i<=dx; ++i) {
 8000886:	da8c      	bge.n	80007a2 <line_clip+0x62>
}
 8000888:	b003      	add	sp, #12
 800088a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (g->p.x < g->clipx0 || g->p.x >= g->clipx1 || g->p.y < g->clipy0 || g->p.y >= g->clipy1)
 800088e:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	; 0x2e
 8000892:	f9b4 0026 	ldrsh.w	r0, [r4, #38]	; 0x26
 8000896:	4290      	cmp	r0, r2
 8000898:	dc8b      	bgt.n	80007b2 <line_clip+0x72>
 800089a:	f9b4 002a 	ldrsh.w	r0, [r4, #42]	; 0x2a
 800089e:	4290      	cmp	r0, r2
 80008a0:	dd87      	ble.n	80007b2 <line_clip+0x72>
			g->p.cx = g->p.cy = 1;
 80008a2:	6321      	str	r1, [r4, #48]	; 0x30
			gdisp_lld_write_start(g);
 80008a4:	4620      	mov	r0, r4
			g->p.cx = g->p.cy = 1;
 80008a6:	9101      	str	r1, [sp, #4]
			gdisp_lld_write_start(g);
 80008a8:	f7ff fef8 	bl	800069c <gdisp_lld_write_start>
			gdisp_lld_write_color(g);
 80008ac:	4620      	mov	r0, r4
 80008ae:	f7ff fd91 	bl	80003d4 <gdisp_lld_write_color>
			gdisp_lld_write_stop(g);
 80008b2:	4620      	mov	r0, r4
 80008b4:	f7ff fef0 	bl	8000698 <gdisp_lld_write_stop>
 80008b8:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 80008bc:	9901      	ldr	r1, [sp, #4]
 80008be:	e778      	b.n	80007b2 <line_clip+0x72>
			if (g->p.x < g->clipx0 || g->p.x >= g->clipx1 || g->p.y < g->clipy0 || g->p.y >= g->clipy1)
 80008c0:	f9b4 3026 	ldrsh.w	r3, [r4, #38]	; 0x26
 80008c4:	4293      	cmp	r3, r2
 80008c6:	dcc0      	bgt.n	800084a <line_clip+0x10a>
 80008c8:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a
 80008cc:	4293      	cmp	r3, r2
 80008ce:	ddbc      	ble.n	800084a <line_clip+0x10a>
			g->p.cx = g->p.cy = 1;
 80008d0:	6321      	str	r1, [r4, #48]	; 0x30
			gdisp_lld_write_start(g);
 80008d2:	4620      	mov	r0, r4
			g->p.cx = g->p.cy = 1;
 80008d4:	9101      	str	r1, [sp, #4]
			gdisp_lld_write_start(g);
 80008d6:	f7ff fee1 	bl	800069c <gdisp_lld_write_start>
			gdisp_lld_write_color(g);
 80008da:	4620      	mov	r0, r4
 80008dc:	f7ff fd7a 	bl	80003d4 <gdisp_lld_write_color>
			gdisp_lld_write_stop(g);
 80008e0:	4620      	mov	r0, r4
 80008e2:	f7ff fed9 	bl	8000698 <gdisp_lld_write_stop>
 80008e6:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	; 0x2e
 80008ea:	9901      	ldr	r1, [sp, #4]
 80008ec:	e7ad      	b.n	800084a <line_clip+0x10a>
	if (g->p.x1 < g->p.x) {
 80008ee:	f9b0 1034 	ldrsh.w	r1, [r0, #52]	; 0x34
 80008f2:	f9b0 302c 	ldrsh.w	r3, [r0, #44]	; 0x2c
 80008f6:	4299      	cmp	r1, r3
 80008f8:	db60      	blt.n	80009bc <line_clip+0x27c>
			if (g->p.y < g->clipy0 || g->p.y >= g->clipy1) return;
 80008fa:	f9b4 0026 	ldrsh.w	r0, [r4, #38]	; 0x26
 80008fe:	4290      	cmp	r0, r2
 8000900:	f73f af6a 	bgt.w	80007d8 <line_clip+0x98>
 8000904:	f9b4 002a 	ldrsh.w	r0, [r4, #42]	; 0x2a
 8000908:	4290      	cmp	r0, r2
 800090a:	f77f af65 	ble.w	80007d8 <line_clip+0x98>
			if (g->p.x < g->clipx0) g->p.x = g->clipx0;
 800090e:	f9b4 2024 	ldrsh.w	r2, [r4, #36]	; 0x24
 8000912:	429a      	cmp	r2, r3
 8000914:	bfc4      	itt	gt
 8000916:	85a2      	strhgt	r2, [r4, #44]	; 0x2c
 8000918:	4613      	movgt	r3, r2
			if (g->p.x1 >= g->clipx1) g->p.x1 = g->clipx1 - 1;
 800091a:	f9b4 2028 	ldrsh.w	r2, [r4, #40]	; 0x28
 800091e:	428a      	cmp	r2, r1
 8000920:	dc02      	bgt.n	8000928 <line_clip+0x1e8>
 8000922:	3a01      	subs	r2, #1
 8000924:	b211      	sxth	r1, r2
 8000926:	86a1      	strh	r1, [r4, #52]	; 0x34
			if (g->p.x1 < g->p.x) return;
 8000928:	4299      	cmp	r1, r3
 800092a:	f6ff af55 	blt.w	80007d8 <line_clip+0x98>
			g->p.cx = g->p.x1 - g->p.x + 1;
 800092e:	f1c3 0301 	rsb	r3, r3, #1
 8000932:	440b      	add	r3, r1
			g->p.cy = 1;
 8000934:	2201      	movs	r2, #1
			g->p.cx = g->p.x1 - g->p.x + 1;
 8000936:	8623      	strh	r3, [r4, #48]	; 0x30
			g->p.cy = 1;
 8000938:	8662      	strh	r2, [r4, #50]	; 0x32
			gdisp_lld_write_start(g);
 800093a:	4620      	mov	r0, r4
 800093c:	f7ff feae 	bl	800069c <gdisp_lld_write_start>
			do { gdisp_lld_write_color(g); } while(--g->p.cx);
 8000940:	4620      	mov	r0, r4
 8000942:	f7ff fd47 	bl	80003d4 <gdisp_lld_write_color>
 8000946:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8000948:	3b01      	subs	r3, #1
 800094a:	b21b      	sxth	r3, r3
 800094c:	8623      	strh	r3, [r4, #48]	; 0x30
 800094e:	2b00      	cmp	r3, #0
 8000950:	d1f6      	bne.n	8000940 <line_clip+0x200>
			gdisp_lld_write_stop(g);
 8000952:	4620      	mov	r0, r4
}
 8000954:	b003      	add	sp, #12
 8000956:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			gdisp_lld_write_stop(g);
 800095a:	f7ff be9d 	b.w	8000698 <gdisp_lld_write_stop>
	if (g->p.y1 < g->p.y) {
 800095e:	42b2      	cmp	r2, r6
 8000960:	dc33      	bgt.n	80009ca <line_clip+0x28a>
			if (g->p.x < g->clipx0 || g->p.x >= g->clipx1) return;
 8000962:	f9b4 1024 	ldrsh.w	r1, [r4, #36]	; 0x24
 8000966:	4299      	cmp	r1, r3
 8000968:	f73f af36 	bgt.w	80007d8 <line_clip+0x98>
 800096c:	f9b4 1028 	ldrsh.w	r1, [r4, #40]	; 0x28
 8000970:	4299      	cmp	r1, r3
 8000972:	f77f af31 	ble.w	80007d8 <line_clip+0x98>
			if (g->p.y < g->clipy0) g->p.y = g->clipy0;
 8000976:	f9b4 3026 	ldrsh.w	r3, [r4, #38]	; 0x26
 800097a:	4293      	cmp	r3, r2
 800097c:	bfc4      	itt	gt
 800097e:	85e3      	strhgt	r3, [r4, #46]	; 0x2e
 8000980:	461a      	movgt	r2, r3
			if (g->p.y1 >= g->clipy1) g->p.y1 = g->clipy1 - 1;
 8000982:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a
 8000986:	42b3      	cmp	r3, r6
 8000988:	dc02      	bgt.n	8000990 <line_clip+0x250>
 800098a:	3b01      	subs	r3, #1
 800098c:	b21e      	sxth	r6, r3
 800098e:	86e6      	strh	r6, [r4, #54]	; 0x36
			if (g->p.y1 < g->p.y) return;
 8000990:	4296      	cmp	r6, r2
 8000992:	f6ff af21 	blt.w	80007d8 <line_clip+0x98>
			g->p.cy = g->p.y1 - g->p.y + 1;
 8000996:	f1c2 0201 	rsb	r2, r2, #1
 800099a:	4416      	add	r6, r2
			g->p.cx = 1;
 800099c:	2301      	movs	r3, #1
			g->p.cy = g->p.y1 - g->p.y + 1;
 800099e:	8666      	strh	r6, [r4, #50]	; 0x32
			g->p.cx = 1;
 80009a0:	8623      	strh	r3, [r4, #48]	; 0x30
			gdisp_lld_write_start(g);
 80009a2:	4620      	mov	r0, r4
 80009a4:	f7ff fe7a 	bl	800069c <gdisp_lld_write_start>
			do { gdisp_lld_write_color(g); } while(--g->p.cy);
 80009a8:	4620      	mov	r0, r4
 80009aa:	f7ff fd13 	bl	80003d4 <gdisp_lld_write_color>
 80009ae:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80009b0:	3b01      	subs	r3, #1
 80009b2:	b21b      	sxth	r3, r3
 80009b4:	8663      	strh	r3, [r4, #50]	; 0x32
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d1f6      	bne.n	80009a8 <line_clip+0x268>
 80009ba:	e7ca      	b.n	8000952 <line_clip+0x212>
		g->p.cx = g->p.x; g->p.x = g->p.x1; g->p.x1 = g->p.cx;
 80009bc:	4618      	mov	r0, r3
 80009be:	8623      	strh	r3, [r4, #48]	; 0x30
 80009c0:	86a3      	strh	r3, [r4, #52]	; 0x34
 80009c2:	85a1      	strh	r1, [r4, #44]	; 0x2c
 80009c4:	460b      	mov	r3, r1
 80009c6:	4601      	mov	r1, r0
 80009c8:	e797      	b.n	80008fa <line_clip+0x1ba>
		g->p.cy = g->p.y; g->p.y = g->p.y1; g->p.y1 = g->p.cy;
 80009ca:	4611      	mov	r1, r2
 80009cc:	8642      	strh	r2, [r0, #50]	; 0x32
 80009ce:	86c2      	strh	r2, [r0, #54]	; 0x36
 80009d0:	85c6      	strh	r6, [r0, #46]	; 0x2e
 80009d2:	4632      	mov	r2, r6
 80009d4:	460e      	mov	r6, r1
 80009d6:	e7c4      	b.n	8000962 <line_clip+0x222>

080009d8 <GTimerThreadHandler>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static DECLARE_THREAD_FUNCTION(GTimerThreadHandler, arg) {
 80009d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	GTimerFunction	fn;
	void			*param;
	(void)			arg;

	nxtTimeout = TIME_INFINITE;
	lastTime = 0;
 80009dc:	f04f 0900 	mov.w	r9, #0
 80009e0:	4c74      	ldr	r4, [pc, #464]	; (8000bb4 <GTimerThreadHandler+0x1dc>)
 80009e2:	4d75      	ldr	r5, [pc, #468]	; (8000bb8 <GTimerThreadHandler+0x1e0>)
static void Qinit(threadQ * q) {
	q->head = q->tail = 0;
}

static void Qadd(threadQ * q, thread *t) {
	t->next = 0;
 80009e4:	46cb      	mov	fp, r9
	nxtTimeout = TIME_INFINITE;
 80009e6:	f04f 36ff 	mov.w	r6, #4294967295
}

static thread *Qpop(threadQ * q) {
	struct thread * t;

	if (!q->head)
 80009ea:	6820      	ldr	r0, [r4, #0]
 80009ec:	b130      	cbz	r0, 80009fc <GTimerThreadHandler+0x24>
		return 0;
	t = q->head;
	q->head = t->next;
 80009ee:	6807      	ldr	r7, [r0, #0]
 80009f0:	6027      	str	r7, [r4, #0]
		(void) oldsz;
		return realloc(ptr, newsz);
	}

	void gfxFree(void *ptr) {
		free(ptr);
 80009f2:	f005 ff81 	bl	80068f8 <free>
	if (!q->head)
 80009f6:	4638      	mov	r0, r7
 80009f8:	2f00      	cmp	r7, #0
 80009fa:	d1f8      	bne.n	80009ee <GTimerThreadHandler+0x16>

	// Clean up zombies
	cleanUpDeadThreads();

	// Is there another thread to run?
	if (!readyQ.head)
 80009fc:	68a3      	ldr	r3, [r4, #8]
 80009fe:	b163      	cbz	r3, 8000a1a <GTimerThreadHandler+0x42>
		return;

	Qadd(&readyQ, me = _gfxCurrentThread);
 8000a00:	6829      	ldr	r1, [r5, #0]
		q->tail->next = t;
 8000a02:	68e2      	ldr	r2, [r4, #12]
	t->next = 0;
 8000a04:	f8c1 b000 	str.w	fp, [r1]
		q->tail->next = t;
 8000a08:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 8000a0a:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 8000a0c:	60e1      	str	r1, [r4, #12]
	_gfxCurrentThread = Qpop(&readyQ);
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8000a0e:	4608      	mov	r0, r1
 8000a10:	4619      	mov	r1, r3
	q->head = t->next;
 8000a12:	60a2      	str	r2, [r4, #8]
	_gfxCurrentThread = Qpop(&readyQ);
 8000a14:	602b      	str	r3, [r5, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8000a16:	f7ff fe81 	bl	800071c <_gfxTaskSwitch>
	switch (ms) {
 8000a1a:	2e00      	cmp	r6, #0
 8000a1c:	f000 80c4 	beq.w	8000ba8 <GTimerThreadHandler+0x1d0>
 8000a20:	1c77      	adds	r7, r6, #1
 8000a22:	f040 80b5 	bne.w	8000b90 <GTimerThreadHandler+0x1b8>
		delay = TIME_INFINITE;
 8000a26:	46b2      	mov	sl, r6
	starttm = 0;
 8000a28:	2600      	movs	r6, #0
	while (psem->cnt <= 0) {
 8000a2a:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	dc27      	bgt.n	8000a82 <GTimerThreadHandler+0xaa>
		switch (delay) {
 8000a32:	f1ba 0f00 	cmp.w	sl, #0
 8000a36:	d026      	beq.n	8000a86 <GTimerThreadHandler+0xae>
 8000a38:	f1ba 3fff 	cmp.w	sl, #4294967295
 8000a3c:	d004      	beq.n	8000a48 <GTimerThreadHandler+0x70>
			if (gfxSystemTicks() - starttm >= delay)
 8000a3e:	f7ff fc4f 	bl	80002e0 <gfxSystemTicks>
 8000a42:	1b80      	subs	r0, r0, r6
 8000a44:	4550      	cmp	r0, sl
 8000a46:	d21e      	bcs.n	8000a86 <GTimerThreadHandler+0xae>
	if (!q->head)
 8000a48:	6820      	ldr	r0, [r4, #0]
 8000a4a:	b130      	cbz	r0, 8000a5a <GTimerThreadHandler+0x82>
	q->head = t->next;
 8000a4c:	6807      	ldr	r7, [r0, #0]
 8000a4e:	6027      	str	r7, [r4, #0]
 8000a50:	f005 ff52 	bl	80068f8 <free>
	if (!q->head)
 8000a54:	4638      	mov	r0, r7
 8000a56:	2f00      	cmp	r7, #0
 8000a58:	d1f8      	bne.n	8000a4c <GTimerThreadHandler+0x74>
	if (!readyQ.head)
 8000a5a:	68a3      	ldr	r3, [r4, #8]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d0e4      	beq.n	8000a2a <GTimerThreadHandler+0x52>
	Qadd(&readyQ, me = _gfxCurrentThread);
 8000a60:	6829      	ldr	r1, [r5, #0]
		q->tail->next = t;
 8000a62:	68e2      	ldr	r2, [r4, #12]
	t->next = 0;
 8000a64:	f8c1 b000 	str.w	fp, [r1]
		q->tail->next = t;
 8000a68:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 8000a6a:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 8000a6c:	60e1      	str	r1, [r4, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8000a6e:	4608      	mov	r0, r1
 8000a70:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 8000a72:	602b      	str	r3, [r5, #0]
	q->head = t->next;
 8000a74:	60a2      	str	r2, [r4, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8000a76:	f7ff fe51 	bl	800071c <_gfxTaskSwitch>
	while (psem->cnt <= 0) {
 8000a7a:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	ddd7      	ble.n	8000a32 <GTimerThreadHandler+0x5a>
	psem->cnt--;
 8000a82:	3b01      	subs	r3, #1
 8000a84:	8223      	strh	r3, [r4, #16]
	pmutex[0] = 1;
 8000a86:	f04f 0a01 	mov.w	sl, #1
		gfxSemWait(&waitsem, nxtTimeout);
		
	restartTimerChecks:
	
		// Our reference time
		tm = gfxSystemTicks();
 8000a8a:	f7ff fc29 	bl	80002e0 <gfxSystemTicks>
 8000a8e:	6966      	ldr	r6, [r4, #20]
 8000a90:	4680      	mov	r8, r0
	while (pmutex[0]) {
 8000a92:	b1d6      	cbz	r6, 8000aca <GTimerThreadHandler+0xf2>
	if (!q->head)
 8000a94:	6820      	ldr	r0, [r4, #0]
 8000a96:	b130      	cbz	r0, 8000aa6 <GTimerThreadHandler+0xce>
	q->head = t->next;
 8000a98:	6807      	ldr	r7, [r0, #0]
 8000a9a:	6027      	str	r7, [r4, #0]
 8000a9c:	f005 ff2c 	bl	80068f8 <free>
	if (!q->head)
 8000aa0:	4638      	mov	r0, r7
 8000aa2:	2f00      	cmp	r7, #0
 8000aa4:	d1f8      	bne.n	8000a98 <GTimerThreadHandler+0xc0>
	if (!readyQ.head)
 8000aa6:	68a3      	ldr	r3, [r4, #8]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d0f2      	beq.n	8000a92 <GTimerThreadHandler+0xba>
	Qadd(&readyQ, me = _gfxCurrentThread);
 8000aac:	6829      	ldr	r1, [r5, #0]
		q->tail->next = t;
 8000aae:	68e2      	ldr	r2, [r4, #12]
	t->next = 0;
 8000ab0:	f8c1 b000 	str.w	fp, [r1]
		q->tail->next = t;
 8000ab4:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 8000ab6:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 8000ab8:	60e1      	str	r1, [r4, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8000aba:	4608      	mov	r0, r1
 8000abc:	4619      	mov	r1, r3
	q->head = t->next;
 8000abe:	60a2      	str	r2, [r4, #8]
	_gfxCurrentThread = Qpop(&readyQ);
 8000ac0:	602b      	str	r3, [r5, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8000ac2:	f7ff fe2b 	bl	800071c <_gfxTaskSwitch>
	while (pmutex[0]) {
 8000ac6:	2e00      	cmp	r6, #0
 8000ac8:	d1e4      	bne.n	8000a94 <GTimerThreadHandler+0xbc>
		nxtTimeout = TIME_INFINITE;
		
		/* We need to obtain the mutex */
		gfxMutexEnter(&mutex);

		if (pTimerHead) {
 8000aca:	69a1      	ldr	r1, [r4, #24]
	pmutex[0] = 1;
 8000acc:	f8c4 a014 	str.w	sl, [r4, #20]
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	d057      	beq.n	8000b84 <GTimerThreadHandler+0x1ac>
 8000ad4:	45c1      	cmp	r9, r8
					goto restartTimerChecks;
				}
				
				// Find when we next need to wake up
				if (!(pt->flags & GTIMER_FLG_INFINITE) && pt->when - tm < nxtTimeout)
					nxtTimeout = (pt->when - tm)/ticks2ms;
 8000ad6:	f8d4 c01c 	ldr.w	ip, [r4, #28]
 8000ada:	460b      	mov	r3, r1
 8000adc:	f04f 36ff 	mov.w	r6, #4294967295
 8000ae0:	d93d      	bls.n	8000b5e <GTimerThreadHandler+0x186>
 8000ae2:	e010      	b.n	8000b06 <GTimerThreadHandler+0x12e>
				if ((pt->flags & GTIMER_FLG_JABBED) || (!(pt->flags & GTIMER_FLG_INFINITE) && TimeIsWithin(pt->when, lastTime, tm))) {
 8000ae4:	0797      	lsls	r7, r2, #30
 8000ae6:	d40b      	bmi.n	8000b00 <GTimerThreadHandler+0x128>
 8000ae8:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8000aec:	45f1      	cmp	r9, lr
				if (!(pt->flags & GTIMER_FLG_INFINITE) && pt->when - tm < nxtTimeout)
 8000aee:	ebae 0008 	sub.w	r0, lr, r8
				if ((pt->flags & GTIMER_FLG_JABBED) || (!(pt->flags & GTIMER_FLG_INFINITE) && TimeIsWithin(pt->when, lastTime, tm))) {
 8000af2:	d90b      	bls.n	8000b0c <GTimerThreadHandler+0x134>
 8000af4:	45f0      	cmp	r8, lr
 8000af6:	d209      	bcs.n	8000b0c <GTimerThreadHandler+0x134>
				if (!(pt->flags & GTIMER_FLG_INFINITE) && pt->when - tm < nxtTimeout)
 8000af8:	4286      	cmp	r6, r0
 8000afa:	d901      	bls.n	8000b00 <GTimerThreadHandler+0x128>
					nxtTimeout = (pt->when - tm)/ticks2ms;
 8000afc:	fbb0 f6fc 	udiv	r6, r0, ip
				pt = pt->next;
 8000b00:	695b      	ldr	r3, [r3, #20]
			} while(pt != pTimerHead);
 8000b02:	4299      	cmp	r1, r3
 8000b04:	d040      	beq.n	8000b88 <GTimerThreadHandler+0x1b0>
				if ((pt->flags & GTIMER_FLG_JABBED) || (!(pt->flags & GTIMER_FLG_INFINITE) && TimeIsWithin(pt->when, lastTime, tm))) {
 8000b06:	8a1a      	ldrh	r2, [r3, #16]
 8000b08:	0750      	lsls	r0, r2, #29
 8000b0a:	d5eb      	bpl.n	8000ae4 <GTimerThreadHandler+0x10c>
					if ((pt->flags & GTIMER_FLG_PERIODIC) && pt->period != TIME_IMMEDIATE) {
 8000b0c:	07d0      	lsls	r0, r2, #31
 8000b0e:	d52b      	bpl.n	8000b68 <GTimerThreadHandler+0x190>
 8000b10:	68d8      	ldr	r0, [r3, #12]
 8000b12:	b348      	cbz	r0, 8000b68 <GTimerThreadHandler+0x190>
						if (!(pt->flags & GTIMER_FLG_INFINITE)) {
 8000b14:	0791      	lsls	r1, r2, #30
 8000b16:	d408      	bmi.n	8000b2a <GTimerThreadHandler+0x152>
							pt->when += ((tm + pt->period - pt->when) / pt->period) * pt->period;
 8000b18:	689e      	ldr	r6, [r3, #8]
 8000b1a:	eb08 0100 	add.w	r1, r8, r0
 8000b1e:	1b89      	subs	r1, r1, r6
 8000b20:	fbb1 f1f0 	udiv	r1, r1, r0
 8000b24:	fb00 6101 	mla	r1, r0, r1, r6
 8000b28:	6099      	str	r1, [r3, #8]
						pt->flags &= ~GTIMER_FLG_JABBED;
 8000b2a:	f022 0204 	bic.w	r2, r2, #4
 8000b2e:	821a      	strh	r2, [r3, #16]
					param = pt->param;
 8000b30:	6858      	ldr	r0, [r3, #4]
	pmutex[0] = 0;
 8000b32:	f8c4 b014 	str.w	fp, [r4, #20]
					fn = pt->fn;
 8000b36:	681b      	ldr	r3, [r3, #0]
					fn(param);
 8000b38:	4798      	blx	r3
					goto restartTimerChecks;
 8000b3a:	e7a6      	b.n	8000a8a <GTimerThreadHandler+0xb2>
				if ((pt->flags & GTIMER_FLG_JABBED) || (!(pt->flags & GTIMER_FLG_INFINITE) && TimeIsWithin(pt->when, lastTime, tm))) {
 8000b3c:	0797      	lsls	r7, r2, #30
 8000b3e:	d40b      	bmi.n	8000b58 <GTimerThreadHandler+0x180>
 8000b40:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8000b44:	45f1      	cmp	r9, lr
				if (!(pt->flags & GTIMER_FLG_INFINITE) && pt->when - tm < nxtTimeout)
 8000b46:	ebae 0008 	sub.w	r0, lr, r8
				if ((pt->flags & GTIMER_FLG_JABBED) || (!(pt->flags & GTIMER_FLG_INFINITE) && TimeIsWithin(pt->when, lastTime, tm))) {
 8000b4a:	d801      	bhi.n	8000b50 <GTimerThreadHandler+0x178>
 8000b4c:	45f0      	cmp	r8, lr
 8000b4e:	d2dd      	bcs.n	8000b0c <GTimerThreadHandler+0x134>
				if (!(pt->flags & GTIMER_FLG_INFINITE) && pt->when - tm < nxtTimeout)
 8000b50:	4286      	cmp	r6, r0
					nxtTimeout = (pt->when - tm)/ticks2ms;
 8000b52:	bf88      	it	hi
 8000b54:	fbb0 f6fc 	udivhi	r6, r0, ip
				pt = pt->next;
 8000b58:	695b      	ldr	r3, [r3, #20]
			} while(pt != pTimerHead);
 8000b5a:	4299      	cmp	r1, r3
 8000b5c:	d014      	beq.n	8000b88 <GTimerThreadHandler+0x1b0>
				if ((pt->flags & GTIMER_FLG_JABBED) || (!(pt->flags & GTIMER_FLG_INFINITE) && TimeIsWithin(pt->when, lastTime, tm))) {
 8000b5e:	8a1a      	ldrh	r2, [r3, #16]
 8000b60:	0750      	lsls	r0, r2, #29
 8000b62:	d5eb      	bpl.n	8000b3c <GTimerThreadHandler+0x164>
					if ((pt->flags & GTIMER_FLG_PERIODIC) && pt->period != TIME_IMMEDIATE) {
 8000b64:	07d0      	lsls	r0, r2, #31
 8000b66:	d4d3      	bmi.n	8000b10 <GTimerThreadHandler+0x138>
						if (pt->next == pt)
 8000b68:	695a      	ldr	r2, [r3, #20]
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	d01e      	beq.n	8000bac <GTimerThreadHandler+0x1d4>
							pt->next->prev = pt->prev;
 8000b6e:	6998      	ldr	r0, [r3, #24]
 8000b70:	6190      	str	r0, [r2, #24]
							pt->prev->next = pt->next;
 8000b72:	6998      	ldr	r0, [r3, #24]
							if (pTimerHead == pt)
 8000b74:	4299      	cmp	r1, r3
							pt->prev->next = pt->next;
 8000b76:	6142      	str	r2, [r0, #20]
								pTimerHead = pt->next;
 8000b78:	bf04      	itt	eq
 8000b7a:	695a      	ldreq	r2, [r3, #20]
 8000b7c:	61a2      	streq	r2, [r4, #24]
						pt->flags = 0;
 8000b7e:	f8a3 b010 	strh.w	fp, [r3, #16]
 8000b82:	e7d5      	b.n	8000b30 <GTimerThreadHandler+0x158>
		nxtTimeout = TIME_INFINITE;
 8000b84:	f04f 36ff 	mov.w	r6, #4294967295
 8000b88:	f8c4 b014 	str.w	fp, [r4, #20]
 8000b8c:	46c1      	mov	r9, r8
 8000b8e:	e72c      	b.n	80009ea <GTimerThreadHandler+0x12>
		delay = gfxMillisecondsToTicks(ms);
 8000b90:	4630      	mov	r0, r6
 8000b92:	f7ff fbab 	bl	80002ec <gfxMillisecondsToTicks>
		if (!delay) delay = 1;
 8000b96:	2800      	cmp	r0, #0
 8000b98:	bf14      	ite	ne
 8000b9a:	4682      	movne	sl, r0
 8000b9c:	f04f 0a01 	moveq.w	sl, #1
		starttm = gfxSystemTicks();
 8000ba0:	f7ff fb9e 	bl	80002e0 <gfxSystemTicks>
 8000ba4:	4606      	mov	r6, r0
 8000ba6:	e740      	b.n	8000a2a <GTimerThreadHandler+0x52>
		delay = TIME_IMMEDIATE;
 8000ba8:	46b2      	mov	sl, r6
 8000baa:	e73e      	b.n	8000a2a <GTimerThreadHandler+0x52>
							pTimerHead = 0;
 8000bac:	f8c4 b018 	str.w	fp, [r4, #24]
 8000bb0:	e7e5      	b.n	8000b7e <GTimerThreadHandler+0x1a6>
 8000bb2:	bf00      	nop
 8000bb4:	200000b8 	.word	0x200000b8
 8000bb8:	20000948 	.word	0x20000948

08000bbc <gdispGDrawBox.part.6>:

/*===========================================================================*/
/* High Level Driver Routines.                                               */
/*===========================================================================*/

void gdispGDrawBox(GDisplay *g, coord_t x, coord_t y, coord_t cx, coord_t cy, color_t color) {
 8000bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bc0:	b085      	sub	sp, #20
 8000bc2:	4692      	mov	sl, r2
 8000bc4:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8000bc8:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
 8000bcc:	9402      	str	r4, [sp, #8]
	if (cx <= 0 || cy <= 0) return;
	cx = x+cx-1; cy = y+cy-1;			// cx, cy are now the end point.
 8000bce:	fa1f fb8a 	uxth.w	fp, sl
 8000bd2:	1e5f      	subs	r7, r3, #1
 8000bd4:	445a      	add	r2, fp
 8000bd6:	b293      	uxth	r3, r2
 8000bd8:	440f      	add	r7, r1
 8000bda:	f103 39ff 	add.w	r9, r3, #4294967295
 8000bde:	9303      	str	r3, [sp, #12]
	if (!q->head)
 8000be0:	4cb6      	ldr	r4, [pc, #728]	; (8000ebc <gdispGDrawBox.part.6+0x300>)
	Qadd(&readyQ, me = _gfxCurrentThread);
 8000be2:	4eb7      	ldr	r6, [pc, #732]	; (8000ec0 <gdispGDrawBox.part.6+0x304>)
 8000be4:	b23b      	sxth	r3, r7
void gdispGDrawBox(GDisplay *g, coord_t x, coord_t y, coord_t cx, coord_t cy, color_t color) {
 8000be6:	4688      	mov	r8, r1
	cx = x+cx-1; cy = y+cy-1;			// cx, cy are now the end point.
 8000be8:	9301      	str	r3, [sp, #4]
void gdispGDrawBox(GDisplay *g, coord_t x, coord_t y, coord_t cx, coord_t cy, color_t color) {
 8000bea:	4605      	mov	r5, r0
	cx = x+cx-1; cy = y+cy-1;			// cx, cy are now the end point.
 8000bec:	fa0f f989 	sxth.w	r9, r9
	while (pmutex[0]) {
 8000bf0:	6a2b      	ldr	r3, [r5, #32]
 8000bf2:	b1d3      	cbz	r3, 8000c2a <gdispGDrawBox.part.6+0x6e>
	if (!q->head)
 8000bf4:	6820      	ldr	r0, [r4, #0]
 8000bf6:	b130      	cbz	r0, 8000c06 <gdispGDrawBox.part.6+0x4a>
	q->head = t->next;
 8000bf8:	6807      	ldr	r7, [r0, #0]
 8000bfa:	6027      	str	r7, [r4, #0]
 8000bfc:	f005 fe7c 	bl	80068f8 <free>
	if (!q->head)
 8000c00:	4638      	mov	r0, r7
 8000c02:	2f00      	cmp	r7, #0
 8000c04:	d1f8      	bne.n	8000bf8 <gdispGDrawBox.part.6+0x3c>
	if (!readyQ.head)
 8000c06:	68a3      	ldr	r3, [r4, #8]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d0f1      	beq.n	8000bf0 <gdispGDrawBox.part.6+0x34>
	Qadd(&readyQ, me = _gfxCurrentThread);
 8000c0c:	6830      	ldr	r0, [r6, #0]
		q->tail->next = t;
 8000c0e:	68e2      	ldr	r2, [r4, #12]
		q->tail = t;
 8000c10:	60e0      	str	r0, [r4, #12]
	t->next = 0;
 8000c12:	2100      	movs	r1, #0
 8000c14:	6001      	str	r1, [r0, #0]
		q->tail->next = t;
 8000c16:	6010      	str	r0, [r2, #0]
	q->head = t->next;
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	60a2      	str	r2, [r4, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8000c1c:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 8000c1e:	6033      	str	r3, [r6, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8000c20:	f7ff fd7c 	bl	800071c <_gfxTaskSwitch>
	while (pmutex[0]) {
 8000c24:	6a2b      	ldr	r3, [r5, #32]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d1e4      	bne.n	8000bf4 <gdispGDrawBox.part.6+0x38>

	MUTEX_ENTER(g);

	g->p.color = color;

	if (cx - x > 2) {
 8000c2a:	9901      	ldr	r1, [sp, #4]
	g->p.color = color;
 8000c2c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8000c30:	87ab      	strh	r3, [r5, #60]	; 0x3c
	if (cx - x > 2) {
 8000c32:	eba1 0308 	sub.w	r3, r1, r8
	pmutex[0] = 1;
 8000c36:	2201      	movs	r2, #1
 8000c38:	2b02      	cmp	r3, #2
 8000c3a:	622a      	str	r2, [r5, #32]
		g->p.x = x; g->p.y = y; g->p.x1 = cx; hline_clip(g);
 8000c3c:	f8a5 802c 	strh.w	r8, [r5, #44]	; 0x2c
 8000c40:	f8a5 a02e 	strh.w	sl, [r5, #46]	; 0x2e
	if (cx - x > 2) {
 8000c44:	f340 8099 	ble.w	8000d7a <gdispGDrawBox.part.6+0x1be>
	if (g->p.x1 < g->p.x) {
 8000c48:	4588      	cmp	r8, r1
		g->p.x = x; g->p.y = y; g->p.x1 = cx; hline_clip(g);
 8000c4a:	86a9      	strh	r1, [r5, #52]	; 0x34
	if (g->p.x1 < g->p.x) {
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	f300 80fb 	bgt.w	8000e48 <gdispGDrawBox.part.6+0x28c>
 8000c52:	460a      	mov	r2, r1
 8000c54:	4643      	mov	r3, r8
			if (g->p.y < g->clipy0 || g->p.y >= g->clipy1) return;
 8000c56:	f9b5 1026 	ldrsh.w	r1, [r5, #38]	; 0x26
 8000c5a:	4551      	cmp	r1, sl
 8000c5c:	dc13      	bgt.n	8000c86 <gdispGDrawBox.part.6+0xca>
 8000c5e:	f9b5 102a 	ldrsh.w	r1, [r5, #42]	; 0x2a
 8000c62:	4551      	cmp	r1, sl
 8000c64:	dd0f      	ble.n	8000c86 <gdispGDrawBox.part.6+0xca>
			if (g->p.x < g->clipx0) g->p.x = g->clipx0;
 8000c66:	f9b5 1024 	ldrsh.w	r1, [r5, #36]	; 0x24
 8000c6a:	4299      	cmp	r1, r3
 8000c6c:	bfc4      	itt	gt
 8000c6e:	85a9      	strhgt	r1, [r5, #44]	; 0x2c
 8000c70:	460b      	movgt	r3, r1
			if (g->p.x1 >= g->clipx1) g->p.x1 = g->clipx1 - 1;
 8000c72:	f9b5 1028 	ldrsh.w	r1, [r5, #40]	; 0x28
 8000c76:	4291      	cmp	r1, r2
 8000c78:	dc02      	bgt.n	8000c80 <gdispGDrawBox.part.6+0xc4>
 8000c7a:	1e4a      	subs	r2, r1, #1
 8000c7c:	b212      	sxth	r2, r2
 8000c7e:	86aa      	strh	r2, [r5, #52]	; 0x34
			if (g->p.x1 < g->p.x) return;
 8000c80:	4293      	cmp	r3, r2
 8000c82:	f340 8105 	ble.w	8000e90 <gdispGDrawBox.part.6+0x2d4>
		if (y != cy) {
 8000c86:	45ca      	cmp	sl, r9
 8000c88:	d072      	beq.n	8000d70 <gdispGDrawBox.part.6+0x1b4>
			g->p.x = x; g->p.y = cy; g->p.x1 = cx; hline_clip(g);
 8000c8a:	9a01      	ldr	r2, [sp, #4]
 8000c8c:	f8a5 802c 	strh.w	r8, [r5, #44]	; 0x2c
	if (g->p.x1 < g->p.x) {
 8000c90:	4590      	cmp	r8, r2
			g->p.x = x; g->p.y = cy; g->p.x1 = cx; hline_clip(g);
 8000c92:	f8a5 902e 	strh.w	r9, [r5, #46]	; 0x2e
 8000c96:	86aa      	strh	r2, [r5, #52]	; 0x34
	if (g->p.x1 < g->p.x) {
 8000c98:	4613      	mov	r3, r2
 8000c9a:	f300 80dc 	bgt.w	8000e56 <gdispGDrawBox.part.6+0x29a>
 8000c9e:	4643      	mov	r3, r8
			if (g->p.y < g->clipy0 || g->p.y >= g->clipy1) return;
 8000ca0:	f9b5 1026 	ldrsh.w	r1, [r5, #38]	; 0x26
 8000ca4:	4549      	cmp	r1, r9
 8000ca6:	dc13      	bgt.n	8000cd0 <gdispGDrawBox.part.6+0x114>
 8000ca8:	f9b5 102a 	ldrsh.w	r1, [r5, #42]	; 0x2a
 8000cac:	4549      	cmp	r1, r9
 8000cae:	dd0f      	ble.n	8000cd0 <gdispGDrawBox.part.6+0x114>
			if (g->p.x < g->clipx0) g->p.x = g->clipx0;
 8000cb0:	f9b5 1024 	ldrsh.w	r1, [r5, #36]	; 0x24
 8000cb4:	4299      	cmp	r1, r3
 8000cb6:	bfc4      	itt	gt
 8000cb8:	85a9      	strhgt	r1, [r5, #44]	; 0x2c
 8000cba:	460b      	movgt	r3, r1
			if (g->p.x1 >= g->clipx1) g->p.x1 = g->clipx1 - 1;
 8000cbc:	f9b5 1028 	ldrsh.w	r1, [r5, #40]	; 0x28
 8000cc0:	4291      	cmp	r1, r2
 8000cc2:	dc02      	bgt.n	8000cca <gdispGDrawBox.part.6+0x10e>
 8000cc4:	1e4a      	subs	r2, r1, #1
 8000cc6:	b212      	sxth	r2, r2
 8000cc8:	86aa      	strh	r2, [r5, #52]	; 0x34
			if (g->p.x1 < g->p.x) return;
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	f280 8120 	bge.w	8000f10 <gdispGDrawBox.part.6+0x354>
			if (cy - y > 2) {
 8000cd0:	eba9 090a 	sub.w	r9, r9, sl
 8000cd4:	f1b9 0f02 	cmp.w	r9, #2
 8000cd8:	dd4a      	ble.n	8000d70 <gdispGDrawBox.part.6+0x1b4>
				y++; cy--;
 8000cda:	9b03      	ldr	r3, [sp, #12]
				g->p.x = x; g->p.y = y; g->p.y1 = cy; vline_clip(g);
 8000cdc:	f8a5 802c 	strh.w	r8, [r5, #44]	; 0x2c
				y++; cy--;
 8000ce0:	f10b 0401 	add.w	r4, fp, #1
 8000ce4:	1e9e      	subs	r6, r3, #2
 8000ce6:	b224      	sxth	r4, r4
 8000ce8:	b236      	sxth	r6, r6
	if (g->p.y1 < g->p.y) {
 8000cea:	42b4      	cmp	r4, r6
				g->p.x = x; g->p.y = y; g->p.y1 = cy; vline_clip(g);
 8000cec:	85ec      	strh	r4, [r5, #46]	; 0x2e
 8000cee:	86ee      	strh	r6, [r5, #54]	; 0x36
 8000cf0:	4622      	mov	r2, r4
 8000cf2:	4630      	mov	r0, r6
			if (g->p.x < g->clipx0 || g->p.x >= g->clipx1) return;
 8000cf4:	f9b5 1024 	ldrsh.w	r1, [r5, #36]	; 0x24
	if (g->p.y1 < g->p.y) {
 8000cf8:	f340 80e4 	ble.w	8000ec4 <gdispGDrawBox.part.6+0x308>
			if (g->p.x < g->clipx0 || g->p.x >= g->clipx1) return;
 8000cfc:	4588      	cmp	r8, r1
		g->p.cy = g->p.y; g->p.y = g->p.y1; g->p.y1 = g->p.cy;
 8000cfe:	866c      	strh	r4, [r5, #50]	; 0x32
 8000d00:	85ee      	strh	r6, [r5, #46]	; 0x2e
 8000d02:	86ec      	strh	r4, [r5, #54]	; 0x36
			if (g->p.x < g->clipx0 || g->p.x >= g->clipx1) return;
 8000d04:	f280 8136 	bge.w	8000f74 <gdispGDrawBox.part.6+0x3b8>
				g->p.x = cx; g->p.y = y; g->p.y1 = cy; vline_clip(g);
 8000d08:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8000d0c:	85ab      	strh	r3, [r5, #44]	; 0x2c
		g->p.cy = g->p.y; g->p.y = g->p.y1; g->p.y1 = g->p.cy;
 8000d0e:	4623      	mov	r3, r4
 8000d10:	866c      	strh	r4, [r5, #50]	; 0x32
 8000d12:	86ec      	strh	r4, [r5, #54]	; 0x36
 8000d14:	85ee      	strh	r6, [r5, #46]	; 0x2e
				y++; cy--;
 8000d16:	4634      	mov	r4, r6
 8000d18:	461e      	mov	r6, r3
			if (g->p.x < g->clipx0 || g->p.x >= g->clipx1) return;
 8000d1a:	9a01      	ldr	r2, [sp, #4]
 8000d1c:	428a      	cmp	r2, r1
 8000d1e:	db27      	blt.n	8000d70 <gdispGDrawBox.part.6+0x1b4>
 8000d20:	f9b5 3028 	ldrsh.w	r3, [r5, #40]	; 0x28
 8000d24:	4293      	cmp	r3, r2
 8000d26:	dd23      	ble.n	8000d70 <gdispGDrawBox.part.6+0x1b4>
			if (g->p.y < g->clipy0) g->p.y = g->clipy0;
 8000d28:	f9b5 3026 	ldrsh.w	r3, [r5, #38]	; 0x26
 8000d2c:	42a3      	cmp	r3, r4
 8000d2e:	bfc4      	itt	gt
 8000d30:	85eb      	strhgt	r3, [r5, #46]	; 0x2e
 8000d32:	461c      	movgt	r4, r3
			if (g->p.y1 >= g->clipy1) g->p.y1 = g->clipy1 - 1;
 8000d34:	f9b5 302a 	ldrsh.w	r3, [r5, #42]	; 0x2a
 8000d38:	429e      	cmp	r6, r3
 8000d3a:	db02      	blt.n	8000d42 <gdispGDrawBox.part.6+0x186>
 8000d3c:	3b01      	subs	r3, #1
 8000d3e:	b21e      	sxth	r6, r3
 8000d40:	86ee      	strh	r6, [r5, #54]	; 0x36
			if (g->p.y1 < g->p.y) return;
 8000d42:	42a6      	cmp	r6, r4
 8000d44:	db14      	blt.n	8000d70 <gdispGDrawBox.part.6+0x1b4>
			g->p.cy = g->p.y1 - g->p.y + 1;
 8000d46:	f1c4 0401 	rsb	r4, r4, #1
 8000d4a:	4426      	add	r6, r4
			g->p.cx = 1;
 8000d4c:	2301      	movs	r3, #1
			g->p.cy = g->p.y1 - g->p.y + 1;
 8000d4e:	866e      	strh	r6, [r5, #50]	; 0x32
			g->p.cx = 1;
 8000d50:	862b      	strh	r3, [r5, #48]	; 0x30
			gdisp_lld_write_start(g);
 8000d52:	4628      	mov	r0, r5
 8000d54:	f7ff fca2 	bl	800069c <gdisp_lld_write_start>
			do { gdisp_lld_write_color(g); } while(--g->p.cy);
 8000d58:	4628      	mov	r0, r5
 8000d5a:	f7ff fb3b 	bl	80003d4 <gdisp_lld_write_color>
 8000d5e:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 8000d60:	3b01      	subs	r3, #1
 8000d62:	b21b      	sxth	r3, r3
 8000d64:	866b      	strh	r3, [r5, #50]	; 0x32
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d1f6      	bne.n	8000d58 <gdispGDrawBox.part.6+0x19c>
			gdisp_lld_write_stop(g);
 8000d6a:	4628      	mov	r0, r5
 8000d6c:	f7ff fc94 	bl	8000698 <gdisp_lld_write_stop>
	pmutex[0] = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	622b      	str	r3, [r5, #32]
		}
	}

	autoflush(g);
	MUTEX_EXIT(g);
}
 8000d74:	b005      	add	sp, #20
 8000d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (g->p.y1 < g->p.y) {
 8000d7a:	45ca      	cmp	sl, r9
		g->p.x = x; g->p.y = y; g->p.y1 = cy; vline_clip(g);
 8000d7c:	f8a5 9036 	strh.w	r9, [r5, #54]	; 0x36
	if (g->p.y1 < g->p.y) {
 8000d80:	dc59      	bgt.n	8000e36 <gdispGDrawBox.part.6+0x27a>
 8000d82:	464a      	mov	r2, r9
 8000d84:	4653      	mov	r3, sl
			if (g->p.x < g->clipx0 || g->p.x >= g->clipx1) return;
 8000d86:	f9b5 1024 	ldrsh.w	r1, [r5, #36]	; 0x24
 8000d8a:	4541      	cmp	r1, r8
 8000d8c:	dc12      	bgt.n	8000db4 <gdispGDrawBox.part.6+0x1f8>
 8000d8e:	f9b5 1028 	ldrsh.w	r1, [r5, #40]	; 0x28
 8000d92:	4541      	cmp	r1, r8
 8000d94:	dd0e      	ble.n	8000db4 <gdispGDrawBox.part.6+0x1f8>
			if (g->p.y < g->clipy0) g->p.y = g->clipy0;
 8000d96:	f9b5 1026 	ldrsh.w	r1, [r5, #38]	; 0x26
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	bfc4      	itt	gt
 8000d9e:	85e9      	strhgt	r1, [r5, #46]	; 0x2e
 8000da0:	460b      	movgt	r3, r1
			if (g->p.y1 >= g->clipy1) g->p.y1 = g->clipy1 - 1;
 8000da2:	f9b5 102a 	ldrsh.w	r1, [r5, #42]	; 0x2a
 8000da6:	4291      	cmp	r1, r2
 8000da8:	dc02      	bgt.n	8000db0 <gdispGDrawBox.part.6+0x1f4>
 8000daa:	1e4a      	subs	r2, r1, #1
 8000dac:	b212      	sxth	r2, r2
 8000dae:	86ea      	strh	r2, [r5, #54]	; 0x36
			if (g->p.y1 < g->p.y) return;
 8000db0:	4293      	cmp	r3, r2
 8000db2:	dd57      	ble.n	8000e64 <gdispGDrawBox.part.6+0x2a8>
		if (x != cx) {
 8000db4:	9a01      	ldr	r2, [sp, #4]
 8000db6:	4590      	cmp	r8, r2
 8000db8:	d0da      	beq.n	8000d70 <gdispGDrawBox.part.6+0x1b4>
	if (g->p.y1 < g->p.y) {
 8000dba:	45ca      	cmp	sl, r9
			g->p.x = cx; g->p.y = y; g->p.y1 = cy; vline_clip(g);
 8000dbc:	85aa      	strh	r2, [r5, #44]	; 0x2c
 8000dbe:	f8a5 a02e 	strh.w	sl, [r5, #46]	; 0x2e
 8000dc2:	f8a5 9036 	strh.w	r9, [r5, #54]	; 0x36
	if (g->p.y1 < g->p.y) {
 8000dc6:	dd08      	ble.n	8000dda <gdispGDrawBox.part.6+0x21e>
		g->p.cy = g->p.y; g->p.y = g->p.y1; g->p.y1 = g->p.cy;
 8000dc8:	4653      	mov	r3, sl
 8000dca:	f8a5 a032 	strh.w	sl, [r5, #50]	; 0x32
 8000dce:	f8a5 a036 	strh.w	sl, [r5, #54]	; 0x36
 8000dd2:	f8a5 902e 	strh.w	r9, [r5, #46]	; 0x2e
 8000dd6:	46ca      	mov	sl, r9
 8000dd8:	4699      	mov	r9, r3
			if (g->p.x < g->clipx0 || g->p.x >= g->clipx1) return;
 8000dda:	f9b5 3024 	ldrsh.w	r3, [r5, #36]	; 0x24
 8000dde:	9901      	ldr	r1, [sp, #4]
 8000de0:	428b      	cmp	r3, r1
 8000de2:	dcc5      	bgt.n	8000d70 <gdispGDrawBox.part.6+0x1b4>
 8000de4:	f9b5 3028 	ldrsh.w	r3, [r5, #40]	; 0x28
 8000de8:	428b      	cmp	r3, r1
 8000dea:	ddc1      	ble.n	8000d70 <gdispGDrawBox.part.6+0x1b4>
			if (g->p.y < g->clipy0) g->p.y = g->clipy0;
 8000dec:	f9b5 3026 	ldrsh.w	r3, [r5, #38]	; 0x26
 8000df0:	4553      	cmp	r3, sl
 8000df2:	bfc4      	itt	gt
 8000df4:	85eb      	strhgt	r3, [r5, #46]	; 0x2e
 8000df6:	469a      	movgt	sl, r3
			if (g->p.y1 >= g->clipy1) g->p.y1 = g->clipy1 - 1;
 8000df8:	f9b5 302a 	ldrsh.w	r3, [r5, #42]	; 0x2a
 8000dfc:	454b      	cmp	r3, r9
 8000dfe:	dc04      	bgt.n	8000e0a <gdispGDrawBox.part.6+0x24e>
 8000e00:	3b01      	subs	r3, #1
 8000e02:	fa0f f983 	sxth.w	r9, r3
 8000e06:	f8a5 9036 	strh.w	r9, [r5, #54]	; 0x36
			if (g->p.y1 < g->p.y) return;
 8000e0a:	45d1      	cmp	r9, sl
 8000e0c:	dbb0      	blt.n	8000d70 <gdispGDrawBox.part.6+0x1b4>
			g->p.cy = g->p.y1 - g->p.y + 1;
 8000e0e:	f1ca 0a01 	rsb	sl, sl, #1
 8000e12:	44d1      	add	r9, sl
			g->p.cx = 1;
 8000e14:	2301      	movs	r3, #1
			g->p.cy = g->p.y1 - g->p.y + 1;
 8000e16:	f8a5 9032 	strh.w	r9, [r5, #50]	; 0x32
			g->p.cx = 1;
 8000e1a:	862b      	strh	r3, [r5, #48]	; 0x30
			gdisp_lld_write_start(g);
 8000e1c:	4628      	mov	r0, r5
 8000e1e:	f7ff fc3d 	bl	800069c <gdisp_lld_write_start>
			do { gdisp_lld_write_color(g); } while(--g->p.cy);
 8000e22:	4628      	mov	r0, r5
 8000e24:	f7ff fad6 	bl	80003d4 <gdisp_lld_write_color>
 8000e28:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	b21b      	sxth	r3, r3
 8000e2e:	866b      	strh	r3, [r5, #50]	; 0x32
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d1f6      	bne.n	8000e22 <gdispGDrawBox.part.6+0x266>
 8000e34:	e799      	b.n	8000d6a <gdispGDrawBox.part.6+0x1ae>
		g->p.cy = g->p.y; g->p.y = g->p.y1; g->p.y1 = g->p.cy;
 8000e36:	f8a5 a032 	strh.w	sl, [r5, #50]	; 0x32
 8000e3a:	f8a5 902e 	strh.w	r9, [r5, #46]	; 0x2e
 8000e3e:	f8a5 a036 	strh.w	sl, [r5, #54]	; 0x36
 8000e42:	4652      	mov	r2, sl
 8000e44:	464b      	mov	r3, r9
 8000e46:	e79e      	b.n	8000d86 <gdispGDrawBox.part.6+0x1ca>
		g->p.cx = g->p.x; g->p.x = g->p.x1; g->p.x1 = g->p.cx;
 8000e48:	f8a5 8030 	strh.w	r8, [r5, #48]	; 0x30
 8000e4c:	85a9      	strh	r1, [r5, #44]	; 0x2c
 8000e4e:	f8a5 8034 	strh.w	r8, [r5, #52]	; 0x34
 8000e52:	4642      	mov	r2, r8
 8000e54:	e6ff      	b.n	8000c56 <gdispGDrawBox.part.6+0x9a>
 8000e56:	85aa      	strh	r2, [r5, #44]	; 0x2c
 8000e58:	f8a5 8030 	strh.w	r8, [r5, #48]	; 0x30
 8000e5c:	f8a5 8034 	strh.w	r8, [r5, #52]	; 0x34
 8000e60:	4642      	mov	r2, r8
 8000e62:	e71d      	b.n	8000ca0 <gdispGDrawBox.part.6+0xe4>
			g->p.cy = g->p.y1 - g->p.y + 1;
 8000e64:	f1c3 0301 	rsb	r3, r3, #1
 8000e68:	4413      	add	r3, r2
			g->p.cx = 1;
 8000e6a:	2201      	movs	r2, #1
			g->p.cy = g->p.y1 - g->p.y + 1;
 8000e6c:	866b      	strh	r3, [r5, #50]	; 0x32
			g->p.cx = 1;
 8000e6e:	862a      	strh	r2, [r5, #48]	; 0x30
			gdisp_lld_write_start(g);
 8000e70:	4628      	mov	r0, r5
 8000e72:	f7ff fc13 	bl	800069c <gdisp_lld_write_start>
			do { gdisp_lld_write_color(g); } while(--g->p.cy);
 8000e76:	4628      	mov	r0, r5
 8000e78:	f7ff faac 	bl	80003d4 <gdisp_lld_write_color>
 8000e7c:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	b21b      	sxth	r3, r3
 8000e82:	866b      	strh	r3, [r5, #50]	; 0x32
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d1f6      	bne.n	8000e76 <gdispGDrawBox.part.6+0x2ba>
			gdisp_lld_write_stop(g);
 8000e88:	4628      	mov	r0, r5
 8000e8a:	f7ff fc05 	bl	8000698 <gdisp_lld_write_stop>
 8000e8e:	e791      	b.n	8000db4 <gdispGDrawBox.part.6+0x1f8>
			g->p.cx = g->p.x1 - g->p.x + 1;
 8000e90:	f1c3 0301 	rsb	r3, r3, #1
 8000e94:	4413      	add	r3, r2
			g->p.cy = 1;
 8000e96:	2201      	movs	r2, #1
			g->p.cx = g->p.x1 - g->p.x + 1;
 8000e98:	862b      	strh	r3, [r5, #48]	; 0x30
			g->p.cy = 1;
 8000e9a:	866a      	strh	r2, [r5, #50]	; 0x32
			gdisp_lld_write_start(g);
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	f7ff fbfd 	bl	800069c <gdisp_lld_write_start>
			do { gdisp_lld_write_color(g); } while(--g->p.cx);
 8000ea2:	4628      	mov	r0, r5
 8000ea4:	f7ff fa96 	bl	80003d4 <gdisp_lld_write_color>
 8000ea8:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	b21b      	sxth	r3, r3
 8000eae:	862b      	strh	r3, [r5, #48]	; 0x30
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d1f6      	bne.n	8000ea2 <gdispGDrawBox.part.6+0x2e6>
			gdisp_lld_write_stop(g);
 8000eb4:	4628      	mov	r0, r5
 8000eb6:	f7ff fbef 	bl	8000698 <gdisp_lld_write_stop>
 8000eba:	e6e4      	b.n	8000c86 <gdispGDrawBox.part.6+0xca>
 8000ebc:	200000b8 	.word	0x200000b8
 8000ec0:	20000948 	.word	0x20000948
			if (g->p.x < g->clipx0 || g->p.x >= g->clipx1) return;
 8000ec4:	4588      	cmp	r8, r1
 8000ec6:	db51      	blt.n	8000f6c <gdispGDrawBox.part.6+0x3b0>
 8000ec8:	f9b5 3028 	ldrsh.w	r3, [r5, #40]	; 0x28
 8000ecc:	4543      	cmp	r3, r8
 8000ece:	dd19      	ble.n	8000f04 <gdispGDrawBox.part.6+0x348>
 8000ed0:	4623      	mov	r3, r4
 8000ed2:	4632      	mov	r2, r6
			if (g->p.y < g->clipy0) g->p.y = g->clipy0;
 8000ed4:	f9b5 0026 	ldrsh.w	r0, [r5, #38]	; 0x26
 8000ed8:	4298      	cmp	r0, r3
 8000eda:	bfc4      	itt	gt
 8000edc:	85e8      	strhgt	r0, [r5, #46]	; 0x2e
 8000ede:	4603      	movgt	r3, r0
			if (g->p.y1 >= g->clipy1) g->p.y1 = g->clipy1 - 1;
 8000ee0:	f9b5 002a 	ldrsh.w	r0, [r5, #42]	; 0x2a
 8000ee4:	4282      	cmp	r2, r0
 8000ee6:	db02      	blt.n	8000eee <gdispGDrawBox.part.6+0x332>
 8000ee8:	1e42      	subs	r2, r0, #1
 8000eea:	b212      	sxth	r2, r2
 8000eec:	86ea      	strh	r2, [r5, #54]	; 0x36
			if (g->p.y1 < g->p.y) return;
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	da24      	bge.n	8000f3c <gdispGDrawBox.part.6+0x380>
				g->p.x = cx; g->p.y = y; g->p.y1 = cy; vline_clip(g);
 8000ef2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8000ef6:	85ab      	strh	r3, [r5, #44]	; 0x2c
	if (g->p.y1 < g->p.y) {
 8000ef8:	42b4      	cmp	r4, r6
				g->p.x = cx; g->p.y = y; g->p.y1 = cy; vline_clip(g);
 8000efa:	85ec      	strh	r4, [r5, #46]	; 0x2e
 8000efc:	86ee      	strh	r6, [r5, #54]	; 0x36
	if (g->p.y1 < g->p.y) {
 8000efe:	f77f af0c 	ble.w	8000d1a <gdispGDrawBox.part.6+0x15e>
 8000f02:	e704      	b.n	8000d0e <gdispGDrawBox.part.6+0x152>
				g->p.x = cx; g->p.y = y; g->p.y1 = cy; vline_clip(g);
 8000f04:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8000f08:	85ab      	strh	r3, [r5, #44]	; 0x2c
 8000f0a:	85ea      	strh	r2, [r5, #46]	; 0x2e
 8000f0c:	86e8      	strh	r0, [r5, #54]	; 0x36
 8000f0e:	e704      	b.n	8000d1a <gdispGDrawBox.part.6+0x15e>
			g->p.cx = g->p.x1 - g->p.x + 1;
 8000f10:	f1c3 0301 	rsb	r3, r3, #1
 8000f14:	4413      	add	r3, r2
			g->p.cy = 1;
 8000f16:	2201      	movs	r2, #1
			g->p.cx = g->p.x1 - g->p.x + 1;
 8000f18:	862b      	strh	r3, [r5, #48]	; 0x30
			g->p.cy = 1;
 8000f1a:	866a      	strh	r2, [r5, #50]	; 0x32
			gdisp_lld_write_start(g);
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	f7ff fbbd 	bl	800069c <gdisp_lld_write_start>
			do { gdisp_lld_write_color(g); } while(--g->p.cx);
 8000f22:	4628      	mov	r0, r5
 8000f24:	f7ff fa56 	bl	80003d4 <gdisp_lld_write_color>
 8000f28:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	b21b      	sxth	r3, r3
 8000f2e:	862b      	strh	r3, [r5, #48]	; 0x30
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d1f6      	bne.n	8000f22 <gdispGDrawBox.part.6+0x366>
			gdisp_lld_write_stop(g);
 8000f34:	4628      	mov	r0, r5
 8000f36:	f7ff fbaf 	bl	8000698 <gdisp_lld_write_stop>
 8000f3a:	e6c9      	b.n	8000cd0 <gdispGDrawBox.part.6+0x114>
			g->p.cy = g->p.y1 - g->p.y + 1;
 8000f3c:	f1c3 0301 	rsb	r3, r3, #1
 8000f40:	4413      	add	r3, r2
			g->p.cx = 1;
 8000f42:	2201      	movs	r2, #1
			g->p.cy = g->p.y1 - g->p.y + 1;
 8000f44:	866b      	strh	r3, [r5, #50]	; 0x32
			g->p.cx = 1;
 8000f46:	862a      	strh	r2, [r5, #48]	; 0x30
			gdisp_lld_write_start(g);
 8000f48:	4628      	mov	r0, r5
 8000f4a:	f7ff fba7 	bl	800069c <gdisp_lld_write_start>
			do { gdisp_lld_write_color(g); } while(--g->p.cy);
 8000f4e:	4628      	mov	r0, r5
 8000f50:	f7ff fa40 	bl	80003d4 <gdisp_lld_write_color>
 8000f54:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 8000f56:	3b01      	subs	r3, #1
 8000f58:	b21b      	sxth	r3, r3
 8000f5a:	866b      	strh	r3, [r5, #50]	; 0x32
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d1f6      	bne.n	8000f4e <gdispGDrawBox.part.6+0x392>
			gdisp_lld_write_stop(g);
 8000f60:	4628      	mov	r0, r5
 8000f62:	f7ff fb99 	bl	8000698 <gdisp_lld_write_stop>
 8000f66:	f9b5 1024 	ldrsh.w	r1, [r5, #36]	; 0x24
 8000f6a:	e7c2      	b.n	8000ef2 <gdispGDrawBox.part.6+0x336>
				g->p.x = cx; g->p.y = y; g->p.y1 = cy; vline_clip(g);
 8000f6c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8000f70:	85ab      	strh	r3, [r5, #44]	; 0x2c
 8000f72:	e6d2      	b.n	8000d1a <gdispGDrawBox.part.6+0x15e>
			if (g->p.x < g->clipx0 || g->p.x >= g->clipx1) return;
 8000f74:	f9b5 3028 	ldrsh.w	r3, [r5, #40]	; 0x28
 8000f78:	4543      	cmp	r3, r8
 8000f7a:	f77f aec5 	ble.w	8000d08 <gdispGDrawBox.part.6+0x14c>
 8000f7e:	4633      	mov	r3, r6
 8000f80:	4622      	mov	r2, r4
 8000f82:	e7a7      	b.n	8000ed4 <gdispGDrawBox.part.6+0x318>

08000f84 <WM_Delete>:
static void WM_Delete(GHandle gh) {
 8000f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f88:	4d24      	ldr	r5, [pc, #144]	; (800101c <WM_Delete+0x98>)
	Qadd(&readyQ, me = _gfxCurrentThread);
 8000f8a:	4f25      	ldr	r7, [pc, #148]	; (8001020 <WM_Delete+0x9c>)
 8000f8c:	4606      	mov	r6, r0
	t->next = 0;
 8000f8e:	f04f 0800 	mov.w	r8, #0
	while (psem->cnt <= 0) {
 8000f92:	f9b5 1020 	ldrsh.w	r1, [r5, #32]
 8000f96:	2900      	cmp	r1, #0
 8000f98:	dc19      	bgt.n	8000fce <WM_Delete+0x4a>
	if (!q->head)
 8000f9a:	6828      	ldr	r0, [r5, #0]
 8000f9c:	b130      	cbz	r0, 8000fac <WM_Delete+0x28>
	q->head = t->next;
 8000f9e:	6804      	ldr	r4, [r0, #0]
 8000fa0:	602c      	str	r4, [r5, #0]
 8000fa2:	f005 fca9 	bl	80068f8 <free>
	if (!q->head)
 8000fa6:	4620      	mov	r0, r4
 8000fa8:	2c00      	cmp	r4, #0
 8000faa:	d1f8      	bne.n	8000f9e <WM_Delete+0x1a>
	if (!readyQ.head)
 8000fac:	68ab      	ldr	r3, [r5, #8]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d0ef      	beq.n	8000f92 <WM_Delete+0xe>
	Qadd(&readyQ, me = _gfxCurrentThread);
 8000fb2:	6839      	ldr	r1, [r7, #0]
		q->tail->next = t;
 8000fb4:	68ea      	ldr	r2, [r5, #12]
	t->next = 0;
 8000fb6:	f8c1 8000 	str.w	r8, [r1]
		q->tail->next = t;
 8000fba:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 8000fbc:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 8000fbe:	60e9      	str	r1, [r5, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8000fc0:	4608      	mov	r0, r1
	q->head = t->next;
 8000fc2:	60aa      	str	r2, [r5, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8000fc4:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 8000fc6:	603b      	str	r3, [r7, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8000fc8:	f7ff fba8 	bl	800071c <_gfxTaskSwitch>
 8000fcc:	e7e1      	b.n	8000f92 <WM_Delete+0xe>
	psem->cnt--;
 8000fce:	1e48      	subs	r0, r1, #1
 8000fd0:	b200      	sxth	r0, r0
 8000fd2:	8428      	strh	r0, [r5, #32]
		gfxSystemUnlock();
	}
	void gfxQueueASyncRemoveI(gfxQueueASync *pqueue, gfxQueueASyncItem *pitem) {
		gfxQueueASyncItem *pi;

		if (!pitem) return;				// Safety
 8000fd4:	b156      	cbz	r6, 8000fec <WM_Delete+0x68>
		if (pqueue->head) {
 8000fd6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000fd8:	b142      	cbz	r2, 8000fec <WM_Delete+0x68>
			if (pqueue->head == pitem) {
 8000fda:	4296      	cmp	r6, r2
 8000fdc:	d103      	bne.n	8000fe6 <WM_Delete+0x62>
 8000fde:	e018      	b.n	8001012 <WM_Delete+0x8e>
				pqueue->head = pitem->next;
				pitem->next = 0;
			} else {
				for(pi = pqueue->head; pi->next; pi = pi->next) {
					if (pi->next == pitem) {
 8000fe0:	429e      	cmp	r6, r3
 8000fe2:	d00c      	beq.n	8000ffe <WM_Delete+0x7a>
 8000fe4:	461a      	mov	r2, r3
				for(pi = pqueue->head; pi->next; pi = pi->next) {
 8000fe6:	6813      	ldr	r3, [r2, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d1f9      	bne.n	8000fe0 <WM_Delete+0x5c>
	if (psem->cnt < psem->limit)
 8000fec:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
 8000ff0:	4283      	cmp	r3, r0
 8000ff2:	dd02      	ble.n	8000ffa <WM_Delete+0x76>
		psem->cnt++;
 8000ff4:	8429      	strh	r1, [r5, #32]
}
 8000ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pi->next = pitem->next;
						if (pqueue->tail == pitem)
 8000ffe:	6aab      	ldr	r3, [r5, #40]	; 0x28
						pi->next = pitem->next;
 8001000:	6834      	ldr	r4, [r6, #0]
 8001002:	6014      	str	r4, [r2, #0]
						if (pqueue->tail == pitem)
 8001004:	429e      	cmp	r6, r3
							pqueue->tail = pi;
						pitem->next = 0;
 8001006:	f04f 0300 	mov.w	r3, #0
							pqueue->tail = pi;
 800100a:	bf08      	it	eq
 800100c:	62aa      	streq	r2, [r5, #40]	; 0x28
						pitem->next = 0;
 800100e:	6033      	str	r3, [r6, #0]
 8001010:	e7ec      	b.n	8000fec <WM_Delete+0x68>
				pqueue->head = pitem->next;
 8001012:	6833      	ldr	r3, [r6, #0]
 8001014:	626b      	str	r3, [r5, #36]	; 0x24
				pitem->next = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	6033      	str	r3, [r6, #0]
 800101a:	e7e7      	b.n	8000fec <WM_Delete+0x68>
 800101c:	200000b8 	.word	0x200000b8
 8001020:	20000948 	.word	0x20000948

08001024 <WM_Raise>:
	(void)gh; (void) minmax;
	// We don't support minimising, maximising or restoring
}

static void WM_Raise(GHandle gh) {
 8001024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001028:	4d4d      	ldr	r5, [pc, #308]	; (8001160 <WM_Raise+0x13c>)
	Qadd(&readyQ, me = _gfxCurrentThread);
 800102a:	4e4e      	ldr	r6, [pc, #312]	; (8001164 <WM_Raise+0x140>)
 800102c:	4680      	mov	r8, r0
	t->next = 0;
 800102e:	2700      	movs	r7, #0
	while (psem->cnt <= 0) {
 8001030:	f9b5 1020 	ldrsh.w	r1, [r5, #32]
 8001034:	2900      	cmp	r1, #0
 8001036:	dc18      	bgt.n	800106a <WM_Raise+0x46>
	if (!q->head)
 8001038:	6828      	ldr	r0, [r5, #0]
 800103a:	b130      	cbz	r0, 800104a <WM_Raise+0x26>
	q->head = t->next;
 800103c:	6804      	ldr	r4, [r0, #0]
 800103e:	602c      	str	r4, [r5, #0]
 8001040:	f005 fc5a 	bl	80068f8 <free>
	if (!q->head)
 8001044:	4620      	mov	r0, r4
 8001046:	2c00      	cmp	r4, #0
 8001048:	d1f8      	bne.n	800103c <WM_Raise+0x18>
	if (!readyQ.head)
 800104a:	68ab      	ldr	r3, [r5, #8]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d0ef      	beq.n	8001030 <WM_Raise+0xc>
	Qadd(&readyQ, me = _gfxCurrentThread);
 8001050:	6831      	ldr	r1, [r6, #0]
		q->tail->next = t;
 8001052:	68ea      	ldr	r2, [r5, #12]
	t->next = 0;
 8001054:	600f      	str	r7, [r1, #0]
		q->tail->next = t;
 8001056:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 8001058:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 800105a:	60e9      	str	r1, [r5, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 800105c:	4608      	mov	r0, r1
	q->head = t->next;
 800105e:	60aa      	str	r2, [r5, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8001060:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 8001062:	6033      	str	r3, [r6, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8001064:	f7ff fb5a 	bl	800071c <_gfxTaskSwitch>
 8001068:	e7e2      	b.n	8001030 <WM_Raise+0xc>
	psem->cnt--;
 800106a:	1e48      	subs	r0, r1, #1
 800106c:	b200      	sxth	r0, r0
 800106e:	8428      	strh	r0, [r5, #32]
		if (!pitem) return;				// Safety
 8001070:	f1b8 0f00 	cmp.w	r8, #0
 8001074:	d013      	beq.n	800109e <WM_Raise+0x7a>
		if (pqueue->head) {
 8001076:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8001078:	2a00      	cmp	r2, #0
 800107a:	d061      	beq.n	8001140 <WM_Raise+0x11c>
			if (pqueue->head == pitem) {
 800107c:	4590      	cmp	r8, r2
 800107e:	d103      	bne.n	8001088 <WM_Raise+0x64>
 8001080:	e065      	b.n	800114e <WM_Raise+0x12a>
					if (pi->next == pitem) {
 8001082:	4598      	cmp	r8, r3
 8001084:	d054      	beq.n	8001130 <WM_Raise+0x10c>
 8001086:	461a      	mov	r2, r3
				for(pi = pqueue->head; pi->next; pi = pi->next) {
 8001088:	6813      	ldr	r3, [r2, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1f9      	bne.n	8001082 <WM_Raise+0x5e>
		pitem->next = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	f8c8 3000 	str.w	r3, [r8]
			pqueue->tail->next = pitem;
 8001094:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001096:	f8c3 8000 	str.w	r8, [r3]
			pqueue->tail = pitem;
 800109a:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
	if (psem->cnt < psem->limit)
 800109e:	f9b5 3022 	ldrsh.w	r3, [r5, #34]	; 0x22
 80010a2:	4283      	cmp	r3, r0
	if (!(gh->flags & GWIN_FLG_SYSVISIBLE))
 80010a4:	f8d8 3018 	ldr.w	r3, [r8, #24]
		psem->cnt++;
 80010a8:	bfc8      	it	gt
 80010aa:	8429      	strhgt	r1, [r5, #32]
 80010ac:	059a      	lsls	r2, r3, #22
 80010ae:	d401      	bmi.n	80010b4 <WM_Raise+0x90>
 80010b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	RedrawPending |= DOREDRAW_VISIBLES;
 80010b4:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
 80010b8:	696f      	ldr	r7, [r5, #20]
	Qadd(&readyQ, me = _gfxCurrentThread);
 80010ba:	4e2a      	ldr	r6, [pc, #168]	; (8001164 <WM_Raise+0x140>)
	gh->flags |= GWIN_FLG_NEEDREDRAW;
 80010bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
	RedrawPending |= DOREDRAW_VISIBLES;
 80010c0:	f042 0202 	orr.w	r2, r2, #2
	gh->flags |= GWIN_FLG_NEEDREDRAW;
 80010c4:	f8c8 3018 	str.w	r3, [r8, #24]
	RedrawPending |= DOREDRAW_VISIBLES;
 80010c8:	f885 202c 	strb.w	r2, [r5, #44]	; 0x2c
	t->next = 0;
 80010cc:	f04f 0800 	mov.w	r8, #0
	while (pmutex[0]) {
 80010d0:	b1d7      	cbz	r7, 8001108 <WM_Raise+0xe4>
	if (!q->head)
 80010d2:	6828      	ldr	r0, [r5, #0]
 80010d4:	b130      	cbz	r0, 80010e4 <WM_Raise+0xc0>
	q->head = t->next;
 80010d6:	6804      	ldr	r4, [r0, #0]
 80010d8:	602c      	str	r4, [r5, #0]
 80010da:	f005 fc0d 	bl	80068f8 <free>
	if (!q->head)
 80010de:	4620      	mov	r0, r4
 80010e0:	2c00      	cmp	r4, #0
 80010e2:	d1f8      	bne.n	80010d6 <WM_Raise+0xb2>
	if (!readyQ.head)
 80010e4:	68ab      	ldr	r3, [r5, #8]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d0f2      	beq.n	80010d0 <WM_Raise+0xac>
	Qadd(&readyQ, me = _gfxCurrentThread);
 80010ea:	6831      	ldr	r1, [r6, #0]
		q->tail->next = t;
 80010ec:	68ea      	ldr	r2, [r5, #12]
	t->next = 0;
 80010ee:	f8c1 8000 	str.w	r8, [r1]
		q->tail->next = t;
 80010f2:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 80010f4:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 80010f6:	60e9      	str	r1, [r5, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 80010f8:	4608      	mov	r0, r1
	q->head = t->next;
 80010fa:	60aa      	str	r2, [r5, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 80010fc:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 80010fe:	6033      	str	r3, [r6, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8001100:	f7ff fb0c 	bl	800071c <_gfxTaskSwitch>
	while (pmutex[0]) {
 8001104:	2f00      	cmp	r7, #0
 8001106:	d1e4      	bne.n	80010d2 <WM_Raise+0xae>
	if (psem->cnt < psem->limit)
 8001108:	f9b5 2010 	ldrsh.w	r2, [r5, #16]

void gtimerJab(GTimer *pt) {
	gfxMutexEnter(&mutex);
	
	// Jab it!
	pt->flags |= GTIMER_FLG_JABBED;
 800110c:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
 8001110:	f9b5 1012 	ldrsh.w	r1, [r5, #18]
 8001114:	f043 0304 	orr.w	r3, r3, #4
 8001118:	4291      	cmp	r1, r2
 800111a:	f8a5 3040 	strh.w	r3, [r5, #64]	; 0x40
		psem->cnt++;
 800111e:	bfc8      	it	gt
 8001120:	3201      	addgt	r2, #1
	pmutex[0] = 0;
 8001122:	f04f 0300 	mov.w	r3, #0
		psem->cnt++;
 8001126:	bfc8      	it	gt
 8001128:	822a      	strhgt	r2, [r5, #16]
	pmutex[0] = 0;
 800112a:	616b      	str	r3, [r5, #20]

	gfxSemSignal(&gwinsem);
		
	// Redraw the window
	_gwinUpdate(gh);
}
 800112c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						if (pqueue->tail == pitem)
 8001130:	6aab      	ldr	r3, [r5, #40]	; 0x28
						pi->next = pitem->next;
 8001132:	f8d8 4000 	ldr.w	r4, [r8]
 8001136:	6014      	str	r4, [r2, #0]
						if (pqueue->tail == pitem)
 8001138:	4598      	cmp	r8, r3
 800113a:	d1a8      	bne.n	800108e <WM_Raise+0x6a>
							pqueue->tail = pi;
 800113c:	62aa      	str	r2, [r5, #40]	; 0x28
 800113e:	e7a6      	b.n	800108e <WM_Raise+0x6a>
		pitem->next = 0;
 8001140:	f8c8 2000 	str.w	r2, [r8]
			pqueue->head = pqueue->tail = pitem;
 8001144:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
 8001148:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
 800114c:	e7a7      	b.n	800109e <WM_Raise+0x7a>
				pqueue->head = pitem->next;
 800114e:	f8d8 3000 	ldr.w	r3, [r8]
 8001152:	626b      	str	r3, [r5, #36]	; 0x24
		pitem->next = 0;
 8001154:	2200      	movs	r2, #0
 8001156:	f8c8 2000 	str.w	r2, [r8]
		if (!pqueue->head) {
 800115a:	2b00      	cmp	r3, #0
 800115c:	d0f2      	beq.n	8001144 <WM_Raise+0x120>
 800115e:	e799      	b.n	8001094 <WM_Raise+0x70>
 8001160:	200000b8 	.word	0x200000b8
 8001164:	20000948 	.word	0x20000948

08001168 <lineto>:
		gdispGDrawPixel(gg->g.display, x, y, style->color);
		break;
	}
}

static void lineto(GGraphObject *gg, coord_t x0, coord_t y0, coord_t x1, coord_t y1, const GGraphLineStyle *style) {
 8001168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800116c:	b08d      	sub	sp, #52	; 0x34
	coord_t	dy, dx;
	coord_t addx, addy;
	coord_t P, diff, i;
	coord_t	run_on, run_off, run;

	if (style->type == GGRAPH_LINE_NONE)
 800116e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
static void lineto(GGraphObject *gg, coord_t x0, coord_t y0, coord_t x1, coord_t y1, const GGraphLineStyle *style) {
 8001170:	f9bd 5058 	ldrsh.w	r5, [sp, #88]	; 0x58
	if (style->type == GGRAPH_LINE_NONE)
 8001174:	f894 b000 	ldrb.w	fp, [r4]
 8001178:	f1bb 0f00 	cmp.w	fp, #0
 800117c:	f000 80c2 	beq.w	8001304 <lineto+0x19c>
 8001180:	4680      	mov	r8, r0
		return;

	// Convert to device space. Note the y-axis is inverted.
	x0 += gg->g.x + gg->xorigin;
	y0 = gg->g.y + gg->g.height - 1 - gg->yorigin - y0;
 8001182:	89c0      	ldrh	r0, [r0, #14]
 8001184:	f8b8 c012 	ldrh.w	ip, [r8, #18]
 8001188:	f8b8 e048 	ldrh.w	lr, [r8, #72]	; 0x48
	x0 += gg->g.x + gg->xorigin;
 800118c:	f8b8 7046 	ldrh.w	r7, [r8, #70]	; 0x46
 8001190:	4626      	mov	r6, r4
	y0 = gg->g.y + gg->g.height - 1 - gg->yorigin - y0;
 8001192:	4460      	add	r0, ip
	x0 += gg->g.x + gg->xorigin;
 8001194:	f8b8 400c 	ldrh.w	r4, [r8, #12]
	x1 += gg->g.x + gg->xorigin;
	y1 = gg->g.y + gg->g.height - 1 - gg->yorigin - y1;

	if (style->size <= 0) {
 8001198:	f9b6 6002 	ldrsh.w	r6, [r6, #2]
 800119c:	9604      	str	r6, [sp, #16]
	y0 = gg->g.y + gg->g.height - 1 - gg->yorigin - y0;
 800119e:	eba0 000e 	sub.w	r0, r0, lr
	x0 += gg->g.x + gg->xorigin;
 80011a2:	443c      	add	r4, r7
	y1 = gg->g.y + gg->g.height - 1 - gg->yorigin - y1;
 80011a4:	43ed      	mvns	r5, r5
	y0 = gg->g.y + gg->g.height - 1 - gg->yorigin - y0;
 80011a6:	43d7      	mvns	r7, r2
 80011a8:	b282      	uxth	r2, r0
 80011aa:	4417      	add	r7, r2
	x0 += gg->g.x + gg->xorigin;
 80011ac:	b2a0      	uxth	r0, r4
	y1 = gg->g.y + gg->g.height - 1 - gg->yorigin - y1;
 80011ae:	442a      	add	r2, r5
	x0 += gg->g.x + gg->xorigin;
 80011b0:	4401      	add	r1, r0
	x1 += gg->g.x + gg->xorigin;
 80011b2:	4418      	add	r0, r3
	y1 = gg->g.y + gg->g.height - 1 - gg->yorigin - y1;
 80011b4:	b293      	uxth	r3, r2
	y0 = gg->g.y + gg->g.height - 1 - gg->yorigin - y0;
 80011b6:	b2bf      	uxth	r7, r7
	x1 += gg->g.x + gg->xorigin;
 80011b8:	b282      	uxth	r2, r0
	x0 += gg->g.x + gg->xorigin;
 80011ba:	b289      	uxth	r1, r1
	y1 = gg->g.y + gg->g.height - 1 - gg->yorigin - y1;
 80011bc:	b218      	sxth	r0, r3
	if (style->size <= 0) {
 80011be:	2e00      	cmp	r6, #0
	y0 = gg->g.y + gg->g.height - 1 - gg->yorigin - y0;
 80011c0:	fa0f f987 	sxth.w	r9, r7
	y1 = gg->g.y + gg->g.height - 1 - gg->yorigin - y1;
 80011c4:	9001      	str	r0, [sp, #4]
	x0 += gg->g.x + gg->xorigin;
 80011c6:	fa0f fa81 	sxth.w	sl, r1
	x1 += gg->g.x + gg->xorigin;
 80011ca:	b215      	sxth	r5, r2
	if (style->size <= 0) {
 80011cc:	f340 809d 	ble.w	800130a <lineto+0x1a2>
		// Use the driver to draw a solid line
		gdispGDrawLine(gg->g.display, x0, y0, x1, y1, style->color);
		return;
	}

	switch (style->type) {
 80011d0:	f1bb 0f02 	cmp.w	fp, #2
 80011d4:	f000 8128 	beq.w	8001428 <lineto+0x2c0>
 80011d8:	f1bb 0f03 	cmp.w	fp, #3
 80011dc:	f040 80d1 	bne.w	8001382 <lineto+0x21a>
		run_off = -style->size;
		break;

	case GGRAPH_LINE_DASH:
		run_on = style->size;
		run_off = -style->size;
 80011e0:	4270      	negs	r0, r6
 80011e2:	b200      	sxth	r0, r0
		return;
	}

	// Use Bresenham's algorithm modified to draw a stylized line
	run = 0;
	if (x1 >= x0) {
 80011e4:	45aa      	cmp	sl, r5
		run_off = -style->size;
 80011e6:	9006      	str	r0, [sp, #24]
	if (x1 >= x0) {
 80011e8:	f300 8127 	bgt.w	800143a <lineto+0x2d2>
		dx = x1 - x0;
 80011ec:	1a52      	subs	r2, r2, r1
 80011ee:	b212      	sxth	r2, r2
 80011f0:	9208      	str	r2, [sp, #32]
 80011f2:	2201      	movs	r2, #1
 80011f4:	9202      	str	r2, [sp, #8]
		addx = 1;
	} else {
		dx = x0 - x1;
		addx = -1;
	}
	if (y1 >= y0) {
 80011f6:	9a01      	ldr	r2, [sp, #4]
 80011f8:	4591      	cmp	r9, r2
 80011fa:	f300 8128 	bgt.w	800144e <lineto+0x2e6>
		dy = y1 - y0;
 80011fe:	1bdb      	subs	r3, r3, r7
 8001200:	b21b      	sxth	r3, r3
 8001202:	9307      	str	r3, [sp, #28]
	} else {
		dy = y0 - y1;
		addy = -1;
	}

	if (dx >= dy) {
 8001204:	9a07      	ldr	r2, [sp, #28]
 8001206:	9c08      	ldr	r4, [sp, #32]
 8001208:	2301      	movs	r3, #1
 800120a:	42a2      	cmp	r2, r4
 800120c:	9303      	str	r3, [sp, #12]
 800120e:	f300 8129 	bgt.w	8001464 <lineto+0x2fc>
		dy *= 2;
 8001212:	0053      	lsls	r3, r2, #1
 8001214:	b29b      	uxth	r3, r3
		P = dy - dx;
 8001216:	b2a2      	uxth	r2, r4
		dy *= 2;
 8001218:	930b      	str	r3, [sp, #44]	; 0x2c
		P = dy - dx;
 800121a:	1a9b      	subs	r3, r3, r2
 800121c:	b29b      	uxth	r3, r3
		diff = P - dx;
 800121e:	1a9a      	subs	r2, r3, r2
 8001220:	b292      	uxth	r2, r2

		for(i=0; i<=dx; ++i) {
 8001222:	2c00      	cmp	r4, #0
		diff = P - dx;
 8001224:	9209      	str	r2, [sp, #36]	; 0x24
		P = dy - dx;
 8001226:	b21b      	sxth	r3, r3
		for(i=0; i<=dx; ++i) {
 8001228:	db6c      	blt.n	8001304 <lineto+0x19c>
 800122a:	9a02      	ldr	r2, [sp, #8]
	if (!q->head)
 800122c:	4c7c      	ldr	r4, [pc, #496]	; (8001420 <lineto+0x2b8>)
	Qadd(&readyQ, me = _gfxCurrentThread);
 800122e:	4e7d      	ldr	r6, [pc, #500]	; (8001424 <lineto+0x2bc>)
	pmutex[0] = 1;
 8001230:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8001234:	4411      	add	r1, r2
 8001236:	f04f 0b00 	mov.w	fp, #0
 800123a:	b28a      	uxth	r2, r1
 800123c:	9201      	str	r2, [sp, #4]
 800123e:	46da      	mov	sl, fp
 8001240:	4698      	mov	r8, r3
 8001242:	9b01      	ldr	r3, [sp, #4]
 8001244:	9a02      	ldr	r2, [sp, #8]
 8001246:	1a9f      	subs	r7, r3, r2
 8001248:	b23a      	sxth	r2, r7
			if (run++ >= 0) {
 800124a:	f10a 0301 	add.w	r3, sl, #1
 800124e:	f1ba 0f00 	cmp.w	sl, #0
 8001252:	9205      	str	r2, [sp, #20]
 8001254:	b21b      	sxth	r3, r3
 8001256:	f2c0 80ba 	blt.w	80013ce <lineto+0x266>
				if (run >= run_on)
 800125a:	9a06      	ldr	r2, [sp, #24]
 800125c:	9904      	ldr	r1, [sp, #16]
 800125e:	4299      	cmp	r1, r3
 8001260:	bfc8      	it	gt
 8001262:	461a      	movgt	r2, r3
					run = run_off;
				gdispGDrawPixel(gg->g.display, x0, y0, style->color);
 8001264:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001266:	689d      	ldr	r5, [r3, #8]
 8001268:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800126a:	889b      	ldrh	r3, [r3, #4]
 800126c:	9307      	str	r3, [sp, #28]
				if (run >= run_on)
 800126e:	4692      	mov	sl, r2
	while (pmutex[0]) {
 8001270:	6a2b      	ldr	r3, [r5, #32]
 8001272:	b1d3      	cbz	r3, 80012aa <lineto+0x142>
	if (!q->head)
 8001274:	6820      	ldr	r0, [r4, #0]
 8001276:	b130      	cbz	r0, 8001286 <lineto+0x11e>
	q->head = t->next;
 8001278:	6807      	ldr	r7, [r0, #0]
 800127a:	6027      	str	r7, [r4, #0]
 800127c:	f005 fb3c 	bl	80068f8 <free>
	if (!q->head)
 8001280:	4638      	mov	r0, r7
 8001282:	2f00      	cmp	r7, #0
 8001284:	d1f8      	bne.n	8001278 <lineto+0x110>
	if (!readyQ.head)
 8001286:	68a3      	ldr	r3, [r4, #8]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d0f1      	beq.n	8001270 <lineto+0x108>
	Qadd(&readyQ, me = _gfxCurrentThread);
 800128c:	6830      	ldr	r0, [r6, #0]
		q->tail->next = t;
 800128e:	68e2      	ldr	r2, [r4, #12]
		q->tail = t;
 8001290:	60e0      	str	r0, [r4, #12]
	t->next = 0;
 8001292:	2100      	movs	r1, #0
 8001294:	6001      	str	r1, [r0, #0]
		q->tail->next = t;
 8001296:	6010      	str	r0, [r2, #0]
	q->head = t->next;
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	60a2      	str	r2, [r4, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 800129c:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 800129e:	6033      	str	r3, [r6, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 80012a0:	f7ff fa3c 	bl	800071c <_gfxTaskSwitch>
	while (pmutex[0]) {
 80012a4:	6a2b      	ldr	r3, [r5, #32]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d1e4      	bne.n	8001274 <lineto+0x10c>
	pmutex[0] = 1;
 80012aa:	2201      	movs	r2, #1
			if (g->p.x < g->clipx0 || g->p.x >= g->clipx1 || g->p.y < g->clipy0 || g->p.y >= g->clipy1)
 80012ac:	f9b5 3024 	ldrsh.w	r3, [r5, #36]	; 0x24
 80012b0:	622a      	str	r2, [r5, #32]
	g->p.x		= x;
 80012b2:	9a05      	ldr	r2, [sp, #20]
	g->p.color	= color;
 80012b4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
	g->p.x		= x;
 80012b8:	85aa      	strh	r2, [r5, #44]	; 0x2c
			if (g->p.x < g->clipx0 || g->p.x >= g->clipx1 || g->p.y < g->clipy0 || g->p.y >= g->clipy1)
 80012ba:	4293      	cmp	r3, r2
	g->p.y		= y;
 80012bc:	f8a5 902e 	strh.w	r9, [r5, #46]	; 0x2e
	g->p.color	= color;
 80012c0:	87a9      	strh	r1, [r5, #60]	; 0x3c
			if (g->p.x < g->clipx0 || g->p.x >= g->clipx1 || g->p.y < g->clipy0 || g->p.y >= g->clipy1)
 80012c2:	dc04      	bgt.n	80012ce <lineto+0x166>
 80012c4:	f9b5 3028 	ldrsh.w	r3, [r5, #40]	; 0x28
 80012c8:	4293      	cmp	r3, r2
 80012ca:	f300 8092 	bgt.w	80013f2 <lineto+0x28a>
	pmutex[0] = 0;
 80012ce:	2300      	movs	r3, #0
			}
			if (P < 0) {
 80012d0:	f1b8 0f00 	cmp.w	r8, #0
 80012d4:	622b      	str	r3, [r5, #32]
 80012d6:	f10b 0b01 	add.w	fp, fp, #1
 80012da:	db7e      	blt.n	80013da <lineto+0x272>
				P  += dy;
				x0 += addx;
			} else {
				P  += diff;
 80012dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80012de:	9802      	ldr	r0, [sp, #8]
 80012e0:	eb03 0108 	add.w	r1, r3, r8
				x0 += addx;
				y0 += addy;
 80012e4:	9b03      	ldr	r3, [sp, #12]
 80012e6:	4499      	add	r9, r3
 80012e8:	9b01      	ldr	r3, [sp, #4]
 80012ea:	4403      	add	r3, r0
 80012ec:	461a      	mov	r2, r3
				P  += diff;
 80012ee:	fa0f f881 	sxth.w	r8, r1
		for(i=0; i<=dx; ++i) {
 80012f2:	fa0f f38b 	sxth.w	r3, fp
				y0 += addy;
 80012f6:	fa0f f989 	sxth.w	r9, r9
 80012fa:	b292      	uxth	r2, r2
 80012fc:	9201      	str	r2, [sp, #4]
		for(i=0; i<=dx; ++i) {
 80012fe:	9a08      	ldr	r2, [sp, #32]
 8001300:	429a      	cmp	r2, r3
 8001302:	da9e      	bge.n	8001242 <lineto+0xda>
				x0 += addx;
				y0 += addy;
			}
		}
	}
}
 8001304:	b00d      	add	sp, #52	; 0x34
 8001306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		gdispGDrawLine(gg->g.display, x0, y0, x1, y1, style->color);
 800130a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800130c:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8001310:	f8b3 b004 	ldrh.w	fp, [r3, #4]
	if (!q->head)
 8001314:	4e42      	ldr	r6, [pc, #264]	; (8001420 <lineto+0x2b8>)
	Qadd(&readyQ, me = _gfxCurrentThread);
 8001316:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8001424 <lineto+0x2bc>
	while (pmutex[0]) {
 800131a:	6a3b      	ldr	r3, [r7, #32]
 800131c:	b1e3      	cbz	r3, 8001358 <lineto+0x1f0>
	if (!q->head)
 800131e:	6830      	ldr	r0, [r6, #0]
 8001320:	b130      	cbz	r0, 8001330 <lineto+0x1c8>
	q->head = t->next;
 8001322:	6804      	ldr	r4, [r0, #0]
 8001324:	6034      	str	r4, [r6, #0]
 8001326:	f005 fae7 	bl	80068f8 <free>
	if (!q->head)
 800132a:	4620      	mov	r0, r4
 800132c:	2c00      	cmp	r4, #0
 800132e:	d1f8      	bne.n	8001322 <lineto+0x1ba>
	if (!readyQ.head)
 8001330:	68b3      	ldr	r3, [r6, #8]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d0f1      	beq.n	800131a <lineto+0x1b2>
	Qadd(&readyQ, me = _gfxCurrentThread);
 8001336:	f8d8 0000 	ldr.w	r0, [r8]
		q->tail->next = t;
 800133a:	68f2      	ldr	r2, [r6, #12]
		q->tail = t;
 800133c:	60f0      	str	r0, [r6, #12]
	t->next = 0;
 800133e:	2100      	movs	r1, #0
 8001340:	6001      	str	r1, [r0, #0]
		q->tail->next = t;
 8001342:	6010      	str	r0, [r2, #0]
	q->head = t->next;
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	60b2      	str	r2, [r6, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8001348:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 800134a:	f8c8 3000 	str.w	r3, [r8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 800134e:	f7ff f9e5 	bl	800071c <_gfxTaskSwitch>
	while (pmutex[0]) {
 8001352:	6a3b      	ldr	r3, [r7, #32]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d1e2      	bne.n	800131e <lineto+0x1b6>
 8001358:	9302      	str	r3, [sp, #8]
	pmutex[0] = 1;
 800135a:	2201      	movs	r2, #1
	g->p.y1 = y1;
 800135c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8001360:	86fb      	strh	r3, [r7, #54]	; 0x36
	g->p.x = x0;
 8001362:	f8a7 a02c 	strh.w	sl, [r7, #44]	; 0x2c
	g->p.y = y0;
 8001366:	f8a7 902e 	strh.w	r9, [r7, #46]	; 0x2e
	g->p.x1 = x1;
 800136a:	86bd      	strh	r5, [r7, #52]	; 0x34
	g->p.color = color;
 800136c:	f8a7 b03c 	strh.w	fp, [r7, #60]	; 0x3c
 8001370:	623a      	str	r2, [r7, #32]
	line_clip(g);
 8001372:	4638      	mov	r0, r7
 8001374:	f7ff f9e4 	bl	8000740 <line_clip>
	pmutex[0] = 0;
 8001378:	9b02      	ldr	r3, [sp, #8]
 800137a:	623b      	str	r3, [r7, #32]
}
 800137c:	b00d      	add	sp, #52	; 0x34
 800137e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		gdispGDrawLine(gg->g.display, x0, y0, x1, y1, style->color);
 8001382:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001384:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8001388:	f8b3 b004 	ldrh.w	fp, [r3, #4]
	if (!q->head)
 800138c:	4e24      	ldr	r6, [pc, #144]	; (8001420 <lineto+0x2b8>)
	Qadd(&readyQ, me = _gfxCurrentThread);
 800138e:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8001424 <lineto+0x2bc>
	while (pmutex[0]) {
 8001392:	6a3b      	ldr	r3, [r7, #32]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d0df      	beq.n	8001358 <lineto+0x1f0>
	if (!q->head)
 8001398:	6830      	ldr	r0, [r6, #0]
 800139a:	b130      	cbz	r0, 80013aa <lineto+0x242>
	q->head = t->next;
 800139c:	6804      	ldr	r4, [r0, #0]
 800139e:	6034      	str	r4, [r6, #0]
 80013a0:	f005 faaa 	bl	80068f8 <free>
	if (!q->head)
 80013a4:	4620      	mov	r0, r4
 80013a6:	2c00      	cmp	r4, #0
 80013a8:	d1f8      	bne.n	800139c <lineto+0x234>
	if (!readyQ.head)
 80013aa:	68b3      	ldr	r3, [r6, #8]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d0f0      	beq.n	8001392 <lineto+0x22a>
	Qadd(&readyQ, me = _gfxCurrentThread);
 80013b0:	f8d8 0000 	ldr.w	r0, [r8]
		q->tail->next = t;
 80013b4:	68f2      	ldr	r2, [r6, #12]
		q->tail = t;
 80013b6:	60f0      	str	r0, [r6, #12]
	t->next = 0;
 80013b8:	2100      	movs	r1, #0
 80013ba:	6001      	str	r1, [r0, #0]
		q->tail->next = t;
 80013bc:	6010      	str	r0, [r2, #0]
	q->head = t->next;
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	60b2      	str	r2, [r6, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 80013c2:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 80013c4:	f8c8 3000 	str.w	r3, [r8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 80013c8:	f7ff f9a8 	bl	800071c <_gfxTaskSwitch>
 80013cc:	e7e1      	b.n	8001392 <lineto+0x22a>
			if (P < 0) {
 80013ce:	f1b8 0f00 	cmp.w	r8, #0
			if (run++ >= 0) {
 80013d2:	469a      	mov	sl, r3
 80013d4:	f10b 0b01 	add.w	fp, fp, #1
			if (P < 0) {
 80013d8:	da80      	bge.n	80012dc <lineto+0x174>
				P  += dy;
 80013da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80013dc:	9802      	ldr	r0, [sp, #8]
 80013de:	eb03 0108 	add.w	r1, r3, r8
 80013e2:	9b01      	ldr	r3, [sp, #4]
 80013e4:	4403      	add	r3, r0
 80013e6:	461a      	mov	r2, r3
 80013e8:	fa0f f881 	sxth.w	r8, r1
		for(i=0; i<=dx; ++i) {
 80013ec:	fa0f f38b 	sxth.w	r3, fp
 80013f0:	e783      	b.n	80012fa <lineto+0x192>
			if (g->p.x < g->clipx0 || g->p.x >= g->clipx1 || g->p.y < g->clipy0 || g->p.y >= g->clipy1)
 80013f2:	f9b5 3026 	ldrsh.w	r3, [r5, #38]	; 0x26
 80013f6:	454b      	cmp	r3, r9
 80013f8:	f73f af69 	bgt.w	80012ce <lineto+0x166>
 80013fc:	f9b5 302a 	ldrsh.w	r3, [r5, #42]	; 0x2a
 8001400:	454b      	cmp	r3, r9
 8001402:	f77f af64 	ble.w	80012ce <lineto+0x166>
			g->p.cx = g->p.cy = 1;
 8001406:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800140a:	632b      	str	r3, [r5, #48]	; 0x30
			gdisp_lld_write_start(g);
 800140c:	4628      	mov	r0, r5
 800140e:	f7ff f945 	bl	800069c <gdisp_lld_write_start>
			gdisp_lld_write_color(g);
 8001412:	4628      	mov	r0, r5
 8001414:	f7fe ffde 	bl	80003d4 <gdisp_lld_write_color>
			gdisp_lld_write_stop(g);
 8001418:	4628      	mov	r0, r5
 800141a:	f7ff f93d 	bl	8000698 <gdisp_lld_write_stop>
 800141e:	e756      	b.n	80012ce <lineto+0x166>
 8001420:	200000b8 	.word	0x200000b8
 8001424:	20000948 	.word	0x20000948
		run_off = -style->size;
 8001428:	4270      	negs	r0, r6
 800142a:	b200      	sxth	r0, r0
 800142c:	9006      	str	r0, [sp, #24]
	if (x1 >= x0) {
 800142e:	45aa      	cmp	sl, r5
		run_on = 1;
 8001430:	f04f 0001 	mov.w	r0, #1
 8001434:	9004      	str	r0, [sp, #16]
	if (x1 >= x0) {
 8001436:	f77f aed9 	ble.w	80011ec <lineto+0x84>
		dx = x0 - x1;
 800143a:	1a8a      	subs	r2, r1, r2
 800143c:	b212      	sxth	r2, r2
 800143e:	9208      	str	r2, [sp, #32]
 8001440:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001444:	9202      	str	r2, [sp, #8]
	if (y1 >= y0) {
 8001446:	9a01      	ldr	r2, [sp, #4]
 8001448:	4591      	cmp	r9, r2
 800144a:	f77f aed8 	ble.w	80011fe <lineto+0x96>
		dy = y0 - y1;
 800144e:	1afb      	subs	r3, r7, r3
 8001450:	b21b      	sxth	r3, r3
 8001452:	9307      	str	r3, [sp, #28]
	if (dx >= dy) {
 8001454:	9a07      	ldr	r2, [sp, #28]
 8001456:	9c08      	ldr	r4, [sp, #32]
		dy = y0 - y1;
 8001458:	f64f 73ff 	movw	r3, #65535	; 0xffff
	if (dx >= dy) {
 800145c:	42a2      	cmp	r2, r4
		dy = y0 - y1;
 800145e:	9303      	str	r3, [sp, #12]
	if (dx >= dy) {
 8001460:	f77f aed7 	ble.w	8001212 <lineto+0xaa>
		dx *= 2;
 8001464:	0063      	lsls	r3, r4, #1
 8001466:	4611      	mov	r1, r2
 8001468:	b29b      	uxth	r3, r3
		P = dx - dy;
 800146a:	b292      	uxth	r2, r2
		dx *= 2;
 800146c:	930b      	str	r3, [sp, #44]	; 0x2c
		P = dx - dy;
 800146e:	1a9b      	subs	r3, r3, r2
 8001470:	b29b      	uxth	r3, r3
		diff = P - dy;
 8001472:	1a9a      	subs	r2, r3, r2
 8001474:	b292      	uxth	r2, r2
		P = dx - dy;
 8001476:	b21b      	sxth	r3, r3
		for(i=0; i<=dy; ++i) {
 8001478:	2900      	cmp	r1, #0
		diff = P - dy;
 800147a:	9209      	str	r2, [sp, #36]	; 0x24
		P = dx - dy;
 800147c:	9301      	str	r3, [sp, #4]
		for(i=0; i<=dy; ++i) {
 800147e:	f6ff af41 	blt.w	8001304 <lineto+0x19c>
 8001482:	9b03      	ldr	r3, [sp, #12]
	if (!q->head)
 8001484:	4c4a      	ldr	r4, [pc, #296]	; (80015b0 <lineto+0x448>)
	Qadd(&readyQ, me = _gfxCurrentThread);
 8001486:	4e4b      	ldr	r6, [pc, #300]	; (80015b4 <lineto+0x44c>)
	pmutex[0] = 1;
 8001488:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800148c:	441f      	add	r7, r3
 800148e:	f04f 0b00 	mov.w	fp, #0
 8001492:	b2bb      	uxth	r3, r7
 8001494:	46d9      	mov	r9, fp
 8001496:	4698      	mov	r8, r3
 8001498:	9b03      	ldr	r3, [sp, #12]
 800149a:	eba8 0703 	sub.w	r7, r8, r3
 800149e:	b23a      	sxth	r2, r7
			if (run++ >= 0) {
 80014a0:	f109 0301 	add.w	r3, r9, #1
 80014a4:	f1b9 0f00 	cmp.w	r9, #0
 80014a8:	9205      	str	r2, [sp, #20]
 80014aa:	b21b      	sxth	r3, r3
 80014ac:	db54      	blt.n	8001558 <lineto+0x3f0>
				if (run >= run_on)
 80014ae:	9a06      	ldr	r2, [sp, #24]
 80014b0:	9904      	ldr	r1, [sp, #16]
 80014b2:	4299      	cmp	r1, r3
 80014b4:	bfc8      	it	gt
 80014b6:	461a      	movgt	r2, r3
				gdispGDrawPixel(gg->g.display, x0, y0, style->color);
 80014b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80014ba:	689d      	ldr	r5, [r3, #8]
 80014bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80014be:	889b      	ldrh	r3, [r3, #4]
 80014c0:	9308      	str	r3, [sp, #32]
				if (run >= run_on)
 80014c2:	4691      	mov	r9, r2
	while (pmutex[0]) {
 80014c4:	6a2b      	ldr	r3, [r5, #32]
 80014c6:	b1d3      	cbz	r3, 80014fe <lineto+0x396>
	if (!q->head)
 80014c8:	6820      	ldr	r0, [r4, #0]
 80014ca:	b130      	cbz	r0, 80014da <lineto+0x372>
	q->head = t->next;
 80014cc:	6807      	ldr	r7, [r0, #0]
 80014ce:	6027      	str	r7, [r4, #0]
 80014d0:	f005 fa12 	bl	80068f8 <free>
	if (!q->head)
 80014d4:	4638      	mov	r0, r7
 80014d6:	2f00      	cmp	r7, #0
 80014d8:	d1f8      	bne.n	80014cc <lineto+0x364>
	if (!readyQ.head)
 80014da:	68a3      	ldr	r3, [r4, #8]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d0f1      	beq.n	80014c4 <lineto+0x35c>
	Qadd(&readyQ, me = _gfxCurrentThread);
 80014e0:	6830      	ldr	r0, [r6, #0]
		q->tail->next = t;
 80014e2:	68e2      	ldr	r2, [r4, #12]
		q->tail = t;
 80014e4:	60e0      	str	r0, [r4, #12]
	t->next = 0;
 80014e6:	2100      	movs	r1, #0
 80014e8:	6001      	str	r1, [r0, #0]
		q->tail->next = t;
 80014ea:	6010      	str	r0, [r2, #0]
	q->head = t->next;
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	60a2      	str	r2, [r4, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 80014f0:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 80014f2:	6033      	str	r3, [r6, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 80014f4:	f7ff f912 	bl	800071c <_gfxTaskSwitch>
	while (pmutex[0]) {
 80014f8:	6a2b      	ldr	r3, [r5, #32]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1e4      	bne.n	80014c8 <lineto+0x360>
	pmutex[0] = 1;
 80014fe:	2201      	movs	r2, #1
			if (g->p.x < g->clipx0 || g->p.x >= g->clipx1 || g->p.y < g->clipy0 || g->p.y >= g->clipy1)
 8001500:	f9b5 3024 	ldrsh.w	r3, [r5, #36]	; 0x24
 8001504:	622a      	str	r2, [r5, #32]
	g->p.y		= y;
 8001506:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800150a:	85ea      	strh	r2, [r5, #46]	; 0x2e
			if (g->p.x < g->clipx0 || g->p.x >= g->clipx1 || g->p.y < g->clipy0 || g->p.y >= g->clipy1)
 800150c:	4553      	cmp	r3, sl
	g->p.color	= color;
 800150e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
	g->p.x		= x;
 8001512:	f8a5 a02c 	strh.w	sl, [r5, #44]	; 0x2c
	g->p.color	= color;
 8001516:	87aa      	strh	r2, [r5, #60]	; 0x3c
			if (g->p.x < g->clipx0 || g->p.x >= g->clipx1 || g->p.y < g->clipy0 || g->p.y >= g->clipy1)
 8001518:	dc03      	bgt.n	8001522 <lineto+0x3ba>
 800151a:	f9b5 3028 	ldrsh.w	r3, [r5, #40]	; 0x28
 800151e:	4553      	cmp	r3, sl
 8001520:	dc30      	bgt.n	8001584 <lineto+0x41c>
	pmutex[0] = 0;
 8001522:	2300      	movs	r3, #0
 8001524:	622b      	str	r3, [r5, #32]
			if (P < 0) {
 8001526:	9b01      	ldr	r3, [sp, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	f10b 0b01 	add.w	fp, fp, #1
 800152e:	db19      	blt.n	8001564 <lineto+0x3fc>
				P  += diff;
 8001530:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001532:	4413      	add	r3, r2
 8001534:	4619      	mov	r1, r3
				x0 += addx;
 8001536:	9b02      	ldr	r3, [sp, #8]
 8001538:	449a      	add	sl, r3
 800153a:	9b03      	ldr	r3, [sp, #12]
 800153c:	eb03 0208 	add.w	r2, r3, r8
 8001540:	fa1f f882 	uxth.w	r8, r2
		for(i=0; i<=dy; ++i) {
 8001544:	9a07      	ldr	r2, [sp, #28]
 8001546:	fa0f f38b 	sxth.w	r3, fp
				P  += diff;
 800154a:	b209      	sxth	r1, r1
		for(i=0; i<=dy; ++i) {
 800154c:	429a      	cmp	r2, r3
				P  += diff;
 800154e:	9101      	str	r1, [sp, #4]
				x0 += addx;
 8001550:	fa0f fa8a 	sxth.w	sl, sl
		for(i=0; i<=dy; ++i) {
 8001554:	daa0      	bge.n	8001498 <lineto+0x330>
 8001556:	e6d5      	b.n	8001304 <lineto+0x19c>
			if (run++ >= 0) {
 8001558:	4699      	mov	r9, r3
			if (P < 0) {
 800155a:	9b01      	ldr	r3, [sp, #4]
 800155c:	2b00      	cmp	r3, #0
 800155e:	f10b 0b01 	add.w	fp, fp, #1
 8001562:	dae5      	bge.n	8001530 <lineto+0x3c8>
				P  += dx;
 8001564:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001566:	4413      	add	r3, r2
 8001568:	4619      	mov	r1, r3
 800156a:	9b03      	ldr	r3, [sp, #12]
 800156c:	eb03 0208 	add.w	r2, r3, r8
 8001570:	fa1f f882 	uxth.w	r8, r2
		for(i=0; i<=dy; ++i) {
 8001574:	9a07      	ldr	r2, [sp, #28]
 8001576:	fa0f f38b 	sxth.w	r3, fp
				P  += dx;
 800157a:	b209      	sxth	r1, r1
		for(i=0; i<=dy; ++i) {
 800157c:	429a      	cmp	r2, r3
				P  += dx;
 800157e:	9101      	str	r1, [sp, #4]
		for(i=0; i<=dy; ++i) {
 8001580:	da8a      	bge.n	8001498 <lineto+0x330>
 8001582:	e6bf      	b.n	8001304 <lineto+0x19c>
 8001584:	f9b5 3026 	ldrsh.w	r3, [r5, #38]	; 0x26
 8001588:	9905      	ldr	r1, [sp, #20]
 800158a:	428b      	cmp	r3, r1
 800158c:	dcc9      	bgt.n	8001522 <lineto+0x3ba>
 800158e:	f9b5 302a 	ldrsh.w	r3, [r5, #42]	; 0x2a
 8001592:	428b      	cmp	r3, r1
 8001594:	ddc5      	ble.n	8001522 <lineto+0x3ba>
			g->p.cx = g->p.cy = 1;
 8001596:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800159a:	632b      	str	r3, [r5, #48]	; 0x30
			gdisp_lld_write_start(g);
 800159c:	4628      	mov	r0, r5
 800159e:	f7ff f87d 	bl	800069c <gdisp_lld_write_start>
			gdisp_lld_write_color(g);
 80015a2:	4628      	mov	r0, r5
 80015a4:	f7fe ff16 	bl	80003d4 <gdisp_lld_write_color>
			gdisp_lld_write_stop(g);
 80015a8:	4628      	mov	r0, r5
 80015aa:	f7ff f875 	bl	8000698 <gdisp_lld_write_stop>
 80015ae:	e7b8      	b.n	8001522 <lineto+0x3ba>
 80015b0:	200000b8 	.word	0x200000b8
 80015b4:	20000948 	.word	0x20000948

080015b8 <_gwinFlushRedraws.part.8>:
void _gwinFlushRedraws(GRedrawMethod how) {
 80015b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015bc:	b085      	sub	sp, #20
 80015be:	4ca6      	ldr	r4, [pc, #664]	; (8001858 <_gwinFlushRedraws.part.8+0x2a0>)
	Qadd(&readyQ, me = _gfxCurrentThread);
 80015c0:	4ea6      	ldr	r6, [pc, #664]	; (800185c <_gwinFlushRedraws.part.8+0x2a4>)
 80015c2:	9003      	str	r0, [sp, #12]
	t->next = 0;
 80015c4:	f04f 0800 	mov.w	r8, #0
	while ((RedrawPending & DOREDRAW_INVISIBLES)) {
 80015c8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80015cc:	f013 0301 	ands.w	r3, r3, #1
 80015d0:	f000 8132 	beq.w	8001838 <_gwinFlushRedraws.part.8+0x280>
		RedrawPending &= ~DOREDRAW_INVISIBLES;				// Catch new requests
 80015d4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
	return gh ? (GHandle)gfxQueueASyncNext(&gh->wmq) : (GHandle)gfxQueueASyncPeek(&_GWINList);
 80015d8:	6a65      	ldr	r5, [r4, #36]	; 0x24
		RedrawPending &= ~DOREDRAW_INVISIBLES;				// Catch new requests
 80015da:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80015de:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		for(gh = gwinGetNextWindow(0); gh; gh = gwinGetNextWindow(gh)) {
 80015e2:	b91d      	cbnz	r5, 80015ec <_gwinFlushRedraws.part.8+0x34>
 80015e4:	e7f0      	b.n	80015c8 <_gwinFlushRedraws.part.8+0x10>
	return gh ? (GHandle)gfxQueueASyncNext(&gh->wmq) : (GHandle)gfxQueueASyncPeek(&_GWINList);
 80015e6:	682d      	ldr	r5, [r5, #0]
		for(gh = gwinGetNextWindow(0); gh; gh = gwinGetNextWindow(gh)) {
 80015e8:	2d00      	cmp	r5, #0
 80015ea:	d0ed      	beq.n	80015c8 <_gwinFlushRedraws.part.8+0x10>
			if ((gh->flags & (GWIN_FLG_NEEDREDRAW|GWIN_FLG_SYSVISIBLE)) != GWIN_FLG_NEEDREDRAW)
 80015ec:	69ab      	ldr	r3, [r5, #24]
 80015ee:	f403 4384 	and.w	r3, r3, #16896	; 0x4200
 80015f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015f6:	d1f6      	bne.n	80015e6 <_gwinFlushRedraws.part.8+0x2e>
				gdispGSetClip(gh->display, gh->x, gh->y, gh->width, gh->height);
 80015f8:	68ab      	ldr	r3, [r5, #8]
 80015fa:	9301      	str	r3, [sp, #4]
 80015fc:	f9b5 b00c 	ldrsh.w	fp, [r5, #12]
 8001600:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
 8001604:	f9b5 900e 	ldrsh.w	r9, [r5, #14]
 8001608:	f9b5 a010 	ldrsh.w	sl, [r5, #16]
 800160c:	9302      	str	r3, [sp, #8]
	while (pmutex[0]) {
 800160e:	9b01      	ldr	r3, [sp, #4]
 8001610:	6a1b      	ldr	r3, [r3, #32]
 8001612:	b1e3      	cbz	r3, 800164e <_gwinFlushRedraws.part.8+0x96>
	if (!q->head)
 8001614:	6820      	ldr	r0, [r4, #0]
 8001616:	b130      	cbz	r0, 8001626 <_gwinFlushRedraws.part.8+0x6e>
	q->head = t->next;
 8001618:	6807      	ldr	r7, [r0, #0]
 800161a:	6027      	str	r7, [r4, #0]
 800161c:	f005 f96c 	bl	80068f8 <free>
	if (!q->head)
 8001620:	4638      	mov	r0, r7
 8001622:	2f00      	cmp	r7, #0
 8001624:	d1f8      	bne.n	8001618 <_gwinFlushRedraws.part.8+0x60>
	if (!readyQ.head)
 8001626:	68a2      	ldr	r2, [r4, #8]
 8001628:	2a00      	cmp	r2, #0
 800162a:	d0f0      	beq.n	800160e <_gwinFlushRedraws.part.8+0x56>
	Qadd(&readyQ, me = _gfxCurrentThread);
 800162c:	6831      	ldr	r1, [r6, #0]
		q->tail->next = t;
 800162e:	68e3      	ldr	r3, [r4, #12]
	t->next = 0;
 8001630:	f8c1 8000 	str.w	r8, [r1]
		q->tail->next = t;
 8001634:	6019      	str	r1, [r3, #0]
	q->head = t->next;
 8001636:	6813      	ldr	r3, [r2, #0]
		q->tail = t;
 8001638:	60e1      	str	r1, [r4, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 800163a:	4608      	mov	r0, r1
 800163c:	4611      	mov	r1, r2
	q->head = t->next;
 800163e:	60a3      	str	r3, [r4, #8]
	_gfxCurrentThread = Qpop(&readyQ);
 8001640:	6032      	str	r2, [r6, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8001642:	f7ff f86b 	bl	800071c <_gfxTaskSwitch>
	while (pmutex[0]) {
 8001646:	9b01      	ldr	r3, [sp, #4]
 8001648:	6a1b      	ldr	r3, [r3, #32]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1e2      	bne.n	8001614 <_gwinFlushRedraws.part.8+0x5c>
	pmutex[0] = 1;
 800164e:	9901      	ldr	r1, [sp, #4]
 8001650:	2201      	movs	r2, #1
				if (x < 0) { cx += x; x = 0; }
 8001652:	f1bb 0f00 	cmp.w	fp, #0
 8001656:	620a      	str	r2, [r1, #32]
 8001658:	f2c0 80e9 	blt.w	800182e <_gwinFlushRedraws.part.8+0x276>
				if (y < 0) { cy += y; y = 0; }
 800165c:	f1b9 0f00 	cmp.w	r9, #0
 8001660:	f2c0 80de 	blt.w	8001820 <_gwinFlushRedraws.part.8+0x268>
				if (cx <= 0 || cy <= 0 || x >= g->g.Width || y >= g->g.Height) { x = y = cx = cy = 0; }
 8001664:	f1ba 0f00 	cmp.w	sl, #0
 8001668:	f340 80c4 	ble.w	80017f4 <_gwinFlushRedraws.part.8+0x23c>
 800166c:	9b02      	ldr	r3, [sp, #8]
 800166e:	2b00      	cmp	r3, #0
 8001670:	f340 80c0 	ble.w	80017f4 <_gwinFlushRedraws.part.8+0x23c>
 8001674:	9a01      	ldr	r2, [sp, #4]
 8001676:	f9b2 0008 	ldrsh.w	r0, [r2, #8]
 800167a:	4558      	cmp	r0, fp
 800167c:	f300 80c4 	bgt.w	8001808 <_gwinFlushRedraws.part.8+0x250>
 8001680:	2300      	movs	r3, #0
 8001682:	f9b2 e00a 	ldrsh.w	lr, [r2, #10]
 8001686:	4699      	mov	r9, r3
 8001688:	469b      	mov	fp, r3
 800168a:	4619      	mov	r1, r3
 800168c:	4617      	mov	r7, r2
				g->clipx1 = x+cx;	if (g->clipx1 > g->g.Width) g->clipx1 = g->g.Width;
 800168e:	4288      	cmp	r0, r1
				g->clipx0 = x;
 8001690:	f8a7 b024 	strh.w	fp, [r7, #36]	; 0x24
				g->clipy0 = y;
 8001694:	f8a7 9026 	strh.w	r9, [r7, #38]	; 0x26
				g->clipx1 = x+cx;	if (g->clipx1 > g->g.Width) g->clipx1 = g->g.Width;
 8001698:	f280 80a8 	bge.w	80017ec <_gwinFlushRedraws.part.8+0x234>
 800169c:	8538      	strh	r0, [r7, #40]	; 0x28
 800169e:	4638      	mov	r0, r7
				_GWINwm->vmt->Redraw(gh);
 80016a0:	4a6f      	ldr	r2, [pc, #444]	; (8001860 <_gwinFlushRedraws.part.8+0x2a8>)
	pmutex[0] = 0;
 80016a2:	f8c0 8020 	str.w	r8, [r0, #32]
 80016a6:	6812      	ldr	r2, [r2, #0]
				g->clipy1 = y+cy;	if (g->clipy1 > g->g.Height) g->clipy1 = g->g.Height;
 80016a8:	4573      	cmp	r3, lr
 80016aa:	6812      	ldr	r2, [r2, #0]
 80016ac:	bfa8      	it	ge
 80016ae:	4673      	movge	r3, lr
 80016b0:	8543      	strh	r3, [r0, #42]	; 0x2a
 80016b2:	6913      	ldr	r3, [r2, #16]
 80016b4:	4628      	mov	r0, r5
 80016b6:	4798      	blx	r3
				gdispGUnsetClip(gh->display);
 80016b8:	f8d5 b008 	ldr.w	fp, [r5, #8]
coord_t gdispGGetWidth(GDisplay *g)				{ return g->g.Width; }
 80016bc:	f9bb a008 	ldrsh.w	sl, [fp, #8]
coord_t gdispGGetHeight(GDisplay *g)			{ return g->g.Height; }
 80016c0:	f9bb 900a 	ldrsh.w	r9, [fp, #10]
	while (pmutex[0]) {
 80016c4:	f8db 3020 	ldr.w	r3, [fp, #32]
 80016c8:	b1e3      	cbz	r3, 8001704 <_gwinFlushRedraws.part.8+0x14c>
	if (!q->head)
 80016ca:	6820      	ldr	r0, [r4, #0]
 80016cc:	b130      	cbz	r0, 80016dc <_gwinFlushRedraws.part.8+0x124>
	q->head = t->next;
 80016ce:	6807      	ldr	r7, [r0, #0]
 80016d0:	6027      	str	r7, [r4, #0]
 80016d2:	f005 f911 	bl	80068f8 <free>
	if (!q->head)
 80016d6:	4638      	mov	r0, r7
 80016d8:	2f00      	cmp	r7, #0
 80016da:	d1f8      	bne.n	80016ce <_gwinFlushRedraws.part.8+0x116>
	if (!readyQ.head)
 80016dc:	68a3      	ldr	r3, [r4, #8]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0f0      	beq.n	80016c4 <_gwinFlushRedraws.part.8+0x10c>
	Qadd(&readyQ, me = _gfxCurrentThread);
 80016e2:	6831      	ldr	r1, [r6, #0]
		q->tail->next = t;
 80016e4:	68e2      	ldr	r2, [r4, #12]
	t->next = 0;
 80016e6:	f8c1 8000 	str.w	r8, [r1]
		q->tail->next = t;
 80016ea:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 80016ec:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 80016ee:	60e1      	str	r1, [r4, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 80016f0:	4608      	mov	r0, r1
 80016f2:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 80016f4:	6033      	str	r3, [r6, #0]
	q->head = t->next;
 80016f6:	60a2      	str	r2, [r4, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 80016f8:	f7ff f810 	bl	800071c <_gfxTaskSwitch>
	while (pmutex[0]) {
 80016fc:	f8db 3020 	ldr.w	r3, [fp, #32]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d1e2      	bne.n	80016ca <_gwinFlushRedraws.part.8+0x112>
	pmutex[0] = 1;
 8001704:	2201      	movs	r2, #1
				if (cx <= 0 || cy <= 0 || x >= g->g.Width || y >= g->g.Height) { x = y = cx = cy = 0; }
 8001706:	f1ba 0f00 	cmp.w	sl, #0
 800170a:	f8cb 2020 	str.w	r2, [fp, #32]
 800170e:	f9bb 1008 	ldrsh.w	r1, [fp, #8]
 8001712:	f9bb 200a 	ldrsh.w	r2, [fp, #10]
 8001716:	dd59      	ble.n	80017cc <_gwinFlushRedraws.part.8+0x214>
 8001718:	f1b9 0f00 	cmp.w	r9, #0
 800171c:	dd56      	ble.n	80017cc <_gwinFlushRedraws.part.8+0x214>
 800171e:	2900      	cmp	r1, #0
 8001720:	dd54      	ble.n	80017cc <_gwinFlushRedraws.part.8+0x214>
 8001722:	2a00      	cmp	r2, #0
 8001724:	dc55      	bgt.n	80017d2 <_gwinFlushRedraws.part.8+0x21a>
 8001726:	4699      	mov	r9, r3
				g->clipx0 = x;
 8001728:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
				if (cx <= 0 || cy <= 0 || x >= g->g.Width || y >= g->g.Height) { x = y = cx = cy = 0; }
 800172c:	469a      	mov	sl, r3
				g->clipx1 = x+cx;	if (g->clipx1 > g->g.Width) g->clipx1 = g->g.Width;
 800172e:	f8ab a028 	strh.w	sl, [fp, #40]	; 0x28
				if (how == REDRAW_NOWAIT) {
 8001732:	9b03      	ldr	r3, [sp, #12]
	pmutex[0] = 0;
 8001734:	f8cb 8020 	str.w	r8, [fp, #32]
				g->clipy1 = y+cy;	if (g->clipy1 > g->g.Height) g->clipy1 = g->g.Height;
 8001738:	4591      	cmp	r9, r2
 800173a:	bfa8      	it	ge
 800173c:	4691      	movge	r9, r2
 800173e:	2b01      	cmp	r3, #1
 8001740:	f8ab 902a 	strh.w	r9, [fp, #42]	; 0x2a
 8001744:	f47f af4f 	bne.w	80015e6 <_gwinFlushRedraws.part.8+0x2e>
					RedrawPending |= DOREDRAW_INVISIBLES;
 8001748:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800174c:	6967      	ldr	r7, [r4, #20]
	Qadd(&readyQ, me = _gfxCurrentThread);
 800174e:	4e43      	ldr	r6, [pc, #268]	; (800185c <_gwinFlushRedraws.part.8+0x2a4>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	t->next = 0;
 8001758:	f04f 0800 	mov.w	r8, #0
	while (pmutex[0]) {
 800175c:	b1d7      	cbz	r7, 8001794 <_gwinFlushRedraws.part.8+0x1dc>
	if (!q->head)
 800175e:	6820      	ldr	r0, [r4, #0]
 8001760:	b130      	cbz	r0, 8001770 <_gwinFlushRedraws.part.8+0x1b8>
	q->head = t->next;
 8001762:	6805      	ldr	r5, [r0, #0]
 8001764:	6025      	str	r5, [r4, #0]
 8001766:	f005 f8c7 	bl	80068f8 <free>
	if (!q->head)
 800176a:	4628      	mov	r0, r5
 800176c:	2d00      	cmp	r5, #0
 800176e:	d1f8      	bne.n	8001762 <_gwinFlushRedraws.part.8+0x1aa>
	if (!readyQ.head)
 8001770:	68a3      	ldr	r3, [r4, #8]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0f2      	beq.n	800175c <_gwinFlushRedraws.part.8+0x1a4>
	Qadd(&readyQ, me = _gfxCurrentThread);
 8001776:	6832      	ldr	r2, [r6, #0]
		q->tail->next = t;
 8001778:	68e1      	ldr	r1, [r4, #12]
	t->next = 0;
 800177a:	f8c2 8000 	str.w	r8, [r2]
		q->tail->next = t;
 800177e:	600a      	str	r2, [r1, #0]
	q->head = t->next;
 8001780:	681d      	ldr	r5, [r3, #0]
		q->tail = t;
 8001782:	60e2      	str	r2, [r4, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8001784:	4610      	mov	r0, r2
 8001786:	4619      	mov	r1, r3
	q->head = t->next;
 8001788:	60a5      	str	r5, [r4, #8]
	_gfxCurrentThread = Qpop(&readyQ);
 800178a:	6033      	str	r3, [r6, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 800178c:	f7fe ffc6 	bl	800071c <_gfxTaskSwitch>
	while (pmutex[0]) {
 8001790:	2f00      	cmp	r7, #0
 8001792:	d1e4      	bne.n	800175e <_gwinFlushRedraws.part.8+0x1a6>
	if (psem->cnt < psem->limit)
 8001794:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 8001798:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 800179c:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 80017a0:	4299      	cmp	r1, r3
		psem->cnt++;
 80017a2:	bfc8      	it	gt
 80017a4:	3301      	addgt	r3, #1
 80017a6:	f042 0204 	orr.w	r2, r2, #4
 80017aa:	bfc8      	it	gt
 80017ac:	8223      	strhgt	r3, [r4, #16]
	pmutex[0] = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
 80017b4:	6163      	str	r3, [r4, #20]
	if (psem->cnt < psem->limit)
 80017b6:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
 80017ba:	f9b4 2022 	ldrsh.w	r2, [r4, #34]	; 0x22
 80017be:	429a      	cmp	r2, r3
 80017c0:	dd01      	ble.n	80017c6 <_gwinFlushRedraws.part.8+0x20e>
		psem->cnt++;
 80017c2:	3301      	adds	r3, #1
 80017c4:	8423      	strh	r3, [r4, #32]
}
 80017c6:	b005      	add	sp, #20
 80017c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (cx <= 0 || cy <= 0 || x >= g->g.Width || y >= g->g.Height) { x = y = cx = cy = 0; }
 80017cc:	f04f 0900 	mov.w	r9, #0
 80017d0:	46ca      	mov	sl, r9
				g->clipx1 = x+cx;	if (g->clipx1 > g->g.Width) g->clipx1 = g->g.Width;
 80017d2:	458a      	cmp	sl, r1
				g->clipx0 = x;
 80017d4:	f8cb 8024 	str.w	r8, [fp, #36]	; 0x24
				g->clipx1 = x+cx;	if (g->clipx1 > g->g.Width) g->clipx1 = g->g.Width;
 80017d8:	dda9      	ble.n	800172e <_gwinFlushRedraws.part.8+0x176>
 80017da:	f8ab 1028 	strh.w	r1, [fp, #40]	; 0x28
 80017de:	e7a8      	b.n	8001732 <_gwinFlushRedraws.part.8+0x17a>
				g->clipy0 = y;
 80017e0:	2300      	movs	r3, #0
				g->clipx0 = x;
 80017e2:	f8a2 8024 	strh.w	r8, [r2, #36]	; 0x24
				g->clipy0 = y;
 80017e6:	f8a2 8026 	strh.w	r8, [r2, #38]	; 0x26
 80017ea:	4619      	mov	r1, r3
				g->clipx1 = x+cx;	if (g->clipx1 > g->g.Width) g->clipx1 = g->g.Width;
 80017ec:	9a01      	ldr	r2, [sp, #4]
 80017ee:	8511      	strh	r1, [r2, #40]	; 0x28
 80017f0:	4610      	mov	r0, r2
 80017f2:	e755      	b.n	80016a0 <_gwinFlushRedraws.part.8+0xe8>
 80017f4:	9f01      	ldr	r7, [sp, #4]
				if (cx <= 0 || cy <= 0 || x >= g->g.Width || y >= g->g.Height) { x = y = cx = cy = 0; }
 80017f6:	2300      	movs	r3, #0
 80017f8:	4699      	mov	r9, r3
 80017fa:	469b      	mov	fp, r3
 80017fc:	4619      	mov	r1, r3
 80017fe:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 8001802:	f9b7 e00a 	ldrsh.w	lr, [r7, #10]
 8001806:	e742      	b.n	800168e <_gwinFlushRedraws.part.8+0xd6>
 8001808:	f9b2 e00a 	ldrsh.w	lr, [r2, #10]
 800180c:	45ce      	cmp	lr, r9
 800180e:	dde7      	ble.n	80017e0 <_gwinFlushRedraws.part.8+0x228>
 8001810:	9b02      	ldr	r3, [sp, #8]
 8001812:	9f01      	ldr	r7, [sp, #4]
 8001814:	eb0a 010b 	add.w	r1, sl, fp
 8001818:	444b      	add	r3, r9
 800181a:	b209      	sxth	r1, r1
 800181c:	b21b      	sxth	r3, r3
 800181e:	e736      	b.n	800168e <_gwinFlushRedraws.part.8+0xd6>
				if (y < 0) { cy += y; y = 0; }
 8001820:	9b02      	ldr	r3, [sp, #8]
 8001822:	444b      	add	r3, r9
 8001824:	b21b      	sxth	r3, r3
 8001826:	9302      	str	r3, [sp, #8]
 8001828:	f04f 0900 	mov.w	r9, #0
 800182c:	e71a      	b.n	8001664 <_gwinFlushRedraws.part.8+0xac>
				if (x < 0) { cx += x; x = 0; }
 800182e:	44da      	add	sl, fp
 8001830:	fa0f fa8a 	sxth.w	sl, sl
 8001834:	469b      	mov	fp, r3
 8001836:	e711      	b.n	800165c <_gwinFlushRedraws.part.8+0xa4>
	Qadd(&readyQ, me = _gfxCurrentThread);
 8001838:	4e08      	ldr	r6, [pc, #32]	; (800185c <_gwinFlushRedraws.part.8+0x2a4>)
	t->next = 0;
 800183a:	9301      	str	r3, [sp, #4]
	while ((RedrawPending & DOREDRAW_VISIBLES)) {
 800183c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8001840:	079b      	lsls	r3, r3, #30
 8001842:	f140 8126 	bpl.w	8001a92 <_gwinFlushRedraws.part.8+0x4da>
		RedrawPending &= ~DOREDRAW_VISIBLES;				// Catch new requests
 8001846:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
	return gh ? (GHandle)gfxQueueASyncNext(&gh->wmq) : (GHandle)gfxQueueASyncPeek(&_GWINList);
 800184a:	6a65      	ldr	r5, [r4, #36]	; 0x24
		RedrawPending &= ~DOREDRAW_VISIBLES;				// Catch new requests
 800184c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 8001850:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		for(gh = gwinGetNextWindow(0); gh; gh = gwinGetNextWindow(gh)) {
 8001854:	b94d      	cbnz	r5, 800186a <_gwinFlushRedraws.part.8+0x2b2>
 8001856:	e7f1      	b.n	800183c <_gwinFlushRedraws.part.8+0x284>
 8001858:	200000b8 	.word	0x200000b8
 800185c:	20000948 	.word	0x20000948
 8001860:	20000944 	.word	0x20000944
	return gh ? (GHandle)gfxQueueASyncNext(&gh->wmq) : (GHandle)gfxQueueASyncPeek(&_GWINList);
 8001864:	682d      	ldr	r5, [r5, #0]
		for(gh = gwinGetNextWindow(0); gh; gh = gwinGetNextWindow(gh)) {
 8001866:	2d00      	cmp	r5, #0
 8001868:	d0e8      	beq.n	800183c <_gwinFlushRedraws.part.8+0x284>
			if ((gh->flags & (GWIN_FLG_NEEDREDRAW|GWIN_FLG_SYSVISIBLE)) != (GWIN_FLG_NEEDREDRAW|GWIN_FLG_SYSVISIBLE))
 800186a:	69ab      	ldr	r3, [r5, #24]
 800186c:	f403 4384 	and.w	r3, r3, #16896	; 0x4200
 8001870:	f5b3 4f84 	cmp.w	r3, #16896	; 0x4200
 8001874:	d1f6      	bne.n	8001864 <_gwinFlushRedraws.part.8+0x2ac>
				gdispGSetClip(gh->display, gh->x, gh->y, gh->width, gh->height);
 8001876:	68ab      	ldr	r3, [r5, #8]
 8001878:	9302      	str	r3, [sp, #8]
	while (pmutex[0]) {
 800187a:	6a1b      	ldr	r3, [r3, #32]
 800187c:	f9b5 b00c 	ldrsh.w	fp, [r5, #12]
 8001880:	f9b5 900e 	ldrsh.w	r9, [r5, #14]
 8001884:	f9b5 a010 	ldrsh.w	sl, [r5, #16]
 8001888:	f9b5 8012 	ldrsh.w	r8, [r5, #18]
 800188c:	b1db      	cbz	r3, 80018c6 <_gwinFlushRedraws.part.8+0x30e>
	if (!q->head)
 800188e:	6820      	ldr	r0, [r4, #0]
 8001890:	b130      	cbz	r0, 80018a0 <_gwinFlushRedraws.part.8+0x2e8>
	q->head = t->next;
 8001892:	6807      	ldr	r7, [r0, #0]
 8001894:	6027      	str	r7, [r4, #0]
 8001896:	f005 f82f 	bl	80068f8 <free>
	if (!q->head)
 800189a:	4638      	mov	r0, r7
 800189c:	2f00      	cmp	r7, #0
 800189e:	d1f8      	bne.n	8001892 <_gwinFlushRedraws.part.8+0x2da>
	if (!readyQ.head)
 80018a0:	68a2      	ldr	r2, [r4, #8]
 80018a2:	b162      	cbz	r2, 80018be <_gwinFlushRedraws.part.8+0x306>
	Qadd(&readyQ, me = _gfxCurrentThread);
 80018a4:	6831      	ldr	r1, [r6, #0]
		q->tail->next = t;
 80018a6:	68e3      	ldr	r3, [r4, #12]
	t->next = 0;
 80018a8:	9801      	ldr	r0, [sp, #4]
 80018aa:	6008      	str	r0, [r1, #0]
		q->tail->next = t;
 80018ac:	6019      	str	r1, [r3, #0]
	q->head = t->next;
 80018ae:	6813      	ldr	r3, [r2, #0]
		q->tail = t;
 80018b0:	60e1      	str	r1, [r4, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 80018b2:	4608      	mov	r0, r1
 80018b4:	4611      	mov	r1, r2
	q->head = t->next;
 80018b6:	60a3      	str	r3, [r4, #8]
	_gfxCurrentThread = Qpop(&readyQ);
 80018b8:	6032      	str	r2, [r6, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 80018ba:	f7fe ff2f 	bl	800071c <_gfxTaskSwitch>
 80018be:	9b02      	ldr	r3, [sp, #8]
	while (pmutex[0]) {
 80018c0:	6a1b      	ldr	r3, [r3, #32]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1e3      	bne.n	800188e <_gwinFlushRedraws.part.8+0x2d6>
	pmutex[0] = 1;
 80018c6:	9902      	ldr	r1, [sp, #8]
 80018c8:	2201      	movs	r2, #1
 80018ca:	f1bb 0f00 	cmp.w	fp, #0
 80018ce:	620a      	str	r2, [r1, #32]
 80018d0:	f2c0 80da 	blt.w	8001a88 <_gwinFlushRedraws.part.8+0x4d0>
				if (y < 0) { cy += y; y = 0; }
 80018d4:	f1b9 0f00 	cmp.w	r9, #0
 80018d8:	f2c0 80d0 	blt.w	8001a7c <_gwinFlushRedraws.part.8+0x4c4>
				if (cx <= 0 || cy <= 0 || x >= g->g.Width || y >= g->g.Height) { x = y = cx = cy = 0; }
 80018dc:	f1ba 0f00 	cmp.w	sl, #0
 80018e0:	f340 80b5 	ble.w	8001a4e <_gwinFlushRedraws.part.8+0x496>
 80018e4:	f1b8 0f00 	cmp.w	r8, #0
 80018e8:	f340 80b1 	ble.w	8001a4e <_gwinFlushRedraws.part.8+0x496>
 80018ec:	9902      	ldr	r1, [sp, #8]
 80018ee:	f9b1 0008 	ldrsh.w	r0, [r1, #8]
 80018f2:	4558      	cmp	r0, fp
 80018f4:	f300 80b5 	bgt.w	8001a62 <_gwinFlushRedraws.part.8+0x4aa>
 80018f8:	2300      	movs	r3, #0
 80018fa:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 80018fe:	9f02      	ldr	r7, [sp, #8]
 8001900:	4699      	mov	r9, r3
 8001902:	469b      	mov	fp, r3
 8001904:	461a      	mov	r2, r3
				g->clipx1 = x+cx;	if (g->clipx1 > g->g.Width) g->clipx1 = g->g.Width;
 8001906:	4282      	cmp	r2, r0
				g->clipx0 = x;
 8001908:	f8a7 b024 	strh.w	fp, [r7, #36]	; 0x24
				g->clipy0 = y;
 800190c:	f8a7 9026 	strh.w	r9, [r7, #38]	; 0x26
				g->clipx1 = x+cx;	if (g->clipx1 > g->g.Width) g->clipx1 = g->g.Width;
 8001910:	f340 8099 	ble.w	8001a46 <_gwinFlushRedraws.part.8+0x48e>
 8001914:	8538      	strh	r0, [r7, #40]	; 0x28
				_GWINwm->vmt->Redraw(gh);
 8001916:	4a62      	ldr	r2, [pc, #392]	; (8001aa0 <_gwinFlushRedraws.part.8+0x4e8>)
	pmutex[0] = 0;
 8001918:	9801      	ldr	r0, [sp, #4]
 800191a:	6812      	ldr	r2, [r2, #0]
 800191c:	6238      	str	r0, [r7, #32]
 800191e:	6812      	ldr	r2, [r2, #0]
				g->clipy1 = y+cy;	if (g->clipy1 > g->g.Height) g->clipy1 = g->g.Height;
 8001920:	428b      	cmp	r3, r1
 8001922:	bfa8      	it	ge
 8001924:	460b      	movge	r3, r1
 8001926:	857b      	strh	r3, [r7, #42]	; 0x2a
 8001928:	4628      	mov	r0, r5
 800192a:	6913      	ldr	r3, [r2, #16]
 800192c:	4798      	blx	r3
				gdispGUnsetClip(gh->display);
 800192e:	f8d5 a008 	ldr.w	sl, [r5, #8]
coord_t gdispGGetWidth(GDisplay *g)				{ return g->g.Width; }
 8001932:	f9ba 8008 	ldrsh.w	r8, [sl, #8]
coord_t gdispGGetHeight(GDisplay *g)			{ return g->g.Height; }
 8001936:	f9ba 900a 	ldrsh.w	r9, [sl, #10]
	while (pmutex[0]) {
 800193a:	f8da 3020 	ldr.w	r3, [sl, #32]
 800193e:	b1e3      	cbz	r3, 800197a <_gwinFlushRedraws.part.8+0x3c2>
	if (!q->head)
 8001940:	6820      	ldr	r0, [r4, #0]
 8001942:	b130      	cbz	r0, 8001952 <_gwinFlushRedraws.part.8+0x39a>
	q->head = t->next;
 8001944:	6807      	ldr	r7, [r0, #0]
 8001946:	6027      	str	r7, [r4, #0]
 8001948:	f004 ffd6 	bl	80068f8 <free>
	if (!q->head)
 800194c:	4638      	mov	r0, r7
 800194e:	2f00      	cmp	r7, #0
 8001950:	d1f8      	bne.n	8001944 <_gwinFlushRedraws.part.8+0x38c>
	if (!readyQ.head)
 8001952:	68a3      	ldr	r3, [r4, #8]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d0f0      	beq.n	800193a <_gwinFlushRedraws.part.8+0x382>
	Qadd(&readyQ, me = _gfxCurrentThread);
 8001958:	6831      	ldr	r1, [r6, #0]
		q->tail->next = t;
 800195a:	68e2      	ldr	r2, [r4, #12]
	t->next = 0;
 800195c:	9801      	ldr	r0, [sp, #4]
 800195e:	6008      	str	r0, [r1, #0]
		q->tail->next = t;
 8001960:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 8001962:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 8001964:	60e1      	str	r1, [r4, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8001966:	4608      	mov	r0, r1
 8001968:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 800196a:	6033      	str	r3, [r6, #0]
	q->head = t->next;
 800196c:	60a2      	str	r2, [r4, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 800196e:	f7fe fed5 	bl	800071c <_gfxTaskSwitch>
	while (pmutex[0]) {
 8001972:	f8da 3020 	ldr.w	r3, [sl, #32]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1e2      	bne.n	8001940 <_gwinFlushRedraws.part.8+0x388>
	pmutex[0] = 1;
 800197a:	2201      	movs	r2, #1
				if (cx <= 0 || cy <= 0 || x >= g->g.Width || y >= g->g.Height) { x = y = cx = cy = 0; }
 800197c:	f1b8 0f00 	cmp.w	r8, #0
 8001980:	f8ca 2020 	str.w	r2, [sl, #32]
 8001984:	f9ba 1008 	ldrsh.w	r1, [sl, #8]
 8001988:	f9ba 200a 	ldrsh.w	r2, [sl, #10]
 800198c:	dd49      	ble.n	8001a22 <_gwinFlushRedraws.part.8+0x46a>
 800198e:	f1b9 0f00 	cmp.w	r9, #0
 8001992:	dd46      	ble.n	8001a22 <_gwinFlushRedraws.part.8+0x46a>
 8001994:	2900      	cmp	r1, #0
 8001996:	dd44      	ble.n	8001a22 <_gwinFlushRedraws.part.8+0x46a>
 8001998:	2a00      	cmp	r2, #0
 800199a:	dc45      	bgt.n	8001a28 <_gwinFlushRedraws.part.8+0x470>
 800199c:	4699      	mov	r9, r3
				g->clipx0 = x;
 800199e:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
				if (cx <= 0 || cy <= 0 || x >= g->g.Width || y >= g->g.Height) { x = y = cx = cy = 0; }
 80019a2:	4698      	mov	r8, r3
 80019a4:	9b01      	ldr	r3, [sp, #4]
				g->clipx1 = x+cx;	if (g->clipx1 > g->g.Width) g->clipx1 = g->g.Width;
 80019a6:	f8aa 8028 	strh.w	r8, [sl, #40]	; 0x28
	pmutex[0] = 0;
 80019aa:	f8ca 3020 	str.w	r3, [sl, #32]
				if (how == REDRAW_NOWAIT) {
 80019ae:	9b03      	ldr	r3, [sp, #12]
				g->clipy1 = y+cy;	if (g->clipy1 > g->g.Height) g->clipy1 = g->g.Height;
 80019b0:	4591      	cmp	r9, r2
 80019b2:	bfa8      	it	ge
 80019b4:	4691      	movge	r9, r2
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	f8aa 902a 	strh.w	r9, [sl, #42]	; 0x2a
 80019bc:	f47f af52 	bne.w	8001864 <_gwinFlushRedraws.part.8+0x2ac>
	return gh ? (GHandle)gfxQueueASyncNext(&gh->wmq) : (GHandle)gfxQueueASyncPeek(&_GWINList);
 80019c0:	682d      	ldr	r5, [r5, #0]
					while((gh = gwinGetNextWindow(gh))) {
 80019c2:	2d00      	cmp	r5, #0
 80019c4:	f43f aef7 	beq.w	80017b6 <_gwinFlushRedraws.part.8+0x1fe>
						if ((gh->flags & (GWIN_FLG_NEEDREDRAW|GWIN_FLG_SYSVISIBLE)) == (GWIN_FLG_NEEDREDRAW|GWIN_FLG_SYSVISIBLE)) {
 80019c8:	69ab      	ldr	r3, [r5, #24]
 80019ca:	f403 4384 	and.w	r3, r3, #16896	; 0x4200
 80019ce:	f5b3 4f84 	cmp.w	r3, #16896	; 0x4200
 80019d2:	d1f5      	bne.n	80019c0 <_gwinFlushRedraws.part.8+0x408>
							RedrawPending |= DOREDRAW_VISIBLES;
 80019d4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80019d8:	f8d4 8014 	ldr.w	r8, [r4, #20]
	Qadd(&readyQ, me = _gfxCurrentThread);
 80019dc:	4e31      	ldr	r6, [pc, #196]	; (8001aa4 <_gwinFlushRedraws.part.8+0x4ec>)
 80019de:	f043 0302 	orr.w	r3, r3, #2
 80019e2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	t->next = 0;
 80019e6:	2700      	movs	r7, #0
	while (pmutex[0]) {
 80019e8:	f1b8 0f00 	cmp.w	r8, #0
 80019ec:	f43f aed2 	beq.w	8001794 <_gwinFlushRedraws.part.8+0x1dc>
	if (!q->head)
 80019f0:	6820      	ldr	r0, [r4, #0]
 80019f2:	b130      	cbz	r0, 8001a02 <_gwinFlushRedraws.part.8+0x44a>
	q->head = t->next;
 80019f4:	6805      	ldr	r5, [r0, #0]
 80019f6:	6025      	str	r5, [r4, #0]
 80019f8:	f004 ff7e 	bl	80068f8 <free>
	if (!q->head)
 80019fc:	4628      	mov	r0, r5
 80019fe:	2d00      	cmp	r5, #0
 8001a00:	d1f8      	bne.n	80019f4 <_gwinFlushRedraws.part.8+0x43c>
	if (!readyQ.head)
 8001a02:	68a3      	ldr	r3, [r4, #8]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d0ef      	beq.n	80019e8 <_gwinFlushRedraws.part.8+0x430>
	Qadd(&readyQ, me = _gfxCurrentThread);
 8001a08:	6831      	ldr	r1, [r6, #0]
		q->tail->next = t;
 8001a0a:	68e2      	ldr	r2, [r4, #12]
	t->next = 0;
 8001a0c:	600f      	str	r7, [r1, #0]
		q->tail->next = t;
 8001a0e:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 8001a10:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 8001a12:	60e1      	str	r1, [r4, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8001a14:	4608      	mov	r0, r1
 8001a16:	4619      	mov	r1, r3
	q->head = t->next;
 8001a18:	60a2      	str	r2, [r4, #8]
	_gfxCurrentThread = Qpop(&readyQ);
 8001a1a:	6033      	str	r3, [r6, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8001a1c:	f7fe fe7e 	bl	800071c <_gfxTaskSwitch>
 8001a20:	e7e2      	b.n	80019e8 <_gwinFlushRedraws.part.8+0x430>
				if (cx <= 0 || cy <= 0 || x >= g->g.Width || y >= g->g.Height) { x = y = cx = cy = 0; }
 8001a22:	f04f 0900 	mov.w	r9, #0
 8001a26:	46c8      	mov	r8, r9
				g->clipx0 = x;
 8001a28:	9b01      	ldr	r3, [sp, #4]
 8001a2a:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
				g->clipx1 = x+cx;	if (g->clipx1 > g->g.Width) g->clipx1 = g->g.Width;
 8001a2e:	4588      	cmp	r8, r1
 8001a30:	ddb8      	ble.n	80019a4 <_gwinFlushRedraws.part.8+0x3ec>
 8001a32:	f8aa 1028 	strh.w	r1, [sl, #40]	; 0x28
 8001a36:	e7b8      	b.n	80019aa <_gwinFlushRedraws.part.8+0x3f2>
 8001a38:	4618      	mov	r0, r3
				g->clipx0 = x;
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	9f01      	ldr	r7, [sp, #4]
 8001a3e:	8497      	strh	r7, [r2, #36]	; 0x24
				g->clipy0 = y;
 8001a40:	2300      	movs	r3, #0
 8001a42:	84d7      	strh	r7, [r2, #38]	; 0x26
 8001a44:	461a      	mov	r2, r3
				g->clipx1 = x+cx;	if (g->clipx1 > g->g.Width) g->clipx1 = g->g.Width;
 8001a46:	9802      	ldr	r0, [sp, #8]
 8001a48:	8502      	strh	r2, [r0, #40]	; 0x28
 8001a4a:	4607      	mov	r7, r0
 8001a4c:	e763      	b.n	8001916 <_gwinFlushRedraws.part.8+0x35e>
 8001a4e:	9f02      	ldr	r7, [sp, #8]
				if (cx <= 0 || cy <= 0 || x >= g->g.Width || y >= g->g.Height) { x = y = cx = cy = 0; }
 8001a50:	2300      	movs	r3, #0
 8001a52:	4699      	mov	r9, r3
 8001a54:	469b      	mov	fp, r3
 8001a56:	461a      	mov	r2, r3
 8001a58:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 8001a5c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001a60:	e751      	b.n	8001906 <_gwinFlushRedraws.part.8+0x34e>
 8001a62:	460b      	mov	r3, r1
 8001a64:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8001a68:	4549      	cmp	r1, r9
 8001a6a:	dde5      	ble.n	8001a38 <_gwinFlushRedraws.part.8+0x480>
 8001a6c:	eb0a 020b 	add.w	r2, sl, fp
 8001a70:	44c8      	add	r8, r9
 8001a72:	b212      	sxth	r2, r2
 8001a74:	fa0f f388 	sxth.w	r3, r8
 8001a78:	9f02      	ldr	r7, [sp, #8]
 8001a7a:	e744      	b.n	8001906 <_gwinFlushRedraws.part.8+0x34e>
				if (y < 0) { cy += y; y = 0; }
 8001a7c:	44c8      	add	r8, r9
 8001a7e:	fa0f f888 	sxth.w	r8, r8
 8001a82:	f04f 0900 	mov.w	r9, #0
 8001a86:	e729      	b.n	80018dc <_gwinFlushRedraws.part.8+0x324>
				if (x < 0) { cx += x; x = 0; }
 8001a88:	44da      	add	sl, fp
 8001a8a:	fa0f fa8a 	sxth.w	sl, sl
 8001a8e:	469b      	mov	fp, r3
 8001a90:	e720      	b.n	80018d4 <_gwinFlushRedraws.part.8+0x31c>
	if (how == REDRAW_WAIT || how == REDRAW_NOWAIT)
 8001a92:	9b03      	ldr	r3, [sp, #12]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	f67f ae8e 	bls.w	80017b6 <_gwinFlushRedraws.part.8+0x1fe>
}
 8001a9a:	b005      	add	sp, #20
 8001a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001aa0:	20000944 	.word	0x20000944
 8001aa4:	20000948 	.word	0x20000948

08001aa8 <_gosInit>:
 8001aa8:	b430      	push	{r4, r5}
 8001aaa:	4b08      	ldr	r3, [pc, #32]	; (8001acc <_gosInit+0x24>)
 8001aac:	4908      	ldr	r1, [pc, #32]	; (8001ad0 <_gosInit+0x28>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2518      	movs	r5, #24
 8001ab2:	2402      	movs	r4, #2
 8001ab4:	f103 004c 	add.w	r0, r3, #76	; 0x4c
 8001ab8:	655d      	str	r5, [r3, #84]	; 0x54
 8001aba:	651c      	str	r4, [r3, #80]	; 0x50
 8001abc:	6008      	str	r0, [r1, #0]
 8001abe:	60da      	str	r2, [r3, #12]
 8001ac0:	609a      	str	r2, [r3, #8]
 8001ac2:	64da      	str	r2, [r3, #76]	; 0x4c
 8001ac4:	659a      	str	r2, [r3, #88]	; 0x58
 8001ac6:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ac8:	bc30      	pop	{r4, r5}
 8001aca:	4770      	bx	lr
 8001acc:	200000b8 	.word	0x200000b8
 8001ad0:	20000948 	.word	0x20000948

08001ad4 <_gosPostInit>:
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop

08001ad8 <_gosDeinit>:
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop

08001adc <gfxHalt>:

/*********************************************************
 * Exit everything functions
 *********************************************************/

void gfxHalt(const char *msg) {
 8001adc:	b082      	sub	sp, #8
	#else
		volatile uint32_t	dummy;
		(void)				msg;

		while(1)
			dummy++;
 8001ade:	9b01      	ldr	r3, [sp, #4]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	9301      	str	r3, [sp, #4]
 8001ae4:	e7fb      	b.n	8001ade <gfxHalt+0x2>
 8001ae6:	bf00      	nop

08001ae8 <gfxExit>:
	#endif
}

void gfxExit(void) {
 8001ae8:	b082      	sub	sp, #8
		ExitProcess(0);
	#else
		volatile uint32_t	dummy;

		while(1)
			dummy++;
 8001aea:	9b01      	ldr	r3, [sp, #4]
 8001aec:	3301      	adds	r3, #1
 8001aee:	9301      	str	r3, [sp, #4]
 8001af0:	e7fb      	b.n	8001aea <gfxExit+0x2>
 8001af2:	bf00      	nop

08001af4 <_gfxStartThread>:
							: [oldtcxt] "m" (oldt->cxt)
							: "memory");
	}

	static __attribute__((pcs("aapcs-vfp"),naked)) void _gfxStartThread(thread *oldt, thread *newt) {
		newt->cxt = (void *)(((unsigned)newt + newt->size) & ~7);
 8001af4:	688b      	ldr	r3, [r1, #8]
 8001af6:	440b      	add	r3, r1
 8001af8:	f023 0307 	bic.w	r3, r3, #7
 8001afc:	614b      	str	r3, [r1, #20]
		__asm__ volatile (	"push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}	\n\t"
 8001afe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b02:	ed2d 8a10 	vpush	{s16-s31}
 8001b06:	f8c0 d014 	str.w	sp, [r0, #20]
 8001b0a:	f8d1 d014 	ldr.w	sp, [r1, #20]
							: [newtcxt] "=m" (newt->cxt)
							: [oldtcxt] "m" (oldt->cxt)
							: "memory");

		// Run the users function
		gfxThreadExit(_gfxCurrentThread->fn(_gfxCurrentThread->param));
 8001b0e:	4c14      	ldr	r4, [pc, #80]	; (8001b60 <_gfxStartThread+0x6c>)
 8001b10:	6823      	ldr	r3, [r4, #0]
 8001b12:	68da      	ldr	r2, [r3, #12]
 8001b14:	6918      	ldr	r0, [r3, #16]
 8001b16:	4790      	blx	r2
// This routine is not currently public - but it could be.
void gfxThreadExit(threadreturn_t ret) {
	thread	*me;

	// Save the results in case someone is waiting
	me = _gfxCurrentThread;
 8001b18:	6823      	ldr	r3, [r4, #0]
	me->param = (void *)ret;
	me->flags |= FLG_THD_DEAD;
 8001b1a:	685a      	ldr	r2, [r3, #4]
	me->param = (void *)ret;
 8001b1c:	6118      	str	r0, [r3, #16]
	me->flags |= FLG_THD_DEAD;
 8001b1e:	f042 0104 	orr.w	r1, r2, #4

	// Add us to the dead list if we need deallocation as we can't free ourselves.
	// If someone is waiting on the thread they will do the cleanup.
	if ((me->flags & (FLG_THD_ALLOC|FLG_THD_WAIT)) == FLG_THD_ALLOC)
 8001b22:	f002 0209 	and.w	r2, r2, #9
 8001b26:	2a01      	cmp	r2, #1
	me->flags |= FLG_THD_DEAD;
 8001b28:	6059      	str	r1, [r3, #4]
	if (q->head) {
 8001b2a:	490e      	ldr	r1, [pc, #56]	; (8001b64 <_gfxStartThread+0x70>)
	if ((me->flags & (FLG_THD_ALLOC|FLG_THD_WAIT)) == FLG_THD_ALLOC)
 8001b2c:	d008      	beq.n	8001b40 <_gfxStartThread+0x4c>
	if (!q->head)
 8001b2e:	688a      	ldr	r2, [r1, #8]
 8001b30:	b182      	cbz	r2, 8001b54 <_gfxStartThread+0x60>
	// Set the next thread. Exit if it was the last thread
	if (!(_gfxCurrentThread = Qpop(&readyQ)))
		gfxExit();

	// Switch to the new thread
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8001b32:	4618      	mov	r0, r3
	q->head = t->next;
 8001b34:	6813      	ldr	r3, [r2, #0]
 8001b36:	608b      	str	r3, [r1, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8001b38:	4611      	mov	r1, r2
	if (!(_gfxCurrentThread = Qpop(&readyQ)))
 8001b3a:	6022      	str	r2, [r4, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8001b3c:	f7fe bdee 	b.w	800071c <_gfxTaskSwitch>
	if (q->head) {
 8001b40:	680a      	ldr	r2, [r1, #0]
	t->next = 0;
 8001b42:	2000      	movs	r0, #0
 8001b44:	6018      	str	r0, [r3, #0]
	if (q->head) {
 8001b46:	b142      	cbz	r2, 8001b5a <_gfxStartThread+0x66>
		q->tail->next = t;
 8001b48:	684a      	ldr	r2, [r1, #4]
		q->tail = t;
 8001b4a:	604b      	str	r3, [r1, #4]
		q->tail->next = t;
 8001b4c:	6013      	str	r3, [r2, #0]
	if (!q->head)
 8001b4e:	688a      	ldr	r2, [r1, #8]
 8001b50:	2a00      	cmp	r2, #0
 8001b52:	d1ee      	bne.n	8001b32 <_gfxStartThread+0x3e>
	if (!(_gfxCurrentThread = Qpop(&readyQ)))
 8001b54:	6022      	str	r2, [r4, #0]
		gfxExit();
 8001b56:	f7ff ffc7 	bl	8001ae8 <gfxExit>
		q->head = q->tail = t;
 8001b5a:	604b      	str	r3, [r1, #4]
 8001b5c:	600b      	str	r3, [r1, #0]
 8001b5e:	e7e6      	b.n	8001b2e <_gfxStartThread+0x3a>
 8001b60:	20000948 	.word	0x20000948
 8001b64:	200000b8 	.word	0x200000b8

08001b68 <gfxSystemLock>:
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop

08001b6c <gfxSystemUnlock>:
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop

08001b70 <gfxMutexInit>:
 8001b70:	2300      	movs	r3, #0
 8001b72:	6003      	str	r3, [r0, #0]
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop

08001b78 <gfxMutexEnter>:
void gfxMutexEnter(gfxMutex *pmutex) {
 8001b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!q->head)
 8001b7a:	4d11      	ldr	r5, [pc, #68]	; (8001bc0 <gfxMutexEnter+0x48>)
	Qadd(&readyQ, me = _gfxCurrentThread);
 8001b7c:	4e11      	ldr	r6, [pc, #68]	; (8001bc4 <gfxMutexEnter+0x4c>)
void gfxMutexEnter(gfxMutex *pmutex) {
 8001b7e:	4607      	mov	r7, r0
	while (pmutex[0]) {
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	b1d3      	cbz	r3, 8001bba <gfxMutexEnter+0x42>
	if (!q->head)
 8001b84:	6828      	ldr	r0, [r5, #0]
 8001b86:	b130      	cbz	r0, 8001b96 <gfxMutexEnter+0x1e>
	q->head = t->next;
 8001b88:	6804      	ldr	r4, [r0, #0]
 8001b8a:	602c      	str	r4, [r5, #0]
 8001b8c:	f004 feb4 	bl	80068f8 <free>
	if (!q->head)
 8001b90:	4620      	mov	r0, r4
 8001b92:	2c00      	cmp	r4, #0
 8001b94:	d1f8      	bne.n	8001b88 <gfxMutexEnter+0x10>
	if (!readyQ.head)
 8001b96:	68ab      	ldr	r3, [r5, #8]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0f1      	beq.n	8001b80 <gfxMutexEnter+0x8>
	Qadd(&readyQ, me = _gfxCurrentThread);
 8001b9c:	6830      	ldr	r0, [r6, #0]
		q->tail->next = t;
 8001b9e:	68ea      	ldr	r2, [r5, #12]
		q->tail = t;
 8001ba0:	60e8      	str	r0, [r5, #12]
	t->next = 0;
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	6001      	str	r1, [r0, #0]
		q->tail->next = t;
 8001ba6:	6010      	str	r0, [r2, #0]
	q->head = t->next;
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	60aa      	str	r2, [r5, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8001bac:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 8001bae:	6033      	str	r3, [r6, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8001bb0:	f7fe fdb4 	bl	800071c <_gfxTaskSwitch>
	while (pmutex[0]) {
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1e4      	bne.n	8001b84 <gfxMutexEnter+0xc>
	pmutex[0] = 1;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	603b      	str	r3, [r7, #0]
}
 8001bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bc0:	200000b8 	.word	0x200000b8
 8001bc4:	20000948 	.word	0x20000948

08001bc8 <gfxMutexExit>:
	pmutex[0] = 0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	6003      	str	r3, [r0, #0]
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop

08001bd0 <gfxSemInit>:
	psem->cnt = val;
 8001bd0:	8001      	strh	r1, [r0, #0]
	psem->limit = limit;
 8001bd2:	8042      	strh	r2, [r0, #2]
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop

08001bd8 <gfxSemWait>:
bool_t gfxSemWait(gfxSem *psem, delaytime_t ms) {
 8001bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001bdc:	4607      	mov	r7, r0
	switch (ms) {
 8001bde:	2900      	cmp	r1, #0
 8001be0:	d03d      	beq.n	8001c5e <gfxSemWait+0x86>
 8001be2:	1c4a      	adds	r2, r1, #1
 8001be4:	d034      	beq.n	8001c50 <gfxSemWait+0x78>
		delay = gfxMillisecondsToTicks(ms);
 8001be6:	4608      	mov	r0, r1
 8001be8:	f7fe fb80 	bl	80002ec <gfxMillisecondsToTicks>
		if (!delay) delay = 1;
 8001bec:	2800      	cmp	r0, #0
 8001bee:	bf14      	ite	ne
 8001bf0:	4606      	movne	r6, r0
 8001bf2:	2601      	moveq	r6, #1
		starttm = gfxSystemTicks();
 8001bf4:	f7fe fb74 	bl	80002e0 <gfxSystemTicks>
 8001bf8:	4681      	mov	r9, r0
	if (!q->head)
 8001bfa:	4d1d      	ldr	r5, [pc, #116]	; (8001c70 <gfxSemWait+0x98>)
	Qadd(&readyQ, me = _gfxCurrentThread);
 8001bfc:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8001c74 <gfxSemWait+0x9c>
	while (psem->cnt <= 0) {
 8001c00:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	dc2d      	bgt.n	8001c64 <gfxSemWait+0x8c>
		switch (delay) {
 8001c08:	b336      	cbz	r6, 8001c58 <gfxSemWait+0x80>
 8001c0a:	1c73      	adds	r3, r6, #1
 8001c0c:	d005      	beq.n	8001c1a <gfxSemWait+0x42>
			if (gfxSystemTicks() - starttm >= delay)
 8001c0e:	f7fe fb67 	bl	80002e0 <gfxSystemTicks>
 8001c12:	eba0 0009 	sub.w	r0, r0, r9
 8001c16:	4286      	cmp	r6, r0
 8001c18:	d91e      	bls.n	8001c58 <gfxSemWait+0x80>
	if (!q->head)
 8001c1a:	6828      	ldr	r0, [r5, #0]
 8001c1c:	b130      	cbz	r0, 8001c2c <gfxSemWait+0x54>
	q->head = t->next;
 8001c1e:	6804      	ldr	r4, [r0, #0]
 8001c20:	602c      	str	r4, [r5, #0]
 8001c22:	f004 fe69 	bl	80068f8 <free>
	if (!q->head)
 8001c26:	4620      	mov	r0, r4
 8001c28:	2c00      	cmp	r4, #0
 8001c2a:	d1f8      	bne.n	8001c1e <gfxSemWait+0x46>
	if (!readyQ.head)
 8001c2c:	68ab      	ldr	r3, [r5, #8]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d0e6      	beq.n	8001c00 <gfxSemWait+0x28>
	Qadd(&readyQ, me = _gfxCurrentThread);
 8001c32:	f8d8 0000 	ldr.w	r0, [r8]
		q->tail->next = t;
 8001c36:	68ea      	ldr	r2, [r5, #12]
		q->tail = t;
 8001c38:	60e8      	str	r0, [r5, #12]
	t->next = 0;
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	6001      	str	r1, [r0, #0]
		q->tail->next = t;
 8001c3e:	6010      	str	r0, [r2, #0]
	q->head = t->next;
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	60aa      	str	r2, [r5, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8001c44:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 8001c46:	f8c8 3000 	str.w	r3, [r8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8001c4a:	f7fe fd67 	bl	800071c <_gfxTaskSwitch>
 8001c4e:	e7d7      	b.n	8001c00 <gfxSemWait+0x28>
		delay = TIME_INFINITE;
 8001c50:	460e      	mov	r6, r1
	starttm = 0;
 8001c52:	f04f 0900 	mov.w	r9, #0
 8001c56:	e7d0      	b.n	8001bfa <gfxSemWait+0x22>
				return FALSE;
 8001c58:	2000      	movs	r0, #0
 8001c5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		delay = TIME_IMMEDIATE;
 8001c5e:	460e      	mov	r6, r1
	starttm = 0;
 8001c60:	4689      	mov	r9, r1
 8001c62:	e7ca      	b.n	8001bfa <gfxSemWait+0x22>
	psem->cnt--;
 8001c64:	3b01      	subs	r3, #1
 8001c66:	803b      	strh	r3, [r7, #0]
	return TRUE;
 8001c68:	20ff      	movs	r0, #255	; 0xff
 8001c6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001c6e:	bf00      	nop
 8001c70:	200000b8 	.word	0x200000b8
 8001c74:	20000948 	.word	0x20000948

08001c78 <RedrawTimerFn>:
	static void RedrawTimerFn(void *param) {
 8001c78:	b508      	push	{r3, lr}
	if (!RedrawPending)
 8001c7a:	4807      	ldr	r0, [pc, #28]	; (8001c98 <RedrawTimerFn+0x20>)
 8001c7c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8001c80:	b143      	cbz	r3, 8001c94 <RedrawTimerFn+0x1c>
	else if (how == REDRAW_NOWAIT && !gfxSemWait(&gwinsem, TIME_IMMEDIATE))
 8001c82:	3020      	adds	r0, #32
 8001c84:	2100      	movs	r1, #0
 8001c86:	f7ff ffa7 	bl	8001bd8 <gfxSemWait>
 8001c8a:	b118      	cbz	r0, 8001c94 <RedrawTimerFn+0x1c>
 8001c8c:	2001      	movs	r0, #1
	}
 8001c8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001c92:	e491      	b.n	80015b8 <_gwinFlushRedraws.part.8>
 8001c94:	bd08      	pop	{r3, pc}
 8001c96:	bf00      	nop
 8001c98:	200000b8 	.word	0x200000b8

08001c9c <gfxSemWaitI>:
	if (psem->cnt <= 0)
 8001c9c:	f9b0 3000 	ldrsh.w	r3, [r0]
 8001ca0:	2b00      	cmp	r3, #0
	psem->cnt--;
 8001ca2:	bfc3      	ittte	gt
 8001ca4:	f103 33ff 	addgt.w	r3, r3, #4294967295
 8001ca8:	8003      	strhgt	r3, [r0, #0]
	return TRUE;
 8001caa:	20ff      	movgt	r0, #255	; 0xff
		return FALSE;
 8001cac:	2000      	movle	r0, #0
}
 8001cae:	4770      	bx	lr

08001cb0 <gfxSemSignal>:
	if (psem->cnt < psem->limit)
 8001cb0:	f9b0 3000 	ldrsh.w	r3, [r0]
 8001cb4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8001cb8:	429a      	cmp	r2, r3
		psem->cnt++;
 8001cba:	bfc4      	itt	gt
 8001cbc:	3301      	addgt	r3, #1
 8001cbe:	8003      	strhgt	r3, [r0, #0]
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop

08001cc4 <gfxSemSignalI>:
	if (psem->cnt < psem->limit)
 8001cc4:	f9b0 3000 	ldrsh.w	r3, [r0]
 8001cc8:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8001ccc:	429a      	cmp	r2, r3
		psem->cnt++;
 8001cce:	bfc4      	itt	gt
 8001cd0:	3301      	addgt	r3, #1
 8001cd2:	8003      	strhgt	r3, [r0, #0]
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop

08001cd8 <gfxSleepMilliseconds>:
	switch (ms) {
 8001cd8:	2800      	cmp	r0, #0
 8001cda:	d049      	beq.n	8001d70 <gfxSleepMilliseconds+0x98>
void gfxSleepMilliseconds(delaytime_t ms) {
 8001cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	switch (ms) {
 8001ce0:	1c43      	adds	r3, r0, #1
 8001ce2:	4d24      	ldr	r5, [pc, #144]	; (8001d74 <gfxSleepMilliseconds+0x9c>)
 8001ce4:	d11c      	bne.n	8001d20 <gfxSleepMilliseconds+0x48>
 8001ce6:	4f24      	ldr	r7, [pc, #144]	; (8001d78 <gfxSleepMilliseconds+0xa0>)
 8001ce8:	68ae      	ldr	r6, [r5, #8]
	t->next = 0;
 8001cea:	f04f 0800 	mov.w	r8, #0
	if (!q->head)
 8001cee:	6828      	ldr	r0, [r5, #0]
 8001cf0:	b130      	cbz	r0, 8001d00 <gfxSleepMilliseconds+0x28>
	q->head = t->next;
 8001cf2:	6804      	ldr	r4, [r0, #0]
 8001cf4:	602c      	str	r4, [r5, #0]
 8001cf6:	f004 fdff 	bl	80068f8 <free>
	if (!q->head)
 8001cfa:	4620      	mov	r0, r4
 8001cfc:	2c00      	cmp	r4, #0
 8001cfe:	d1f8      	bne.n	8001cf2 <gfxSleepMilliseconds+0x1a>
	if (!readyQ.head)
 8001d00:	2e00      	cmp	r6, #0
 8001d02:	d0f4      	beq.n	8001cee <gfxSleepMilliseconds+0x16>
	Qadd(&readyQ, me = _gfxCurrentThread);
 8001d04:	6838      	ldr	r0, [r7, #0]
		q->tail->next = t;
 8001d06:	68eb      	ldr	r3, [r5, #12]
	t->next = 0;
 8001d08:	f8c0 8000 	str.w	r8, [r0]
		q->tail->next = t;
 8001d0c:	6018      	str	r0, [r3, #0]
	q->head = t->next;
 8001d0e:	6833      	ldr	r3, [r6, #0]
 8001d10:	60ab      	str	r3, [r5, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8001d12:	4631      	mov	r1, r6
	_gfxCurrentThread = Qpop(&readyQ);
 8001d14:	603e      	str	r6, [r7, #0]
		q->tail = t;
 8001d16:	60e8      	str	r0, [r5, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8001d18:	f7fe fd00 	bl	800071c <_gfxTaskSwitch>
 8001d1c:	461e      	mov	r6, r3
 8001d1e:	e7e6      	b.n	8001cee <gfxSleepMilliseconds+0x16>
	delay = gfxMillisecondsToTicks(ms);
 8001d20:	f7fe fae4 	bl	80002ec <gfxMillisecondsToTicks>
 8001d24:	4680      	mov	r8, r0
	starttm = gfxSystemTicks();
 8001d26:	f7fe fadb 	bl	80002e0 <gfxSystemTicks>
	Qadd(&readyQ, me = _gfxCurrentThread);
 8001d2a:	4c13      	ldr	r4, [pc, #76]	; (8001d78 <gfxSleepMilliseconds+0xa0>)
	t->next = 0;
 8001d2c:	2700      	movs	r7, #0
	starttm = gfxSystemTicks();
 8001d2e:	4606      	mov	r6, r0
	if (!q->head)
 8001d30:	6828      	ldr	r0, [r5, #0]
 8001d32:	b140      	cbz	r0, 8001d46 <gfxSleepMilliseconds+0x6e>
	q->head = t->next;
 8001d34:	f8d0 9000 	ldr.w	r9, [r0]
 8001d38:	f8c5 9000 	str.w	r9, [r5]
 8001d3c:	f004 fddc 	bl	80068f8 <free>
	if (!q->head)
 8001d40:	4648      	mov	r0, r9
 8001d42:	2800      	cmp	r0, #0
 8001d44:	d1f6      	bne.n	8001d34 <gfxSleepMilliseconds+0x5c>
	if (!readyQ.head)
 8001d46:	68ab      	ldr	r3, [r5, #8]
 8001d48:	b15b      	cbz	r3, 8001d62 <gfxSleepMilliseconds+0x8a>
	Qadd(&readyQ, me = _gfxCurrentThread);
 8001d4a:	6821      	ldr	r1, [r4, #0]
		q->tail->next = t;
 8001d4c:	68ea      	ldr	r2, [r5, #12]
	t->next = 0;
 8001d4e:	600f      	str	r7, [r1, #0]
		q->tail->next = t;
 8001d50:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 8001d52:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 8001d54:	60e9      	str	r1, [r5, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8001d56:	4608      	mov	r0, r1
	q->head = t->next;
 8001d58:	60aa      	str	r2, [r5, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8001d5a:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 8001d5c:	6023      	str	r3, [r4, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8001d5e:	f7fe fcdd 	bl	800071c <_gfxTaskSwitch>
	} while (gfxSystemTicks() - starttm < delay);
 8001d62:	f7fe fabd 	bl	80002e0 <gfxSystemTicks>
 8001d66:	1b80      	subs	r0, r0, r6
 8001d68:	4580      	cmp	r8, r0
 8001d6a:	d8e1      	bhi.n	8001d30 <gfxSleepMilliseconds+0x58>
 8001d6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	200000b8 	.word	0x200000b8
 8001d78:	20000948 	.word	0x20000948

08001d7c <gfxSleepMicroseconds>:
	switch (ms) {
 8001d7c:	2800      	cmp	r0, #0
 8001d7e:	d04e      	beq.n	8001e1e <gfxSleepMicroseconds+0xa2>
 8001d80:	1c42      	adds	r2, r0, #1
void gfxSleepMicroseconds(delaytime_t ms) {
 8001d82:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	switch (ms) {
 8001d86:	d11d      	bne.n	8001dc4 <gfxSleepMicroseconds+0x48>
 8001d88:	4d25      	ldr	r5, [pc, #148]	; (8001e20 <gfxSleepMicroseconds+0xa4>)
 8001d8a:	4f26      	ldr	r7, [pc, #152]	; (8001e24 <gfxSleepMicroseconds+0xa8>)
 8001d8c:	68ae      	ldr	r6, [r5, #8]
	t->next = 0;
 8001d8e:	f04f 0800 	mov.w	r8, #0
	if (!q->head)
 8001d92:	6828      	ldr	r0, [r5, #0]
 8001d94:	b130      	cbz	r0, 8001da4 <gfxSleepMicroseconds+0x28>
	q->head = t->next;
 8001d96:	6804      	ldr	r4, [r0, #0]
 8001d98:	602c      	str	r4, [r5, #0]
 8001d9a:	f004 fdad 	bl	80068f8 <free>
	if (!q->head)
 8001d9e:	4620      	mov	r0, r4
 8001da0:	2c00      	cmp	r4, #0
 8001da2:	d1f8      	bne.n	8001d96 <gfxSleepMicroseconds+0x1a>
	if (!readyQ.head)
 8001da4:	2e00      	cmp	r6, #0
 8001da6:	d0f4      	beq.n	8001d92 <gfxSleepMicroseconds+0x16>
	Qadd(&readyQ, me = _gfxCurrentThread);
 8001da8:	6838      	ldr	r0, [r7, #0]
		q->tail->next = t;
 8001daa:	68eb      	ldr	r3, [r5, #12]
	t->next = 0;
 8001dac:	f8c0 8000 	str.w	r8, [r0]
		q->tail->next = t;
 8001db0:	6018      	str	r0, [r3, #0]
	q->head = t->next;
 8001db2:	6833      	ldr	r3, [r6, #0]
 8001db4:	60ab      	str	r3, [r5, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8001db6:	4631      	mov	r1, r6
	_gfxCurrentThread = Qpop(&readyQ);
 8001db8:	603e      	str	r6, [r7, #0]
		q->tail = t;
 8001dba:	60e8      	str	r0, [r5, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8001dbc:	f7fe fcae 	bl	800071c <_gfxTaskSwitch>
 8001dc0:	461e      	mov	r6, r3
 8001dc2:	e7e6      	b.n	8001d92 <gfxSleepMicroseconds+0x16>
	delay = gfxMillisecondsToTicks(ms/1000);
 8001dc4:	4a18      	ldr	r2, [pc, #96]	; (8001e28 <gfxSleepMicroseconds+0xac>)
 8001dc6:	4d16      	ldr	r5, [pc, #88]	; (8001e20 <gfxSleepMicroseconds+0xa4>)
	Qadd(&readyQ, me = _gfxCurrentThread);
 8001dc8:	4c16      	ldr	r4, [pc, #88]	; (8001e24 <gfxSleepMicroseconds+0xa8>)
	delay = gfxMillisecondsToTicks(ms/1000);
 8001dca:	fba2 2300 	umull	r2, r3, r2, r0
 8001dce:	0998      	lsrs	r0, r3, #6
 8001dd0:	f7fe fa8c 	bl	80002ec <gfxMillisecondsToTicks>
 8001dd4:	4680      	mov	r8, r0
	starttm = gfxSystemTicks();
 8001dd6:	f7fe fa83 	bl	80002e0 <gfxSystemTicks>
	t->next = 0;
 8001dda:	2700      	movs	r7, #0
	starttm = gfxSystemTicks();
 8001ddc:	4606      	mov	r6, r0
	if (!q->head)
 8001dde:	6828      	ldr	r0, [r5, #0]
 8001de0:	b140      	cbz	r0, 8001df4 <gfxSleepMicroseconds+0x78>
	q->head = t->next;
 8001de2:	f8d0 9000 	ldr.w	r9, [r0]
 8001de6:	f8c5 9000 	str.w	r9, [r5]
 8001dea:	f004 fd85 	bl	80068f8 <free>
	if (!q->head)
 8001dee:	4648      	mov	r0, r9
 8001df0:	2800      	cmp	r0, #0
 8001df2:	d1f6      	bne.n	8001de2 <gfxSleepMicroseconds+0x66>
	if (!readyQ.head)
 8001df4:	68ab      	ldr	r3, [r5, #8]
 8001df6:	b15b      	cbz	r3, 8001e10 <gfxSleepMicroseconds+0x94>
	Qadd(&readyQ, me = _gfxCurrentThread);
 8001df8:	6821      	ldr	r1, [r4, #0]
		q->tail->next = t;
 8001dfa:	68ea      	ldr	r2, [r5, #12]
	t->next = 0;
 8001dfc:	600f      	str	r7, [r1, #0]
		q->tail->next = t;
 8001dfe:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 8001e00:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 8001e02:	60e9      	str	r1, [r5, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8001e04:	4608      	mov	r0, r1
	q->head = t->next;
 8001e06:	60aa      	str	r2, [r5, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8001e08:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 8001e0a:	6023      	str	r3, [r4, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8001e0c:	f7fe fc86 	bl	800071c <_gfxTaskSwitch>
	} while (gfxSystemTicks() - starttm < delay);
 8001e10:	f7fe fa66 	bl	80002e0 <gfxSystemTicks>
 8001e14:	1b80      	subs	r0, r0, r6
 8001e16:	4580      	cmp	r8, r0
 8001e18:	d8e1      	bhi.n	8001dde <gfxSleepMicroseconds+0x62>
 8001e1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001e1e:	4770      	bx	lr
 8001e20:	200000b8 	.word	0x200000b8
 8001e24:	20000948 	.word	0x20000948
 8001e28:	10624dd3 	.word	0x10624dd3

08001e2c <_gosThreadsInit>:
void _gosThreadsInit(void) {
 8001e2c:	b430      	push	{r4, r5}
	q->head = q->tail = 0;
 8001e2e:	4b08      	ldr	r3, [pc, #32]	; (8001e50 <_gosThreadsInit+0x24>)
	_gfxCurrentThread = &mainthread;
 8001e30:	4908      	ldr	r1, [pc, #32]	; (8001e54 <_gosThreadsInit+0x28>)
	q->head = q->tail = 0;
 8001e32:	2200      	movs	r2, #0
	mainthread.size = sizeof(thread);
 8001e34:	2518      	movs	r5, #24
	mainthread.flags = FLG_THD_MAIN;
 8001e36:	2402      	movs	r4, #2
	_gfxCurrentThread = &mainthread;
 8001e38:	f103 004c 	add.w	r0, r3, #76	; 0x4c
	mainthread.size = sizeof(thread);
 8001e3c:	655d      	str	r5, [r3, #84]	; 0x54
	mainthread.flags = FLG_THD_MAIN;
 8001e3e:	651c      	str	r4, [r3, #80]	; 0x50
	_gfxCurrentThread = &mainthread;
 8001e40:	6008      	str	r0, [r1, #0]
	q->head = q->tail = 0;
 8001e42:	60da      	str	r2, [r3, #12]
 8001e44:	609a      	str	r2, [r3, #8]
	mainthread.next = 0;
 8001e46:	64da      	str	r2, [r3, #76]	; 0x4c
	mainthread.fn = 0;
 8001e48:	659a      	str	r2, [r3, #88]	; 0x58
	mainthread.param = 0;
 8001e4a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001e4c:	bc30      	pop	{r4, r5}
 8001e4e:	4770      	bx	lr
 8001e50:	200000b8 	.word	0x200000b8
 8001e54:	20000948 	.word	0x20000948

08001e58 <gfxThreadMe>:
	return (gfxThreadHandle)_gfxCurrentThread;
 8001e58:	4b01      	ldr	r3, [pc, #4]	; (8001e60 <gfxThreadMe+0x8>)
}
 8001e5a:	6818      	ldr	r0, [r3, #0]
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	20000948 	.word	0x20000948

08001e64 <gfxYield>:
void gfxYield(void) {
 8001e64:	b538      	push	{r3, r4, r5, lr}
	if (!q->head)
 8001e66:	4d0e      	ldr	r5, [pc, #56]	; (8001ea0 <gfxYield+0x3c>)
 8001e68:	6828      	ldr	r0, [r5, #0]
 8001e6a:	b130      	cbz	r0, 8001e7a <gfxYield+0x16>
	q->head = t->next;
 8001e6c:	6804      	ldr	r4, [r0, #0]
 8001e6e:	602c      	str	r4, [r5, #0]
 8001e70:	f004 fd42 	bl	80068f8 <free>
	if (!q->head)
 8001e74:	4620      	mov	r0, r4
 8001e76:	2c00      	cmp	r4, #0
 8001e78:	d1f8      	bne.n	8001e6c <gfxYield+0x8>
	if (!readyQ.head)
 8001e7a:	68ab      	ldr	r3, [r5, #8]
 8001e7c:	b173      	cbz	r3, 8001e9c <gfxYield+0x38>
	Qadd(&readyQ, me = _gfxCurrentThread);
 8001e7e:	4a09      	ldr	r2, [pc, #36]	; (8001ea4 <gfxYield+0x40>)
		q->tail->next = t;
 8001e80:	68e9      	ldr	r1, [r5, #12]
	Qadd(&readyQ, me = _gfxCurrentThread);
 8001e82:	6810      	ldr	r0, [r2, #0]
		q->tail = t;
 8001e84:	60e8      	str	r0, [r5, #12]
	t->next = 0;
 8001e86:	2400      	movs	r4, #0
 8001e88:	6004      	str	r4, [r0, #0]
		q->tail->next = t;
 8001e8a:	6008      	str	r0, [r1, #0]
	q->head = t->next;
 8001e8c:	6819      	ldr	r1, [r3, #0]
 8001e8e:	60a9      	str	r1, [r5, #8]
	_gfxCurrentThread = Qpop(&readyQ);
 8001e90:	6013      	str	r3, [r2, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8001e92:	4619      	mov	r1, r3
}
 8001e94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8001e98:	f7fe bc40 	b.w	800071c <_gfxTaskSwitch>
}
 8001e9c:	bd38      	pop	{r3, r4, r5, pc}
 8001e9e:	bf00      	nop
 8001ea0:	200000b8 	.word	0x200000b8
 8001ea4:	20000948 	.word	0x20000948

08001ea8 <gfxThreadExit>:
void gfxThreadExit(threadreturn_t ret) {
 8001ea8:	b510      	push	{r4, lr}
	me = _gfxCurrentThread;
 8001eaa:	4c13      	ldr	r4, [pc, #76]	; (8001ef8 <gfxThreadExit+0x50>)
 8001eac:	6823      	ldr	r3, [r4, #0]
	me->flags |= FLG_THD_DEAD;
 8001eae:	685a      	ldr	r2, [r3, #4]
	me->param = (void *)ret;
 8001eb0:	6118      	str	r0, [r3, #16]
	me->flags |= FLG_THD_DEAD;
 8001eb2:	f042 0104 	orr.w	r1, r2, #4
	if ((me->flags & (FLG_THD_ALLOC|FLG_THD_WAIT)) == FLG_THD_ALLOC)
 8001eb6:	f002 0209 	and.w	r2, r2, #9
 8001eba:	2a01      	cmp	r2, #1
	me->flags |= FLG_THD_DEAD;
 8001ebc:	6059      	str	r1, [r3, #4]
	if (q->head) {
 8001ebe:	490f      	ldr	r1, [pc, #60]	; (8001efc <gfxThreadExit+0x54>)
	if ((me->flags & (FLG_THD_ALLOC|FLG_THD_WAIT)) == FLG_THD_ALLOC)
 8001ec0:	d00a      	beq.n	8001ed8 <gfxThreadExit+0x30>
	if (!q->head)
 8001ec2:	688a      	ldr	r2, [r1, #8]
 8001ec4:	b192      	cbz	r2, 8001eec <gfxThreadExit+0x44>
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8001ec6:	4618      	mov	r0, r3
	q->head = t->next;
 8001ec8:	6813      	ldr	r3, [r2, #0]
 8001eca:	608b      	str	r3, [r1, #8]
	if (!(_gfxCurrentThread = Qpop(&readyQ)))
 8001ecc:	6022      	str	r2, [r4, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8001ece:	4611      	mov	r1, r2

	// We never get back here as we didn't re-queue ourselves
}
 8001ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8001ed4:	f7fe bc22 	b.w	800071c <_gfxTaskSwitch>
	if (q->head) {
 8001ed8:	680a      	ldr	r2, [r1, #0]
	t->next = 0;
 8001eda:	2000      	movs	r0, #0
 8001edc:	6018      	str	r0, [r3, #0]
	if (q->head) {
 8001ede:	b142      	cbz	r2, 8001ef2 <gfxThreadExit+0x4a>
		q->tail->next = t;
 8001ee0:	684a      	ldr	r2, [r1, #4]
		q->tail = t;
 8001ee2:	604b      	str	r3, [r1, #4]
		q->tail->next = t;
 8001ee4:	6013      	str	r3, [r2, #0]
	if (!q->head)
 8001ee6:	688a      	ldr	r2, [r1, #8]
 8001ee8:	2a00      	cmp	r2, #0
 8001eea:	d1ec      	bne.n	8001ec6 <gfxThreadExit+0x1e>
	if (!(_gfxCurrentThread = Qpop(&readyQ)))
 8001eec:	6022      	str	r2, [r4, #0]
		gfxExit();
 8001eee:	f7ff fdfb 	bl	8001ae8 <gfxExit>
		q->head = q->tail = t;
 8001ef2:	604b      	str	r3, [r1, #4]
 8001ef4:	600b      	str	r3, [r1, #0]
 8001ef6:	e7e4      	b.n	8001ec2 <gfxThreadExit+0x1a>
 8001ef8:	20000948 	.word	0x20000948
 8001efc:	200000b8 	.word	0x200000b8

08001f00 <gfxThreadCreate>:

gfxThreadHandle gfxThreadCreate(void *stackarea, size_t stacksz, threadpriority_t prio, DECLARE_THREAD_FUNCTION((*fn),p), void *param) {
 8001f00:	b570      	push	{r4, r5, r6, lr}
	thread *	t;
	thread *	me;
	(void)		prio;

	// Ensure we have a minimum stack size
	if (stacksz < sizeof(thread)+64) {
 8001f02:	2957      	cmp	r1, #87	; 0x57
gfxThreadHandle gfxThreadCreate(void *stackarea, size_t stacksz, threadpriority_t prio, DECLARE_THREAD_FUNCTION((*fn),p), void *param) {
 8001f04:	b082      	sub	sp, #8
	if (stacksz < sizeof(thread)+64) {
 8001f06:	d919      	bls.n	8001f3c <gfxThreadCreate+0x3c>
		stacksz = sizeof(thread)+64;
		stackarea = 0;
	}

	if (stackarea) {
 8001f08:	b1c8      	cbz	r0, 8001f3e <gfxThreadCreate+0x3e>
		t = (thread *)stackarea;
		t->flags = 0;
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	6042      	str	r2, [r0, #4]
 8001f0e:	4604      	mov	r4, r0
	t->size = stacksz;
	t->fn = fn;
	t->param = param;

	// Add the current thread to the queue because we are starting a new thread.
	me = _gfxCurrentThread;
 8001f10:	4e12      	ldr	r6, [pc, #72]	; (8001f5c <gfxThreadCreate+0x5c>)
	if (q->head) {
 8001f12:	4d13      	ldr	r5, [pc, #76]	; (8001f60 <gfxThreadCreate+0x60>)
	me = _gfxCurrentThread;
 8001f14:	6832      	ldr	r2, [r6, #0]
	if (q->head) {
 8001f16:	68a8      	ldr	r0, [r5, #8]
	t->size = stacksz;
 8001f18:	60a1      	str	r1, [r4, #8]
	t->fn = fn;
 8001f1a:	60e3      	str	r3, [r4, #12]
	t->next = 0;
 8001f1c:	2100      	movs	r1, #0
	t->param = param;
 8001f1e:	9b06      	ldr	r3, [sp, #24]
 8001f20:	6123      	str	r3, [r4, #16]
	t->next = 0;
 8001f22:	6011      	str	r1, [r2, #0]
	if (q->head) {
 8001f24:	b1c0      	cbz	r0, 8001f58 <gfxThreadCreate+0x58>
		q->tail->next = t;
 8001f26:	68eb      	ldr	r3, [r5, #12]
 8001f28:	601a      	str	r2, [r3, #0]
	Qadd(&readyQ, me);
	_gfxCurrentThread = t;

	_gfxStartThread(me, t);
 8001f2a:	4610      	mov	r0, r2
 8001f2c:	4621      	mov	r1, r4
 8001f2e:	60ea      	str	r2, [r5, #12]
	_gfxCurrentThread = t;
 8001f30:	6034      	str	r4, [r6, #0]
	_gfxStartThread(me, t);
 8001f32:	f7ff fddf 	bl	8001af4 <_gfxStartThread>

	// Return the new thread handle
	return t;
 8001f36:	4620      	mov	r0, r4
}
 8001f38:	b002      	add	sp, #8
 8001f3a:	bd70      	pop	{r4, r5, r6, pc}
		stacksz = sizeof(thread)+64;
 8001f3c:	2158      	movs	r1, #88	; 0x58
		return malloc(sz);
 8001f3e:	4608      	mov	r0, r1
 8001f40:	9301      	str	r3, [sp, #4]
 8001f42:	9100      	str	r1, [sp, #0]
 8001f44:	f004 fcd0 	bl	80068e8 <malloc>
		if (!t)
 8001f48:	2800      	cmp	r0, #0
 8001f4a:	d0f5      	beq.n	8001f38 <gfxThreadCreate+0x38>
		t->flags = FLG_THD_ALLOC;
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	6042      	str	r2, [r0, #4]
 8001f50:	4604      	mov	r4, r0
 8001f52:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8001f56:	e7db      	b.n	8001f10 <gfxThreadCreate+0x10>
		q->head = q->tail = t;
 8001f58:	60aa      	str	r2, [r5, #8]
 8001f5a:	e7e6      	b.n	8001f2a <gfxThreadCreate+0x2a>
 8001f5c:	20000948 	.word	0x20000948
 8001f60:	200000b8 	.word	0x200000b8

08001f64 <gfxThreadWait>:

threadreturn_t gfxThreadWait(gfxThreadHandle th) {
 8001f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	thread *		t;

	t = th;
	if (t == _gfxCurrentThread)
 8001f68:	4e1d      	ldr	r6, [pc, #116]	; (8001fe0 <gfxThreadWait+0x7c>)
 8001f6a:	6833      	ldr	r3, [r6, #0]
 8001f6c:	4298      	cmp	r0, r3
 8001f6e:	d032      	beq.n	8001fd6 <gfxThreadWait+0x72>
		return -1;

	// Mark that we are waiting
	t->flags |= FLG_THD_WAIT;
 8001f70:	6843      	ldr	r3, [r0, #4]
	if (!q->head)
 8001f72:	4d1c      	ldr	r5, [pc, #112]	; (8001fe4 <gfxThreadWait+0x80>)
	t->flags |= FLG_THD_WAIT;
 8001f74:	f043 0308 	orr.w	r3, r3, #8

	// Wait for the thread to die
	while(!(t->flags & FLG_THD_DEAD))
 8001f78:	0759      	lsls	r1, r3, #29
 8001f7a:	4607      	mov	r7, r0
	t->flags |= FLG_THD_WAIT;
 8001f7c:	6043      	str	r3, [r0, #4]
	t->next = 0;
 8001f7e:	f04f 0800 	mov.w	r8, #0
	while(!(t->flags & FLG_THD_DEAD))
 8001f82:	d41a      	bmi.n	8001fba <gfxThreadWait+0x56>
	if (!q->head)
 8001f84:	6828      	ldr	r0, [r5, #0]
 8001f86:	b130      	cbz	r0, 8001f96 <gfxThreadWait+0x32>
	q->head = t->next;
 8001f88:	6804      	ldr	r4, [r0, #0]
 8001f8a:	602c      	str	r4, [r5, #0]
		free(ptr);
 8001f8c:	f004 fcb4 	bl	80068f8 <free>
	if (!q->head)
 8001f90:	4620      	mov	r0, r4
 8001f92:	2c00      	cmp	r4, #0
 8001f94:	d1f8      	bne.n	8001f88 <gfxThreadWait+0x24>
	if (!readyQ.head)
 8001f96:	68ab      	ldr	r3, [r5, #8]
 8001f98:	b163      	cbz	r3, 8001fb4 <gfxThreadWait+0x50>
	Qadd(&readyQ, me = _gfxCurrentThread);
 8001f9a:	6831      	ldr	r1, [r6, #0]
		q->tail->next = t;
 8001f9c:	68ea      	ldr	r2, [r5, #12]
	t->next = 0;
 8001f9e:	f8c1 8000 	str.w	r8, [r1]
		q->tail->next = t;
 8001fa2:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 8001fa4:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 8001fa6:	60e9      	str	r1, [r5, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8001fa8:	4608      	mov	r0, r1
	q->head = t->next;
 8001faa:	60aa      	str	r2, [r5, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8001fac:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 8001fae:	6033      	str	r3, [r6, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8001fb0:	f7fe fbb4 	bl	800071c <_gfxTaskSwitch>
 8001fb4:	687b      	ldr	r3, [r7, #4]
	while(!(t->flags & FLG_THD_DEAD))
 8001fb6:	0759      	lsls	r1, r3, #29
 8001fb8:	d5e4      	bpl.n	8001f84 <gfxThreadWait+0x20>

	// Unmark
	t->flags &= ~FLG_THD_WAIT;

	// Clean up resources if needed
	if (t->flags & FLG_THD_ALLOC)
 8001fba:	07da      	lsls	r2, r3, #31
 8001fbc:	d405      	bmi.n	8001fca <gfxThreadWait+0x66>
	t->flags &= ~FLG_THD_WAIT;
 8001fbe:	f023 0308 	bic.w	r3, r3, #8
 8001fc2:	607b      	str	r3, [r7, #4]
		gfxFree(t);

	// Return the status left by the dead process
	return (threadreturn_t)t->param;
 8001fc4:	6938      	ldr	r0, [r7, #16]
 8001fc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001fca:	4638      	mov	r0, r7
 8001fcc:	f004 fc94 	bl	80068f8 <free>
 8001fd0:	6938      	ldr	r0, [r7, #16]
 8001fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
 8001fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8001fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001fde:	bf00      	nop
 8001fe0:	20000948 	.word	0x20000948
 8001fe4:	200000b8 	.word	0x200000b8

08001fe8 <_gosHeapInit>:
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop

08001fec <gfxAlloc>:
		return malloc(sz);
 8001fec:	f004 bc7c 	b.w	80068e8 <malloc>

08001ff0 <gfxRealloc>:
		return realloc(ptr, newsz);
 8001ff0:	4611      	mov	r1, r2
 8001ff2:	f004 bd4b 	b.w	8006a8c <realloc>
 8001ff6:	bf00      	nop

08001ff8 <gfxFree>:
		free(ptr);
 8001ff8:	f004 bc7e 	b.w	80068f8 <free>

08001ffc <_gdriverInit>:
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop

08002000 <_gdriverDeinit>:
// The system initialization.
void _gdriverInit(void) {
}

// The system de-initialization.
void _gdriverDeinit(void) {
 8002000:	b570      	push	{r4, r5, r6, lr}
	while(dhead)
 8002002:	4e0a      	ldr	r6, [pc, #40]	; (800202c <_gdriverDeinit+0x2c>)
 8002004:	6e74      	ldr	r4, [r6, #100]	; 0x64
 8002006:	b90c      	cbnz	r4, 800200c <_gdriverDeinit+0xc>
 8002008:	e00e      	b.n	8002028 <_gdriverDeinit+0x28>
 800200a:	462c      	mov	r4, r5
			}
		}
	}

	// Call the deinit()
	if (driver->vmt->deinit)
 800200c:	6863      	ldr	r3, [r4, #4]
		dhead = driver->driverchain;
 800200e:	6825      	ldr	r5, [r4, #0]
	if (driver->vmt->deinit)
 8002010:	691b      	ldr	r3, [r3, #16]
		dhead = driver->driverchain;
 8002012:	6675      	str	r5, [r6, #100]	; 0x64
	if (driver->vmt->deinit)
 8002014:	b113      	cbz	r3, 800201c <_gdriverDeinit+0x1c>
		driver->vmt->deinit(driver);
 8002016:	4620      	mov	r0, r4
 8002018:	4798      	blx	r3
 800201a:	6e75      	ldr	r5, [r6, #100]	; 0x64
 800201c:	4620      	mov	r0, r4
 800201e:	f004 fc6b 	bl	80068f8 <free>
	while(dhead)
 8002022:	2d00      	cmp	r5, #0
 8002024:	d1f1      	bne.n	800200a <_gdriverDeinit+0xa>
 8002026:	bd70      	pop	{r4, r5, r6, pc}
 8002028:	bd70      	pop	{r4, r5, r6, pc}
 800202a:	bf00      	nop
 800202c:	200000b8 	.word	0x200000b8

08002030 <gdriverRegister>:
GDriver *gdriverRegister(const GDriverVMT *vmt, void *param) {
 8002030:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for(pd = dhead; pd; pd = pd->driverchain) {
 8002034:	4f24      	ldr	r7, [pc, #144]	; (80020c8 <gdriverRegister+0x98>)
 8002036:	f8d7 9064 	ldr.w	r9, [r7, #100]	; 0x64
GDriver *gdriverRegister(const GDriverVMT *vmt, void *param) {
 800203a:	4606      	mov	r6, r0
 800203c:	4688      	mov	r8, r1
	for(pd = dhead; pd; pd = pd->driverchain) {
 800203e:	f1b9 0f00 	cmp.w	r9, #0
 8002042:	d036      	beq.n	80020b2 <gdriverRegister+0x82>
 8002044:	2400      	movs	r4, #0
 8002046:	8802      	ldrh	r2, [r0, #0]
 8002048:	4625      	mov	r5, r4
 800204a:	4649      	mov	r1, r9
		if (pd->vmt == vmt)
 800204c:	6848      	ldr	r0, [r1, #4]
	for(pd = dhead; pd; pd = pd->driverchain) {
 800204e:	6809      	ldr	r1, [r1, #0]
 8002050:	8803      	ldrh	r3, [r0, #0]
 8002052:	42b0      	cmp	r0, r6
 8002054:	bf08      	it	eq
 8002056:	3501      	addeq	r5, #1
 8002058:	4293      	cmp	r3, r2
 800205a:	bf08      	it	eq
 800205c:	3401      	addeq	r4, #1
 800205e:	2900      	cmp	r1, #0
 8002060:	d1f4      	bne.n	800204c <gdriverRegister+0x1c>
		return malloc(sz);
 8002062:	2101      	movs	r1, #1
 8002064:	6870      	ldr	r0, [r6, #4]
 8002066:	f004 fc13 	bl	8006890 <calloc>
	if (!pd)
 800206a:	4682      	mov	sl, r0
 800206c:	b320      	cbz	r0, 80020b8 <gdriverRegister+0x88>
	if (vmt->init && !vmt->init(pd, param, dinstance, sinstance)) {
 800206e:	f8d6 b008 	ldr.w	fp, [r6, #8]
	pd->vmt = vmt;
 8002072:	6046      	str	r6, [r0, #4]
	if (vmt->init && !vmt->init(pd, param, dinstance, sinstance)) {
 8002074:	f1bb 0f00 	cmp.w	fp, #0
 8002078:	d007      	beq.n	800208a <gdriverRegister+0x5a>
 800207a:	4623      	mov	r3, r4
 800207c:	462a      	mov	r2, r5
 800207e:	4641      	mov	r1, r8
 8002080:	47d8      	blx	fp
 8002082:	4604      	mov	r4, r0
 8002084:	b1d0      	cbz	r0, 80020bc <gdriverRegister+0x8c>
 8002086:	f8d7 9064 	ldr.w	r9, [r7, #100]	; 0x64
	if (dhead)
 800208a:	f1b9 0f00 	cmp.w	r9, #0
 800208e:	d00d      	beq.n	80020ac <gdriverRegister+0x7c>
		dtail->driverchain = pd;
 8002090:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002092:	f8c3 a000 	str.w	sl, [r3]
	if (vmt->postinit)
 8002096:	68f3      	ldr	r3, [r6, #12]
	dtail = pd;
 8002098:	f8c7 a068 	str.w	sl, [r7, #104]	; 0x68
		vmt->postinit(pd);
 800209c:	4650      	mov	r0, sl
	if (vmt->postinit)
 800209e:	b11b      	cbz	r3, 80020a8 <gdriverRegister+0x78>
		vmt->postinit(pd);
 80020a0:	4798      	blx	r3
 80020a2:	4650      	mov	r0, sl
 80020a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
}
 80020a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dhead = pd;
 80020ac:	f8c7 a064 	str.w	sl, [r7, #100]	; 0x64
 80020b0:	e7f1      	b.n	8002096 <gdriverRegister+0x66>
	dinstance = sinstance = 0;
 80020b2:	464c      	mov	r4, r9
 80020b4:	464d      	mov	r5, r9
 80020b6:	e7d4      	b.n	8002062 <gdriverRegister+0x32>
 80020b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		free(ptr);
 80020bc:	4650      	mov	r0, sl
 80020be:	f004 fc1b 	bl	80068f8 <free>
		return 0;
 80020c2:	4620      	mov	r0, r4
 80020c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020c8:	200000b8 	.word	0x200000b8

080020cc <gdriverUnRegister>:
	if (!driver)
 80020cc:	b1f0      	cbz	r0, 800210c <gdriverUnRegister+0x40>
	if (dhead == driver)
 80020ce:	4910      	ldr	r1, [pc, #64]	; (8002110 <gdriverUnRegister+0x44>)
 80020d0:	6e4a      	ldr	r2, [r1, #100]	; 0x64
 80020d2:	4290      	cmp	r0, r2
void gdriverUnRegister(GDriver *driver) {
 80020d4:	b510      	push	{r4, lr}
	if (dhead == driver)
 80020d6:	d103      	bne.n	80020e0 <gdriverUnRegister+0x14>
 80020d8:	e015      	b.n	8002106 <gdriverUnRegister+0x3a>
			if (pd->driverchain == driver) {
 80020da:	4298      	cmp	r0, r3
 80020dc:	d00d      	beq.n	80020fa <gdriverUnRegister+0x2e>
 80020de:	461a      	mov	r2, r3
		for(pd = dhead; pd->driverchain; pd = pd->driverchain) {
 80020e0:	6813      	ldr	r3, [r2, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f9      	bne.n	80020da <gdriverUnRegister+0xe>
	if (driver->vmt->deinit)
 80020e6:	6843      	ldr	r3, [r0, #4]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	4604      	mov	r4, r0
 80020ec:	b103      	cbz	r3, 80020f0 <gdriverUnRegister+0x24>
		driver->vmt->deinit(driver);
 80020ee:	4798      	blx	r3
 80020f0:	4620      	mov	r0, r4

	// Cleanup
	gfxFree(driver);
}
 80020f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020f6:	f004 bbff 	b.w	80068f8 <free>
				pd->driverchain = driver->driverchain;
 80020fa:	6803      	ldr	r3, [r0, #0]
 80020fc:	6013      	str	r3, [r2, #0]
				if (!pd->driverchain)
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1f1      	bne.n	80020e6 <gdriverUnRegister+0x1a>
					dtail = pd;
 8002102:	668a      	str	r2, [r1, #104]	; 0x68
 8002104:	e7ef      	b.n	80020e6 <gdriverUnRegister+0x1a>
		dhead = driver->driverchain;
 8002106:	6803      	ldr	r3, [r0, #0]
 8002108:	664b      	str	r3, [r1, #100]	; 0x64
 800210a:	e7ec      	b.n	80020e6 <gdriverUnRegister+0x1a>
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	200000b8 	.word	0x200000b8

08002114 <gdriverGetInstance>:
	GDriver		*pd;
	unsigned	sinstance;

	// Loop to find the system instance
	sinstance = 0;
	for(pd = dhead; pd; pd = pd->driverchain) {
 8002114:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <gdriverGetInstance+0x30>)
 8002116:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002118:	b193      	cbz	r3, 8002140 <gdriverGetInstance+0x2c>
GDriver *gdriverGetInstance(uint16_t type, unsigned instance) {
 800211a:	b410      	push	{r4}
	for(pd = dhead; pd; pd = pd->driverchain) {
 800211c:	2400      	movs	r4, #0
 800211e:	e001      	b.n	8002124 <gdriverGetInstance+0x10>
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	b14b      	cbz	r3, 8002138 <gdriverGetInstance+0x24>
		if (pd->vmt->type == type) {
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	8812      	ldrh	r2, [r2, #0]
 8002128:	4282      	cmp	r2, r0
 800212a:	d1f9      	bne.n	8002120 <gdriverGetInstance+0xc>
			if (sinstance == instance)
 800212c:	42a1      	cmp	r1, r4
 800212e:	d003      	beq.n	8002138 <gdriverGetInstance+0x24>
	for(pd = dhead; pd; pd = pd->driverchain) {
 8002130:	681b      	ldr	r3, [r3, #0]
				return pd;
			sinstance++;
 8002132:	3401      	adds	r4, #1
	for(pd = dhead; pd; pd = pd->driverchain) {
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1f5      	bne.n	8002124 <gdriverGetInstance+0x10>
		}
	}
	return 0;
}
 8002138:	4618      	mov	r0, r3
 800213a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	4618      	mov	r0, r3
 8002142:	4770      	bx	lr
 8002144:	200000b8 	.word	0x200000b8

08002148 <gdriverInstanceCount>:
	GDriver		*pd;
	unsigned	sinstance;

	// Loop to count the system instances
	sinstance = 0;
	for(pd = dhead; pd; pd = pd->driverchain) {
 8002148:	4b07      	ldr	r3, [pc, #28]	; (8002168 <gdriverInstanceCount+0x20>)
 800214a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800214c:	b153      	cbz	r3, 8002164 <gdriverInstanceCount+0x1c>
 800214e:	2200      	movs	r2, #0
		if (pd->vmt->type == type)
 8002150:	6859      	ldr	r1, [r3, #4]
	for(pd = dhead; pd; pd = pd->driverchain) {
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	8809      	ldrh	r1, [r1, #0]
 8002156:	4281      	cmp	r1, r0
 8002158:	bf08      	it	eq
 800215a:	3201      	addeq	r2, #1
 800215c:	2b00      	cmp	r3, #0
 800215e:	d1f7      	bne.n	8002150 <gdriverInstanceCount+0x8>
			sinstance++;
	}
	return sinstance;
}
 8002160:	4610      	mov	r0, r2
 8002162:	4770      	bx	lr
	sinstance = 0;
 8002164:	461a      	mov	r2, r3
	return sinstance;
 8002166:	e7fb      	b.n	8002160 <gdriverInstanceCount+0x18>
 8002168:	200000b8 	.word	0x200000b8

0800216c <gdriverGetNext>:

GDriver *gdriverGetNext(uint16_t type, GDriver *driver) {
	driver = driver ? driver->driverchain : dhead;
 800216c:	b151      	cbz	r1, 8002184 <gdriverGetNext+0x18>
 800216e:	680b      	ldr	r3, [r1, #0]

	while(driver && driver->vmt->type != type)
 8002170:	b133      	cbz	r3, 8002180 <gdriverGetNext+0x14>
 8002172:	685a      	ldr	r2, [r3, #4]
 8002174:	8812      	ldrh	r2, [r2, #0]
 8002176:	4282      	cmp	r2, r0
 8002178:	d002      	beq.n	8002180 <gdriverGetNext+0x14>
		driver = driver->driverchain;
 800217a:	681b      	ldr	r3, [r3, #0]
	while(driver && driver->vmt->type != type)
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1f8      	bne.n	8002172 <gdriverGetNext+0x6>

	return driver;
}
 8002180:	4618      	mov	r0, r3
 8002182:	4770      	bx	lr
	driver = driver ? driver->driverchain : dhead;
 8002184:	4b01      	ldr	r3, [pc, #4]	; (800218c <gdriverGetNext+0x20>)
 8002186:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002188:	e7f2      	b.n	8002170 <gdriverGetNext+0x4>
 800218a:	bf00      	nop
 800218c:	200000b8 	.word	0x200000b8

08002190 <gdriverGetDriverInstanceNumber>:
	GDriver		*pd;
	unsigned	instance;

	// Loop to find the system instance
	instance = 0;
	for(pd = dhead; pd; pd = pd->driverchain) {
 8002190:	4b0f      	ldr	r3, [pc, #60]	; (80021d0 <gdriverGetDriverInstanceNumber+0x40>)
 8002192:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002194:	b1b3      	cbz	r3, 80021c4 <gdriverGetDriverInstanceNumber+0x34>
		if (pd == driver)
 8002196:	4283      	cmp	r3, r0
 8002198:	4601      	mov	r1, r0
 800219a:	d016      	beq.n	80021ca <gdriverGetDriverInstanceNumber+0x3a>
 800219c:	6842      	ldr	r2, [r0, #4]
unsigned gdriverGetDriverInstanceNumber(GDriver *driver) {
 800219e:	b410      	push	{r4}
		if (pd == driver)
 80021a0:	2000      	movs	r0, #0
 80021a2:	8814      	ldrh	r4, [r2, #0]
 80021a4:	e001      	b.n	80021aa <gdriverGetDriverInstanceNumber+0x1a>
 80021a6:	4299      	cmp	r1, r3
 80021a8:	d009      	beq.n	80021be <gdriverGetDriverInstanceNumber+0x2e>
			return instance;
		if (pd->vmt->type == driver->vmt->type)
 80021aa:	685a      	ldr	r2, [r3, #4]
	for(pd = dhead; pd; pd = pd->driverchain) {
 80021ac:	681b      	ldr	r3, [r3, #0]
		if (pd->vmt->type == driver->vmt->type)
 80021ae:	8812      	ldrh	r2, [r2, #0]
 80021b0:	42a2      	cmp	r2, r4
			instance++;
 80021b2:	bf08      	it	eq
 80021b4:	3001      	addeq	r0, #1
	for(pd = dhead; pd; pd = pd->driverchain) {
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1f5      	bne.n	80021a6 <gdriverGetDriverInstanceNumber+0x16>
	}
	return (unsigned)-1;
 80021ba:	f04f 30ff 	mov.w	r0, #4294967295
}
 80021be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80021c2:	4770      	bx	lr
	return (unsigned)-1;
 80021c4:	f04f 30ff 	mov.w	r0, #4294967295
 80021c8:	4770      	bx	lr
	instance = 0;
 80021ca:	2000      	movs	r0, #0
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	200000b8 	.word	0x200000b8

080021d4 <_gqueueInit>:
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop

080021d8 <_gqueueDeinit>:
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop

080021dc <gfxQueueASyncInit>:
		pqueue->head = pqueue->tail = 0;
 80021dc:	2300      	movs	r3, #0
 80021de:	6043      	str	r3, [r0, #4]
 80021e0:	6003      	str	r3, [r0, #0]
 80021e2:	4770      	bx	lr

080021e4 <gfxQueueASyncGet>:
		if (!pqueue->head)
 80021e4:	6803      	ldr	r3, [r0, #0]
 80021e6:	b11b      	cbz	r3, 80021f0 <gfxQueueASyncGet+0xc>
			pqueue->head = pi->next;
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	6002      	str	r2, [r0, #0]
			pi->next = 0;
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
	}
 80021f0:	4618      	mov	r0, r3
 80021f2:	4770      	bx	lr

080021f4 <gfxQueueASyncGetI>:
		if ((pi = pqueue->head)) {
 80021f4:	6803      	ldr	r3, [r0, #0]
 80021f6:	b11b      	cbz	r3, 8002200 <gfxQueueASyncGetI+0xc>
			pqueue->head = pi->next;
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	6002      	str	r2, [r0, #0]
			pi->next = 0;
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
	}
 8002200:	4618      	mov	r0, r3
 8002202:	4770      	bx	lr

08002204 <gfxQueueASyncPut>:
		if (!pitem) return;				// Safety
 8002204:	b131      	cbz	r1, 8002214 <gfxQueueASyncPut+0x10>
		if (!pqueue->head) {
 8002206:	6803      	ldr	r3, [r0, #0]
		pitem->next = 0;
 8002208:	2200      	movs	r2, #0
 800220a:	600a      	str	r2, [r1, #0]
		if (!pqueue->head) {
 800220c:	b11b      	cbz	r3, 8002216 <gfxQueueASyncPut+0x12>
			pqueue->tail->next = pitem;
 800220e:	6843      	ldr	r3, [r0, #4]
 8002210:	6019      	str	r1, [r3, #0]
			pqueue->tail = pitem;
 8002212:	6041      	str	r1, [r0, #4]
 8002214:	4770      	bx	lr
			pqueue->head = pqueue->tail = pitem;
 8002216:	6041      	str	r1, [r0, #4]
 8002218:	6001      	str	r1, [r0, #0]
 800221a:	4770      	bx	lr

0800221c <gfxQueueASyncPutI>:
		if (!pitem) return;				// Safety
 800221c:	b131      	cbz	r1, 800222c <gfxQueueASyncPutI+0x10>
		if (!pqueue->head) {
 800221e:	6803      	ldr	r3, [r0, #0]
		pitem->next = 0;
 8002220:	2200      	movs	r2, #0
 8002222:	600a      	str	r2, [r1, #0]
		if (!pqueue->head) {
 8002224:	b11b      	cbz	r3, 800222e <gfxQueueASyncPutI+0x12>
			pqueue->tail->next = pitem;
 8002226:	6843      	ldr	r3, [r0, #4]
 8002228:	6019      	str	r1, [r3, #0]
			pqueue->tail = pitem;
 800222a:	6041      	str	r1, [r0, #4]
 800222c:	4770      	bx	lr
			pqueue->head = pqueue->tail = pitem;
 800222e:	6041      	str	r1, [r0, #4]
 8002230:	6001      	str	r1, [r0, #0]
 8002232:	4770      	bx	lr

08002234 <gfxQueueASyncPush>:
		if (!pitem) return;				// Safety
 8002234:	b119      	cbz	r1, 800223e <gfxQueueASyncPush+0xa>
		pitem->next = pqueue->head;
 8002236:	6803      	ldr	r3, [r0, #0]
 8002238:	600b      	str	r3, [r1, #0]
		pqueue->head = pitem;
 800223a:	6001      	str	r1, [r0, #0]
		if (!pitem->next)
 800223c:	b103      	cbz	r3, 8002240 <gfxQueueASyncPush+0xc>
 800223e:	4770      	bx	lr
			pqueue->tail = pitem;
 8002240:	6041      	str	r1, [r0, #4]
 8002242:	4770      	bx	lr

08002244 <gfxQueueASyncPushI>:
		if (!pitem) return;				// Safety
 8002244:	b119      	cbz	r1, 800224e <gfxQueueASyncPushI+0xa>
		pitem->next = pqueue->head;
 8002246:	6803      	ldr	r3, [r0, #0]
 8002248:	600b      	str	r3, [r1, #0]
		pqueue->head = pitem;
 800224a:	6001      	str	r1, [r0, #0]
		if (!pitem->next)
 800224c:	b103      	cbz	r3, 8002250 <gfxQueueASyncPushI+0xc>
 800224e:	4770      	bx	lr
			pqueue->tail = pitem;
 8002250:	6041      	str	r1, [r0, #4]
 8002252:	4770      	bx	lr

08002254 <gfxQueueASyncInsert>:
		if (!pitem) return;				// Safety
 8002254:	b181      	cbz	r1, 8002278 <gfxQueueASyncInsert+0x24>
		return res;
	}
	bool_t gfxQueueASyncIsInI(gfxQueueASync *pqueue, const gfxQueueASyncItem *pitem) {
		gfxQueueASyncItem *pi;

		for(pi = pqueue->head; pi; pi = pi->next) {
 8002256:	6803      	ldr	r3, [r0, #0]
		if (pafter && gfxQueueASyncIsInI(pqueue, pafter)) {
 8002258:	b1a2      	cbz	r2, 8002284 <gfxQueueASyncInsert+0x30>
		for(pi = pqueue->head; pi; pi = pi->next) {
 800225a:	b913      	cbnz	r3, 8002262 <gfxQueueASyncInsert+0xe>
 800225c:	e01a      	b.n	8002294 <gfxQueueASyncInsert+0x40>
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	b15b      	cbz	r3, 800227a <gfxQueueASyncInsert+0x26>
			if (pi == pitem)
 8002262:	429a      	cmp	r2, r3
 8002264:	d1fb      	bne.n	800225e <gfxQueueASyncInsert+0xa>
			if (pqueue->tail == pafter)
 8002266:	6843      	ldr	r3, [r0, #4]
	void gfxQueueASyncInsert(gfxQueueASync *pqueue, gfxQueueASyncItem *pitem, gfxQueueASyncItem *pafter) {
 8002268:	b410      	push	{r4}
			if (pqueue->tail == pafter)
 800226a:	429a      	cmp	r2, r3
			pitem->next = pafter->next;
 800226c:	6814      	ldr	r4, [r2, #0]
 800226e:	600c      	str	r4, [r1, #0]
			pafter->next = pitem;
 8002270:	6011      	str	r1, [r2, #0]
			if (pqueue->tail == pafter)
 8002272:	d00d      	beq.n	8002290 <gfxQueueASyncInsert+0x3c>
	}
 8002274:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002278:	4770      	bx	lr
			pitem->next = 0;
 800227a:	600b      	str	r3, [r1, #0]
				pqueue->tail->next = pitem;
 800227c:	6843      	ldr	r3, [r0, #4]
 800227e:	6019      	str	r1, [r3, #0]
				pqueue->tail = pitem;
 8002280:	6041      	str	r1, [r0, #4]
	}
 8002282:	4770      	bx	lr
			pitem->next = 0;
 8002284:	600a      	str	r2, [r1, #0]
			if (!pqueue->head) {
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1f8      	bne.n	800227c <gfxQueueASyncInsert+0x28>
				pqueue->head = pqueue->tail = pitem;
 800228a:	6041      	str	r1, [r0, #4]
 800228c:	6001      	str	r1, [r0, #0]
 800228e:	4770      	bx	lr
				pqueue->tail = pitem;
 8002290:	6041      	str	r1, [r0, #4]
 8002292:	e7ef      	b.n	8002274 <gfxQueueASyncInsert+0x20>
			pitem->next = 0;
 8002294:	600b      	str	r3, [r1, #0]
 8002296:	e7f8      	b.n	800228a <gfxQueueASyncInsert+0x36>

08002298 <gfxQueueASyncInsertI>:
		if (!pitem) return;				// Safety
 8002298:	b181      	cbz	r1, 80022bc <gfxQueueASyncInsertI+0x24>
		for(pi = pqueue->head; pi; pi = pi->next) {
 800229a:	6803      	ldr	r3, [r0, #0]
		if (pafter && gfxQueueASyncIsInI(pqueue, pafter)) {
 800229c:	b1a2      	cbz	r2, 80022c8 <gfxQueueASyncInsertI+0x30>
		for(pi = pqueue->head; pi; pi = pi->next) {
 800229e:	b913      	cbnz	r3, 80022a6 <gfxQueueASyncInsertI+0xe>
 80022a0:	e01a      	b.n	80022d8 <gfxQueueASyncInsertI+0x40>
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	b15b      	cbz	r3, 80022be <gfxQueueASyncInsertI+0x26>
			if (pi == pitem)
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d1fb      	bne.n	80022a2 <gfxQueueASyncInsertI+0xa>
			if (pqueue->tail == pafter)
 80022aa:	6843      	ldr	r3, [r0, #4]
	void gfxQueueASyncInsertI(gfxQueueASync *pqueue, gfxQueueASyncItem *pitem, gfxQueueASyncItem *pafter) {
 80022ac:	b410      	push	{r4}
			if (pqueue->tail == pafter)
 80022ae:	429a      	cmp	r2, r3
			pitem->next = pafter->next;
 80022b0:	6814      	ldr	r4, [r2, #0]
 80022b2:	600c      	str	r4, [r1, #0]
			pafter->next = pitem;
 80022b4:	6011      	str	r1, [r2, #0]
			if (pqueue->tail == pafter)
 80022b6:	d00d      	beq.n	80022d4 <gfxQueueASyncInsertI+0x3c>
	}
 80022b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80022bc:	4770      	bx	lr
			pitem->next = 0;
 80022be:	600b      	str	r3, [r1, #0]
				pqueue->tail->next = pitem;
 80022c0:	6843      	ldr	r3, [r0, #4]
 80022c2:	6019      	str	r1, [r3, #0]
				pqueue->tail = pitem;
 80022c4:	6041      	str	r1, [r0, #4]
 80022c6:	4770      	bx	lr
			pitem->next = 0;
 80022c8:	600a      	str	r2, [r1, #0]
			if (!pqueue->head) {
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1f8      	bne.n	80022c0 <gfxQueueASyncInsertI+0x28>
				pqueue->head = pqueue->tail = pitem;
 80022ce:	6041      	str	r1, [r0, #4]
 80022d0:	6001      	str	r1, [r0, #0]
 80022d2:	4770      	bx	lr
				pqueue->tail = pitem;
 80022d4:	6041      	str	r1, [r0, #4]
 80022d6:	e7ef      	b.n	80022b8 <gfxQueueASyncInsertI+0x20>
			pitem->next = 0;
 80022d8:	600b      	str	r3, [r1, #0]
 80022da:	e7f8      	b.n	80022ce <gfxQueueASyncInsertI+0x36>

080022dc <gfxQueueASyncRemove>:
		if (!pitem) return;				// Safety
 80022dc:	b1b1      	cbz	r1, 800230c <gfxQueueASyncRemove+0x30>
		if (pqueue->head) {
 80022de:	6802      	ldr	r2, [r0, #0]
 80022e0:	b1a2      	cbz	r2, 800230c <gfxQueueASyncRemove+0x30>
			if (pqueue->head == pitem) {
 80022e2:	4291      	cmp	r1, r2
 80022e4:	d103      	bne.n	80022ee <gfxQueueASyncRemove+0x12>
 80022e6:	e012      	b.n	800230e <gfxQueueASyncRemove+0x32>
					if (pi->next == pitem) {
 80022e8:	4299      	cmp	r1, r3
 80022ea:	d004      	beq.n	80022f6 <gfxQueueASyncRemove+0x1a>
 80022ec:	461a      	mov	r2, r3
				for(pi = pqueue->head; pi->next; pi = pi->next) {
 80022ee:	6813      	ldr	r3, [r2, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1f9      	bne.n	80022e8 <gfxQueueASyncRemove+0xc>
 80022f4:	4770      	bx	lr
						if (pqueue->tail == pitem)
 80022f6:	6843      	ldr	r3, [r0, #4]
	void gfxQueueASyncRemove(gfxQueueASync *pqueue, gfxQueueASyncItem *pitem) {
 80022f8:	b410      	push	{r4}
						pi->next = pitem->next;
 80022fa:	680c      	ldr	r4, [r1, #0]
 80022fc:	6014      	str	r4, [r2, #0]
						if (pqueue->tail == pitem)
 80022fe:	4299      	cmp	r1, r3
	}
 8002300:	f85d 4b04 	ldr.w	r4, [sp], #4
							pqueue->tail = pi;
 8002304:	bf08      	it	eq
 8002306:	6042      	streq	r2, [r0, #4]
						pitem->next = 0;
 8002308:	2300      	movs	r3, #0
 800230a:	600b      	str	r3, [r1, #0]
	}
 800230c:	4770      	bx	lr
				pqueue->head = pitem->next;
 800230e:	680b      	ldr	r3, [r1, #0]
 8002310:	6003      	str	r3, [r0, #0]
				pitem->next = 0;
 8002312:	2300      	movs	r3, #0
 8002314:	600b      	str	r3, [r1, #0]
 8002316:	4770      	bx	lr

08002318 <gfxQueueASyncRemoveI>:
		if (!pitem) return;				// Safety
 8002318:	b1b1      	cbz	r1, 8002348 <gfxQueueASyncRemoveI+0x30>
		if (pqueue->head) {
 800231a:	6802      	ldr	r2, [r0, #0]
 800231c:	b1a2      	cbz	r2, 8002348 <gfxQueueASyncRemoveI+0x30>
			if (pqueue->head == pitem) {
 800231e:	4291      	cmp	r1, r2
 8002320:	d103      	bne.n	800232a <gfxQueueASyncRemoveI+0x12>
 8002322:	e012      	b.n	800234a <gfxQueueASyncRemoveI+0x32>
					if (pi->next == pitem) {
 8002324:	4299      	cmp	r1, r3
 8002326:	d004      	beq.n	8002332 <gfxQueueASyncRemoveI+0x1a>
 8002328:	461a      	mov	r2, r3
				for(pi = pqueue->head; pi->next; pi = pi->next) {
 800232a:	6813      	ldr	r3, [r2, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1f9      	bne.n	8002324 <gfxQueueASyncRemoveI+0xc>
 8002330:	4770      	bx	lr
						if (pqueue->tail == pitem)
 8002332:	6843      	ldr	r3, [r0, #4]
	void gfxQueueASyncRemoveI(gfxQueueASync *pqueue, gfxQueueASyncItem *pitem) {
 8002334:	b410      	push	{r4}
						pi->next = pitem->next;
 8002336:	680c      	ldr	r4, [r1, #0]
 8002338:	6014      	str	r4, [r2, #0]
						if (pqueue->tail == pitem)
 800233a:	4299      	cmp	r1, r3
	}
 800233c:	f85d 4b04 	ldr.w	r4, [sp], #4
							pqueue->tail = pi;
 8002340:	bf08      	it	eq
 8002342:	6042      	streq	r2, [r0, #4]
						pitem->next = 0;
 8002344:	2300      	movs	r3, #0
 8002346:	600b      	str	r3, [r1, #0]
	}
 8002348:	4770      	bx	lr
				pqueue->head = pitem->next;
 800234a:	680b      	ldr	r3, [r1, #0]
 800234c:	6003      	str	r3, [r0, #0]
				pitem->next = 0;
 800234e:	2300      	movs	r3, #0
 8002350:	600b      	str	r3, [r1, #0]
 8002352:	4770      	bx	lr

08002354 <gfxQueueASyncIsIn>:
		for(pi = pqueue->head; pi; pi = pi->next) {
 8002354:	6800      	ldr	r0, [r0, #0]
 8002356:	b148      	cbz	r0, 800236c <gfxQueueASyncIsIn+0x18>
			if (pi == pitem)
 8002358:	4281      	cmp	r1, r0
 800235a:	d102      	bne.n	8002362 <gfxQueueASyncIsIn+0xe>
 800235c:	e005      	b.n	800236a <gfxQueueASyncIsIn+0x16>
 800235e:	4288      	cmp	r0, r1
 8002360:	d003      	beq.n	800236a <gfxQueueASyncIsIn+0x16>
		for(pi = pqueue->head; pi; pi = pi->next) {
 8002362:	6800      	ldr	r0, [r0, #0]
 8002364:	2800      	cmp	r0, #0
 8002366:	d1fa      	bne.n	800235e <gfxQueueASyncIsIn+0xa>
 8002368:	4770      	bx	lr
				return TRUE;
 800236a:	20ff      	movs	r0, #255	; 0xff
	}
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop

08002370 <gfxQueueASyncIsInI>:
		for(pi = pqueue->head; pi; pi = pi->next) {
 8002370:	6800      	ldr	r0, [r0, #0]
 8002372:	b148      	cbz	r0, 8002388 <gfxQueueASyncIsInI+0x18>
			if (pi == pitem)
 8002374:	4288      	cmp	r0, r1
 8002376:	d102      	bne.n	800237e <gfxQueueASyncIsInI+0xe>
 8002378:	e005      	b.n	8002386 <gfxQueueASyncIsInI+0x16>
 800237a:	4281      	cmp	r1, r0
 800237c:	d003      	beq.n	8002386 <gfxQueueASyncIsInI+0x16>
		for(pi = pqueue->head; pi; pi = pi->next) {
 800237e:	6800      	ldr	r0, [r0, #0]
 8002380:	2800      	cmp	r0, #0
 8002382:	d1fa      	bne.n	800237a <gfxQueueASyncIsInI+0xa>
 8002384:	4770      	bx	lr
				return TRUE;
 8002386:	20ff      	movs	r0, #255	; 0xff
		}
		return FALSE;
	}
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop

0800238c <_gdispInit>:
			if (!(GDISPVMT_OnlyOne->d.flags & GDISP_VFLG_DYNAMICONLY))
 800238c:	4843      	ldr	r0, [pc, #268]	; (800249c <_gdispInit+0x110>)
{
 800238e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			if (!(GDISPVMT_OnlyOne->d.flags & GDISP_VFLG_DYNAMICONLY))
 8002392:	8843      	ldrh	r3, [r0, #2]
 8002394:	f013 0101 	ands.w	r1, r3, #1
 8002398:	d101      	bne.n	800239e <_gdispInit+0x12>
				gdriverRegister(&GDISPVMT_OnlyOne->d, 0);
 800239a:	f7ff fe49 	bl	8002030 <gdriverRegister>
	delay = gfxMillisecondsToTicks(ms);
 800239e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023a2:	f7fd ffa3 	bl	80002ec <gfxMillisecondsToTicks>
 80023a6:	4680      	mov	r8, r0
	starttm = gfxSystemTicks();
 80023a8:	f7fd ff9a 	bl	80002e0 <gfxSystemTicks>
 80023ac:	4d3c      	ldr	r5, [pc, #240]	; (80024a0 <_gdispInit+0x114>)
	Qadd(&readyQ, me = _gfxCurrentThread);
 80023ae:	4e3d      	ldr	r6, [pc, #244]	; (80024a4 <_gdispInit+0x118>)
	t->next = 0;
 80023b0:	f04f 0900 	mov.w	r9, #0
	starttm = gfxSystemTicks();
 80023b4:	4607      	mov	r7, r0
	if (!q->head)
 80023b6:	6828      	ldr	r0, [r5, #0]
 80023b8:	b130      	cbz	r0, 80023c8 <_gdispInit+0x3c>
	q->head = t->next;
 80023ba:	6804      	ldr	r4, [r0, #0]
 80023bc:	602c      	str	r4, [r5, #0]
 80023be:	f004 fa9b 	bl	80068f8 <free>
	if (!q->head)
 80023c2:	4620      	mov	r0, r4
 80023c4:	2c00      	cmp	r4, #0
 80023c6:	d1f8      	bne.n	80023ba <_gdispInit+0x2e>
	if (!readyQ.head)
 80023c8:	68ab      	ldr	r3, [r5, #8]
 80023ca:	b163      	cbz	r3, 80023e6 <_gdispInit+0x5a>
	Qadd(&readyQ, me = _gfxCurrentThread);
 80023cc:	6831      	ldr	r1, [r6, #0]
		q->tail->next = t;
 80023ce:	68ea      	ldr	r2, [r5, #12]
	t->next = 0;
 80023d0:	f8c1 9000 	str.w	r9, [r1]
		q->tail->next = t;
 80023d4:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 80023d6:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 80023d8:	60e9      	str	r1, [r5, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 80023da:	4608      	mov	r0, r1
	q->head = t->next;
 80023dc:	60aa      	str	r2, [r5, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 80023de:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 80023e0:	6033      	str	r3, [r6, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 80023e2:	f7fe f99b 	bl	800071c <_gfxTaskSwitch>
	} while (gfxSystemTicks() - starttm < delay);
 80023e6:	f7fd ff7b 	bl	80002e0 <gfxSystemTicks>
 80023ea:	1bc0      	subs	r0, r0, r7
 80023ec:	4580      	cmp	r8, r0
 80023ee:	d8e2      	bhi.n	80023b6 <_gdispInit+0x2a>
	driver = driver ? driver->driverchain : dhead;
 80023f0:	6e6e      	ldr	r6, [r5, #100]	; 0x64
	while(driver && driver->vmt->type != type)
 80023f2:	b91e      	cbnz	r6, 80023fc <_gdispInit+0x70>
 80023f4:	e04c      	b.n	8002490 <_gdispInit+0x104>
		driver = driver->driverchain;
 80023f6:	6836      	ldr	r6, [r6, #0]
	while(driver && driver->vmt->type != type)
 80023f8:	2e00      	cmp	r6, #0
 80023fa:	d049      	beq.n	8002490 <_gdispInit+0x104>
 80023fc:	6873      	ldr	r3, [r6, #4]
 80023fe:	881b      	ldrh	r3, [r3, #0]
 8002400:	2b67      	cmp	r3, #103	; 0x67
 8002402:	d1f8      	bne.n	80023f6 <_gdispInit+0x6a>
	Qadd(&readyQ, me = _gfxCurrentThread);
 8002404:	4f27      	ldr	r7, [pc, #156]	; (80024a4 <_gdispInit+0x118>)
	t->next = 0;
 8002406:	f04f 0800 	mov.w	r8, #0
	while (pmutex[0]) {
 800240a:	6a33      	ldr	r3, [r6, #32]
 800240c:	b1db      	cbz	r3, 8002446 <_gdispInit+0xba>
	if (!q->head)
 800240e:	6828      	ldr	r0, [r5, #0]
 8002410:	b130      	cbz	r0, 8002420 <_gdispInit+0x94>
	q->head = t->next;
 8002412:	6804      	ldr	r4, [r0, #0]
 8002414:	602c      	str	r4, [r5, #0]
 8002416:	f004 fa6f 	bl	80068f8 <free>
	if (!q->head)
 800241a:	4620      	mov	r0, r4
 800241c:	2c00      	cmp	r4, #0
 800241e:	d1f8      	bne.n	8002412 <_gdispInit+0x86>
	if (!readyQ.head)
 8002420:	68ab      	ldr	r3, [r5, #8]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d0f1      	beq.n	800240a <_gdispInit+0x7e>
	Qadd(&readyQ, me = _gfxCurrentThread);
 8002426:	6839      	ldr	r1, [r7, #0]
		q->tail->next = t;
 8002428:	68ea      	ldr	r2, [r5, #12]
	t->next = 0;
 800242a:	f8c1 8000 	str.w	r8, [r1]
		q->tail->next = t;
 800242e:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 8002430:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 8002432:	60e9      	str	r1, [r5, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8002434:	4608      	mov	r0, r1
	q->head = t->next;
 8002436:	60aa      	str	r2, [r5, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8002438:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 800243a:	603b      	str	r3, [r7, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 800243c:	f7fe f96e 	bl	800071c <_gfxTaskSwitch>
	while (pmutex[0]) {
 8002440:	6a33      	ldr	r3, [r6, #32]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1e3      	bne.n	800240e <_gdispInit+0x82>
			g->p.cy = g->g.Height;
 8002446:	f9b6 000a 	ldrsh.w	r0, [r6, #10]
			g->p.cx = g->g.Width;
 800244a:	f9b6 4008 	ldrsh.w	r4, [r6, #8]
 800244e:	68b2      	ldr	r2, [r6, #8]
			g->p.x = g->p.y = 0;
 8002450:	62f3      	str	r3, [r6, #44]	; 0x2c
	pmutex[0] = 1;
 8002452:	2101      	movs	r1, #1
			area = (uint32_t)g->p.cx * g->p.cy;
 8002454:	fb04 f400 	mul.w	r4, r4, r0
			g->p.color = color;
 8002458:	87b3      	strh	r3, [r6, #60]	; 0x3c
 800245a:	6231      	str	r1, [r6, #32]
			g->p.cx = g->g.Width;
 800245c:	6332      	str	r2, [r6, #48]	; 0x30
			gdisp_lld_write_start(g);
 800245e:	4630      	mov	r0, r6
 8002460:	f7fe f91c 	bl	800069c <gdisp_lld_write_start>
			for(; area; area--)
 8002464:	b124      	cbz	r4, 8002470 <_gdispInit+0xe4>
				gdisp_lld_write_color(g);
 8002466:	4630      	mov	r0, r6
 8002468:	f7fd ffb4 	bl	80003d4 <gdisp_lld_write_color>
			for(; area; area--)
 800246c:	3c01      	subs	r4, #1
 800246e:	d1fa      	bne.n	8002466 <_gdispInit+0xda>
			gdisp_lld_write_stop(g);
 8002470:	4630      	mov	r0, r6
 8002472:	f7fe f911 	bl	8000698 <gdisp_lld_write_stop>
	driver = driver ? driver->driverchain : dhead;
 8002476:	6833      	ldr	r3, [r6, #0]
	pmutex[0] = 0;
 8002478:	f8c6 8020 	str.w	r8, [r6, #32]
	while(driver && driver->vmt->type != type)
 800247c:	b913      	cbnz	r3, 8002484 <_gdispInit+0xf8>
 800247e:	e007      	b.n	8002490 <_gdispInit+0x104>
		driver = driver->driverchain;
 8002480:	681b      	ldr	r3, [r3, #0]
	while(driver && driver->vmt->type != type)
 8002482:	b12b      	cbz	r3, 8002490 <_gdispInit+0x104>
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	8812      	ldrh	r2, [r2, #0]
 8002488:	2a67      	cmp	r2, #103	; 0x67
 800248a:	d1f9      	bne.n	8002480 <_gdispInit+0xf4>
 800248c:	461e      	mov	r6, r3
 800248e:	e7bc      	b.n	800240a <_gdispInit+0x7e>
			gdispInitDone = TRUE;
 8002490:	23ff      	movs	r3, #255	; 0xff
 8002492:	f885 306c 	strb.w	r3, [r5, #108]	; 0x6c
}
 8002496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800249a:	bf00      	nop
 800249c:	08007d20 	.word	0x08007d20
 80024a0:	200000b8 	.word	0x200000b8
 80024a4:	20000948 	.word	0x20000948

080024a8 <gfxInit>:
	extern void _gtransInit(void);
	extern void _gtransDeinit(void);
#endif

void gfxInit(void)
{
 80024a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* Ensure we only initialise once */
	if (gfxInitDone)
 80024ac:	4d50      	ldr	r5, [pc, #320]	; (80025f0 <gfxInit+0x148>)
 80024ae:	f895 606d 	ldrb.w	r6, [r5, #109]	; 0x6d
 80024b2:	b10e      	cbz	r6, 80024b8 <gfxInit+0x10>
 80024b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	_gfxCurrentThread = &mainthread;
 80024b8:	4f4e      	ldr	r7, [pc, #312]	; (80025f4 <gfxInit+0x14c>)
	q->head = q->tail = 0;
 80024ba:	60ee      	str	r6, [r5, #12]
	psem->cnt = val;
 80024bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	_gfxCurrentThread = &mainthread;
 80024c0:	f105 004c 	add.w	r0, r5, #76	; 0x4c
	mainthread.size = sizeof(thread);
 80024c4:	2118      	movs	r1, #24
	mainthread.flags = FLG_THD_MAIN;
 80024c6:	2202      	movs	r2, #2
	psem->cnt = val;
 80024c8:	612b      	str	r3, [r5, #16]
	_gfxCurrentThread = &mainthread;
 80024ca:	6038      	str	r0, [r7, #0]
		return;
	gfxInitDone = TRUE;
 80024cc:	24ff      	movs	r4, #255	; 0xff
	ticks2ms = gfxMillisecondsToTicks(1);
 80024ce:	2001      	movs	r0, #1
	mainthread.size = sizeof(thread);
 80024d0:	6569      	str	r1, [r5, #84]	; 0x54
	mainthread.flags = FLG_THD_MAIN;
 80024d2:	652a      	str	r2, [r5, #80]	; 0x50
	q->head = q->tail = 0;
 80024d4:	60ae      	str	r6, [r5, #8]
	mainthread.next = 0;
 80024d6:	64ee      	str	r6, [r5, #76]	; 0x4c
	mainthread.fn = 0;
 80024d8:	65ae      	str	r6, [r5, #88]	; 0x58
	mainthread.param = 0;
 80024da:	65ee      	str	r6, [r5, #92]	; 0x5c
	pmutex[0] = 0;
 80024dc:	616e      	str	r6, [r5, #20]
 80024de:	f885 406d 	strb.w	r4, [r5, #109]	; 0x6d
 80024e2:	f7fd ff03 	bl	80002ec <gfxMillisecondsToTicks>
 80024e6:	61e8      	str	r0, [r5, #28]
	#endif
	#if GFX_USE_GFILE
		_gfileInit();
	#endif
	#if GFX_USE_GDISP
		_gdispInit();
 80024e8:	f7ff ff50 	bl	800238c <_gdispInit>
	psem->cnt = val;
 80024ec:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80024f0:	f8d5 8014 	ldr.w	r8, [r5, #20]
		pqueue->head = pqueue->tail = 0;
 80024f4:	62ae      	str	r6, [r5, #40]	; 0x28
 80024f6:	626e      	str	r6, [r5, #36]	; 0x24
	pt->flags = 0;
 80024f8:	f8a5 6040 	strh.w	r6, [r5, #64]	; 0x40
 80024fc:	622b      	str	r3, [r5, #32]
	while (pmutex[0]) {
 80024fe:	f1b8 0f00 	cmp.w	r8, #0
 8002502:	d01a      	beq.n	800253a <gfxInit+0x92>
	if (!q->head)
 8002504:	6828      	ldr	r0, [r5, #0]
 8002506:	b130      	cbz	r0, 8002516 <gfxInit+0x6e>
	q->head = t->next;
 8002508:	6804      	ldr	r4, [r0, #0]
 800250a:	602c      	str	r4, [r5, #0]
 800250c:	f004 f9f4 	bl	80068f8 <free>
	if (!q->head)
 8002510:	4620      	mov	r0, r4
 8002512:	2c00      	cmp	r4, #0
 8002514:	d1f8      	bne.n	8002508 <gfxInit+0x60>
	if (!readyQ.head)
 8002516:	68ab      	ldr	r3, [r5, #8]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d0f0      	beq.n	80024fe <gfxInit+0x56>
	Qadd(&readyQ, me = _gfxCurrentThread);
 800251c:	6839      	ldr	r1, [r7, #0]
		q->tail->next = t;
 800251e:	68ea      	ldr	r2, [r5, #12]
	t->next = 0;
 8002520:	600e      	str	r6, [r1, #0]
		q->tail->next = t;
 8002522:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 8002524:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 8002526:	60e9      	str	r1, [r5, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8002528:	4608      	mov	r0, r1
	q->head = t->next;
 800252a:	60aa      	str	r2, [r5, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 800252c:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 800252e:	603b      	str	r3, [r7, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8002530:	f7fe f8f4 	bl	800071c <_gfxTaskSwitch>
	while (pmutex[0]) {
 8002534:	f1b8 0f00 	cmp.w	r8, #0
 8002538:	d1e4      	bne.n	8002504 <gfxInit+0x5c>
	if (!hThread) {
 800253a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
	pmutex[0] = 1;
 800253c:	2201      	movs	r2, #1
 800253e:	616a      	str	r2, [r5, #20]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d039      	beq.n	80025b8 <gfxInit+0x110>
	if (pt->flags & GTIMER_FLG_SCHEDULED) {
 8002544:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
 8002548:	071b      	lsls	r3, r3, #28
 800254a:	d419      	bmi.n	8002580 <gfxInit+0xd8>
 800254c:	69ab      	ldr	r3, [r5, #24]
 800254e:	4a2a      	ldr	r2, [pc, #168]	; (80025f8 <gfxInit+0x150>)
	pt->fn = fn;
 8002550:	492a      	ldr	r1, [pc, #168]	; (80025fc <gfxInit+0x154>)
 8002552:	6329      	str	r1, [r5, #48]	; 0x30
	pt->param = param;
 8002554:	2400      	movs	r4, #0
		pt->flags |= GTIMER_FLG_INFINITE;
 8002556:	200b      	movs	r0, #11
		pt->period = TIME_INFINITE;
 8002558:	f04f 31ff 	mov.w	r1, #4294967295
	pt->param = param;
 800255c:	636c      	str	r4, [r5, #52]	; 0x34
		pt->flags |= GTIMER_FLG_INFINITE;
 800255e:	f8a5 0040 	strh.w	r0, [r5, #64]	; 0x40
		pt->period = TIME_INFINITE;
 8002562:	63e9      	str	r1, [r5, #60]	; 0x3c
	if (pTimerHead) {
 8002564:	b323      	cbz	r3, 80025b0 <gfxInit+0x108>
		pt->prev = pTimerHead->prev;
 8002566:	6999      	ldr	r1, [r3, #24]
		pt->next = pTimerHead;
 8002568:	646b      	str	r3, [r5, #68]	; 0x44
		pt->prev = pTimerHead->prev;
 800256a:	64a9      	str	r1, [r5, #72]	; 0x48
		pt->prev->next = pt;
 800256c:	614a      	str	r2, [r1, #20]
		pt->next->prev = pt;
 800256e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002570:	619a      	str	r2, [r3, #24]
	_GWINwm = (GWindowManager *)&GNullWindowManager;
 8002572:	4b23      	ldr	r3, [pc, #140]	; (8002600 <gfxInit+0x158>)
 8002574:	4a23      	ldr	r2, [pc, #140]	; (8002604 <gfxInit+0x15c>)
 8002576:	601a      	str	r2, [r3, #0]
	pmutex[0] = 0;
 8002578:	2300      	movs	r3, #0
 800257a:	616b      	str	r3, [r5, #20]
 800257c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (pt->next == pt)
 8002580:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8002582:	4a1d      	ldr	r2, [pc, #116]	; (80025f8 <gfxInit+0x150>)
 8002584:	4291      	cmp	r1, r2
 8002586:	d009      	beq.n	800259c <gfxInit+0xf4>
			pt->next->prev = pt->prev;
 8002588:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800258a:	618b      	str	r3, [r1, #24]
			pt->prev->next = pt->next;
 800258c:	6ca8      	ldr	r0, [r5, #72]	; 0x48
			if (pTimerHead == pt)
 800258e:	69ab      	ldr	r3, [r5, #24]
			pt->prev->next = pt->next;
 8002590:	6141      	str	r1, [r0, #20]
			if (pTimerHead == pt)
 8002592:	4293      	cmp	r3, r2
				pTimerHead = pt->next;
 8002594:	bf04      	itt	eq
 8002596:	6c6b      	ldreq	r3, [r5, #68]	; 0x44
 8002598:	61ab      	streq	r3, [r5, #24]
 800259a:	e7d9      	b.n	8002550 <gfxInit+0xa8>
	pt->fn = fn;
 800259c:	4b17      	ldr	r3, [pc, #92]	; (80025fc <gfxInit+0x154>)
 800259e:	632b      	str	r3, [r5, #48]	; 0x30
	pt->param = param;
 80025a0:	2000      	movs	r0, #0
		pt->flags |= GTIMER_FLG_INFINITE;
 80025a2:	210b      	movs	r1, #11
		pt->period = TIME_INFINITE;
 80025a4:	f04f 33ff 	mov.w	r3, #4294967295
	pt->param = param;
 80025a8:	6368      	str	r0, [r5, #52]	; 0x34
		pt->flags |= GTIMER_FLG_INFINITE;
 80025aa:	f8a5 1040 	strh.w	r1, [r5, #64]	; 0x40
		pt->period = TIME_INFINITE;
 80025ae:	63eb      	str	r3, [r5, #60]	; 0x3c
		pt->next = pt->prev = pTimerHead = pt;
 80025b0:	61aa      	str	r2, [r5, #24]
 80025b2:	64aa      	str	r2, [r5, #72]	; 0x48
 80025b4:	646a      	str	r2, [r5, #68]	; 0x44
 80025b6:	e7dc      	b.n	8002572 <gfxInit+0xca>
	me = _gfxCurrentThread;
 80025b8:	6838      	ldr	r0, [r7, #0]
	if (q->head) {
 80025ba:	68ab      	ldr	r3, [r5, #8]
	t->fn = fn;
 80025bc:	4a12      	ldr	r2, [pc, #72]	; (8002608 <gfxInit+0x160>)
		t->flags = 0;
 80025be:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
	t->size = stacksz;
 80025c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
	t->param = param;
 80025c6:	f8c5 8084 	str.w	r8, [r5, #132]	; 0x84
	t->size = stacksz;
 80025ca:	67e9      	str	r1, [r5, #124]	; 0x7c
	t->fn = fn;
 80025cc:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
	t->next = 0;
 80025d0:	f8c0 8000 	str.w	r8, [r0]
	if (q->head) {
 80025d4:	b14b      	cbz	r3, 80025ea <gfxInit+0x142>
		q->tail->next = t;
 80025d6:	68eb      	ldr	r3, [r5, #12]
 80025d8:	6018      	str	r0, [r3, #0]
	_gfxCurrentThread = t;
 80025da:	4c0c      	ldr	r4, [pc, #48]	; (800260c <gfxInit+0x164>)
 80025dc:	60e8      	str	r0, [r5, #12]
	_gfxStartThread(me, t);
 80025de:	4621      	mov	r1, r4
	_gfxCurrentThread = t;
 80025e0:	603c      	str	r4, [r7, #0]
	_gfxStartThread(me, t);
 80025e2:	f7ff fa87 	bl	8001af4 <_gfxStartThread>
		hThread = gfxThreadCreate(waTimerThread, GTIMER_THREAD_WORKAREA_SIZE, GTIMER_THREAD_PRIORITY, GTimerThreadHandler, 0);
 80025e6:	672c      	str	r4, [r5, #112]	; 0x70
 80025e8:	e7ac      	b.n	8002544 <gfxInit+0x9c>
		q->head = q->tail = t;
 80025ea:	60a8      	str	r0, [r5, #8]
 80025ec:	e7f5      	b.n	80025da <gfxInit+0x132>
 80025ee:	bf00      	nop
 80025f0:	200000b8 	.word	0x200000b8
 80025f4:	20000948 	.word	0x20000948
 80025f8:	200000e8 	.word	0x200000e8
 80025fc:	08001c79 	.word	0x08001c79
 8002600:	20000944 	.word	0x20000944
 8002604:	08007d80 	.word	0x08007d80
 8002608:	080009d9 	.word	0x080009d9
 800260c:	2000012c 	.word	0x2000012c

08002610 <_gdispDeinit>:
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop

08002614 <_gdispInitDriver>:
bool_t _gdispInitDriver(GDriver *g, void *param, unsigned driverinstance, unsigned systeminstance) {
 8002614:	b570      	push	{r4, r5, r6, lr}
 8002616:	4604      	mov	r4, r0
	gd->flags = 0;
 8002618:	2500      	movs	r5, #0
	pmutex[0] = 1;
 800261a:	2601      	movs	r6, #1
	gd->systemdisplay = systeminstance;
 800261c:	7703      	strb	r3, [r0, #28]
	gd->controllerdisplay = driverinstance;
 800261e:	7742      	strb	r2, [r0, #29]
	gd->priv = param;
 8002620:	6141      	str	r1, [r0, #20]
 8002622:	6206      	str	r6, [r0, #32]
	gd->flags = 0;
 8002624:	83c5      	strh	r5, [r0, #30]
	ret = gdisp_lld_init(gd);
 8002626:	f7fd ff2b 	bl	8000480 <gdisp_lld_init>
	pmutex[0] = 0;
 800262a:	6225      	str	r5, [r4, #32]
}
 800262c:	bd70      	pop	{r4, r5, r6, pc}
 800262e:	bf00      	nop

08002630 <_gdispPostInitDriver>:
void _gdispPostInitDriver(GDriver *g) {
 8002630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002634:	4e88      	ldr	r6, [pc, #544]	; (8002858 <_gdispPostInitDriver+0x228>)
	Qadd(&readyQ, me = _gfxCurrentThread);
 8002636:	4f89      	ldr	r7, [pc, #548]	; (800285c <_gdispPostInitDriver+0x22c>)
 8002638:	b083      	sub	sp, #12
 800263a:	4604      	mov	r4, r0
	t->next = 0;
 800263c:	f04f 0800 	mov.w	r8, #0
	while (pmutex[0]) {
 8002640:	6a23      	ldr	r3, [r4, #32]
 8002642:	b1db      	cbz	r3, 800267c <_gdispPostInitDriver+0x4c>
	if (!q->head)
 8002644:	6830      	ldr	r0, [r6, #0]
 8002646:	b130      	cbz	r0, 8002656 <_gdispPostInitDriver+0x26>
	q->head = t->next;
 8002648:	6805      	ldr	r5, [r0, #0]
 800264a:	6035      	str	r5, [r6, #0]
 800264c:	f004 f954 	bl	80068f8 <free>
	if (!q->head)
 8002650:	4628      	mov	r0, r5
 8002652:	2d00      	cmp	r5, #0
 8002654:	d1f8      	bne.n	8002648 <_gdispPostInitDriver+0x18>
	if (!readyQ.head)
 8002656:	68b3      	ldr	r3, [r6, #8]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d0f1      	beq.n	8002640 <_gdispPostInitDriver+0x10>
	Qadd(&readyQ, me = _gfxCurrentThread);
 800265c:	683a      	ldr	r2, [r7, #0]
		q->tail->next = t;
 800265e:	68f1      	ldr	r1, [r6, #12]
	t->next = 0;
 8002660:	f8c2 8000 	str.w	r8, [r2]
		q->tail->next = t;
 8002664:	600a      	str	r2, [r1, #0]
	q->head = t->next;
 8002666:	681d      	ldr	r5, [r3, #0]
 8002668:	60b5      	str	r5, [r6, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 800266a:	4619      	mov	r1, r3
 800266c:	4610      	mov	r0, r2
	_gfxCurrentThread = Qpop(&readyQ);
 800266e:	603b      	str	r3, [r7, #0]
		q->tail = t;
 8002670:	60f2      	str	r2, [r6, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8002672:	f7fe f853 	bl	800071c <_gfxTaskSwitch>
	while (pmutex[0]) {
 8002676:	6a23      	ldr	r3, [r4, #32]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1e3      	bne.n	8002644 <_gdispPostInitDriver+0x14>
					g->p.ptr = g->g.Width >= g->g.Height ? (void *)GDISP_ROTATE_0 : (void *)GDISP_ROTATE_90;
 800267c:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 8002680:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8002684:	9301      	str	r3, [sp, #4]
 8002686:	428a      	cmp	r2, r1
 8002688:	bfb4      	ite	lt
 800268a:	225a      	movlt	r2, #90	; 0x5a
 800268c:	2200      	movge	r2, #0
	pmutex[0] = 1;
 800268e:	2701      	movs	r7, #1
 8002690:	6422      	str	r2, [r4, #64]	; 0x40
 8002692:	6227      	str	r7, [r4, #32]
			g->p.x = what;
 8002694:	85a7      	strh	r7, [r4, #44]	; 0x2c
			gdisp_lld_control(g);
 8002696:	4620      	mov	r0, r4
 8002698:	f7fd ff8e 	bl	80005b8 <gdisp_lld_control>
							g->clipx1 = g->g.Width;
 800269c:	f9b4 5008 	ldrsh.w	r5, [r4, #8]
							g->clipy1 = g->g.Height;
 80026a0:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
							g->clipx0 = 0;
 80026a4:	9b01      	ldr	r3, [sp, #4]
							g->clipx1 = g->g.Width;
 80026a6:	f8d4 e008 	ldr.w	lr, [r4, #8]
							g->clipx0 = 0;
 80026aa:	6263      	str	r3, [r4, #36]	; 0x24
				if (cx <= 0 || cy <= 0 || x >= g->g.Width || y >= g->g.Height) { x = y = cx = cy = 0; }
 80026ac:	2d00      	cmp	r5, #0
 80026ae:	6227      	str	r7, [r4, #32]
							g->clipx1 = g->g.Width;
 80026b0:	4629      	mov	r1, r5
							g->clipy1 = g->g.Height;
 80026b2:	4613      	mov	r3, r2
							g->clipx1 = g->g.Width;
 80026b4:	f8c4 e028 	str.w	lr, [r4, #40]	; 0x28
				if (cx <= 0 || cy <= 0 || x >= g->g.Width || y >= g->g.Height) { x = y = cx = cy = 0; }
 80026b8:	dd2d      	ble.n	8002716 <_gdispPostInitDriver+0xe6>
 80026ba:	2a00      	cmp	r2, #0
 80026bc:	dd2b      	ble.n	8002716 <_gdispPostInitDriver+0xe6>
				g->clipx1 = x+cx;	if (g->clipx1 > g->g.Width) g->clipx1 = g->g.Width;
 80026be:	42a9      	cmp	r1, r5
 80026c0:	bfa8      	it	ge
 80026c2:	4629      	movge	r1, r5
				g->clipy1 = y+cy;	if (g->clipy1 > g->g.Height) g->clipy1 = g->g.Height;
 80026c4:	4293      	cmp	r3, r2
				g->clipx0 = x;
 80026c6:	f04f 0000 	mov.w	r0, #0
				g->clipy1 = y+cy;	if (g->clipy1 > g->g.Height) g->clipy1 = g->g.Height;
 80026ca:	bfa8      	it	ge
 80026cc:	4613      	movge	r3, r2
				g->clipx1 = x+cx;	if (g->clipx1 > g->g.Width) g->clipx1 = g->g.Width;
 80026ce:	8521      	strh	r1, [r4, #40]	; 0x28
 80026d0:	2101      	movs	r1, #1
			area = (uint32_t)g->p.cx * g->p.cy;
 80026d2:	fb05 f502 	mul.w	r5, r5, r2
				g->clipx0 = x;
 80026d6:	6260      	str	r0, [r4, #36]	; 0x24
			g->p.x = g->p.y = 0;
 80026d8:	62e0      	str	r0, [r4, #44]	; 0x2c
			g->p.color = color;
 80026da:	87a0      	strh	r0, [r4, #60]	; 0x3c
				g->clipy1 = y+cy;	if (g->clipy1 > g->g.Height) g->clipy1 = g->g.Height;
 80026dc:	8563      	strh	r3, [r4, #42]	; 0x2a
			g->p.cx = g->g.Width;
 80026de:	f8c4 e030 	str.w	lr, [r4, #48]	; 0x30
 80026e2:	6221      	str	r1, [r4, #32]
			gdisp_lld_write_start(g);
 80026e4:	4620      	mov	r0, r4
 80026e6:	f7fd ffd9 	bl	800069c <gdisp_lld_write_start>
			for(; area; area--)
 80026ea:	b125      	cbz	r5, 80026f6 <_gdispPostInitDriver+0xc6>
				gdisp_lld_write_color(g);
 80026ec:	4620      	mov	r0, r4
 80026ee:	f7fd fe71 	bl	80003d4 <gdisp_lld_write_color>
			for(; area; area--)
 80026f2:	3d01      	subs	r5, #1
 80026f4:	d1fa      	bne.n	80026ec <_gdispPostInitDriver+0xbc>
			gdisp_lld_write_stop(g);
 80026f6:	4620      	mov	r0, r4
 80026f8:	f7fd ffce 	bl	8000698 <gdisp_lld_write_stop>
		if (!gdispInitDone)
 80026fc:	f896 306c 	ldrb.w	r3, [r6, #108]	; 0x6c
	pmutex[0] = 0;
 8002700:	2200      	movs	r2, #0
 8002702:	6222      	str	r2, [r4, #32]
 8002704:	b153      	cbz	r3, 800271c <_gdispPostInitDriver+0xec>
	if (!GDISP)
 8002706:	4b56      	ldr	r3, [pc, #344]	; (8002860 <_gdispPostInitDriver+0x230>)
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	2a00      	cmp	r2, #0
 800270c:	f000 809b 	beq.w	8002846 <_gdispPostInitDriver+0x216>
}
 8002710:	b003      	add	sp, #12
 8002712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (cx <= 0 || cy <= 0 || x >= g->g.Width || y >= g->g.Height) { x = y = cx = cy = 0; }
 8002716:	2300      	movs	r3, #0
 8002718:	4619      	mov	r1, r3
 800271a:	e7d0      	b.n	80026be <_gdispPostInitDriver+0x8e>
		w = g->g.Width/(8*4*2);
 800271c:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8002720:	2b00      	cmp	r3, #0
 8002722:	461e      	mov	r6, r3
 8002724:	bfb8      	it	lt
 8002726:	f103 063f 	addlt.w	r6, r3, #63	; 0x3f
		if (!w) w = 1;
 800272a:	11b6      	asrs	r6, r6, #6
 800272c:	f000 808f 	beq.w	800284e <_gdispPostInitDriver+0x21e>
 8002730:	0171      	lsls	r1, r6, #5
 8002732:	0132      	lsls	r2, r6, #4
 8002734:	b2b6      	uxth	r6, r6
		y = (g->g.Height - (16*1)*w)/2;
 8002736:	f9b4 800a 	ldrsh.w	r8, [r4, #10]
		for(p = blks; p < blks+sizeof(blks)/sizeof(blks[0]); p+=4)
 800273a:	4d4a      	ldr	r5, [pc, #296]	; (8002864 <_gdispPostInitDriver+0x234>)
		x = (g->g.Width - (8*4)*w)/2;
 800273c:	1a5b      	subs	r3, r3, r1
		y = (g->g.Height - (16*1)*w)/2;
 800273e:	eba8 0802 	sub.w	r8, r8, r2
		x = (g->g.Width - (8*4)*w)/2;
 8002742:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
		y = (g->g.Height - (16*1)*w)/2;
 8002746:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
 800274a:	f3c3 074f 	ubfx	r7, r3, #1, #16
 800274e:	f3c8 084f 	ubfx	r8, r8, #1, #16
 8002752:	9701      	str	r7, [sp, #4]
	pmutex[0] = 1;
 8002754:	2701      	movs	r7, #1
			gdispGFillArea(g, x+p[0]*w, y+p[1]*w, p[2]*w, p[3]*w, GDISP_STARTUP_LOGO_COLOR);
 8002756:	8829      	ldrh	r1, [r5, #0]
 8002758:	886b      	ldrh	r3, [r5, #2]
 800275a:	88a8      	ldrh	r0, [r5, #4]
 800275c:	88ea      	ldrh	r2, [r5, #6]
 800275e:	6227      	str	r7, [r4, #32]
 8002760:	9f01      	ldr	r7, [sp, #4]
	TEST_CLIP_AREA(g) {
 8002762:	f9b4 c024 	ldrsh.w	ip, [r4, #36]	; 0x24
			gdispGFillArea(g, x+p[0]*w, y+p[1]*w, p[2]*w, p[3]*w, GDISP_STARTUP_LOGO_COLOR);
 8002766:	fb11 7106 	smlabb	r1, r1, r6, r7
 800276a:	fb13 8306 	smlabb	r3, r3, r6, r8
 800276e:	fb10 f006 	smulbb	r0, r0, r6
 8002772:	fb12 f206 	smulbb	r2, r2, r6
 8002776:	b289      	uxth	r1, r1
 8002778:	fa0f fb81 	sxth.w	fp, r1
 800277c:	b29b      	uxth	r3, r3
 800277e:	b280      	uxth	r0, r0
 8002780:	b292      	uxth	r2, r2
 8002782:	fa0f fa83 	sxth.w	sl, r3
 8002786:	fa0f f980 	sxth.w	r9, r0
 800278a:	fa0f fe82 	sxth.w	lr, r2
	g->p.color = color;
 800278e:	f04f 37ff 	mov.w	r7, #4294967295
	TEST_CLIP_AREA(g) {
 8002792:	45e3      	cmp	fp, ip
	g->p.x = x;
 8002794:	f8a4 b02c 	strh.w	fp, [r4, #44]	; 0x2c
	g->p.color = color;
 8002798:	87a7      	strh	r7, [r4, #60]	; 0x3c
	g->p.y = y;
 800279a:	f8a4 a02e 	strh.w	sl, [r4, #46]	; 0x2e
	g->p.cx = cx;
 800279e:	f8a4 9030 	strh.w	r9, [r4, #48]	; 0x30
	g->p.cy = cy;
 80027a2:	f8a4 e032 	strh.w	lr, [r4, #50]	; 0x32
	TEST_CLIP_AREA(g) {
 80027a6:	da09      	bge.n	80027bc <_gdispPostInitDriver+0x18c>
 80027a8:	eba0 090c 	sub.w	r9, r0, ip
 80027ac:	4489      	add	r9, r1
 80027ae:	fa0f f989 	sxth.w	r9, r9
 80027b2:	f8a4 9030 	strh.w	r9, [r4, #48]	; 0x30
 80027b6:	f8a4 c02c 	strh.w	ip, [r4, #44]	; 0x2c
 80027ba:	46e3      	mov	fp, ip
 80027bc:	f9b4 1026 	ldrsh.w	r1, [r4, #38]	; 0x26
 80027c0:	458a      	cmp	sl, r1
 80027c2:	da07      	bge.n	80027d4 <_gdispPostInitDriver+0x1a4>
 80027c4:	1a52      	subs	r2, r2, r1
 80027c6:	4413      	add	r3, r2
 80027c8:	fa0f fe83 	sxth.w	lr, r3
 80027cc:	f8a4 e032 	strh.w	lr, [r4, #50]	; 0x32
 80027d0:	85e1      	strh	r1, [r4, #46]	; 0x2e
 80027d2:	468a      	mov	sl, r1
 80027d4:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 80027d8:	eb0b 0209 	add.w	r2, fp, r9
 80027dc:	429a      	cmp	r2, r3
 80027de:	dd05      	ble.n	80027ec <_gdispPostInitDriver+0x1bc>
 80027e0:	eba3 090b 	sub.w	r9, r3, fp
 80027e4:	fa0f f989 	sxth.w	r9, r9
 80027e8:	f8a4 9030 	strh.w	r9, [r4, #48]	; 0x30
 80027ec:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a
 80027f0:	eb0a 020e 	add.w	r2, sl, lr
 80027f4:	429a      	cmp	r2, r3
 80027f6:	dd05      	ble.n	8002804 <_gdispPostInitDriver+0x1d4>
 80027f8:	eba3 030a 	sub.w	r3, r3, sl
 80027fc:	fa0f fe83 	sxth.w	lr, r3
 8002800:	f8a4 e032 	strh.w	lr, [r4, #50]	; 0x32
 8002804:	f1b9 0f00 	cmp.w	r9, #0
 8002808:	dd12      	ble.n	8002830 <_gdispPostInitDriver+0x200>
 800280a:	f1be 0f00 	cmp.w	lr, #0
 800280e:	dd0f      	ble.n	8002830 <_gdispPostInitDriver+0x200>
			gdisp_lld_write_start(g);
 8002810:	4620      	mov	r0, r4
			area = (uint32_t)g->p.cx * g->p.cy;
 8002812:	fb09 f90e 	mul.w	r9, r9, lr
			gdisp_lld_write_start(g);
 8002816:	f7fd ff41 	bl	800069c <gdisp_lld_write_start>
 800281a:	9f01      	ldr	r7, [sp, #4]
				gdisp_lld_write_color(g);
 800281c:	4620      	mov	r0, r4
 800281e:	f7fd fdd9 	bl	80003d4 <gdisp_lld_write_color>
			for(; area; area--)
 8002822:	f1b9 0901 	subs.w	r9, r9, #1
 8002826:	d1f9      	bne.n	800281c <_gdispPostInitDriver+0x1ec>
			gdisp_lld_write_stop(g);
 8002828:	4620      	mov	r0, r4
 800282a:	9701      	str	r7, [sp, #4]
 800282c:	f7fd ff34 	bl	8000698 <gdisp_lld_write_stop>
	pmutex[0] = 0;
 8002830:	2300      	movs	r3, #0
 8002832:	6223      	str	r3, [r4, #32]
		for(p = blks; p < blks+sizeof(blks)/sizeof(blks[0]); p+=4)
 8002834:	4b0c      	ldr	r3, [pc, #48]	; (8002868 <_gdispPostInitDriver+0x238>)
 8002836:	3508      	adds	r5, #8
 8002838:	429d      	cmp	r5, r3
 800283a:	d38b      	bcc.n	8002754 <_gdispPostInitDriver+0x124>
	if (!GDISP)
 800283c:	4b08      	ldr	r3, [pc, #32]	; (8002860 <_gdispPostInitDriver+0x230>)
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	2a00      	cmp	r2, #0
 8002842:	f47f af65 	bne.w	8002710 <_gdispPostInitDriver+0xe0>
		GDISP = gd;
 8002846:	601c      	str	r4, [r3, #0]
}
 8002848:	b003      	add	sp, #12
 800284a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!w) w = 1;
 800284e:	2601      	movs	r6, #1
 8002850:	2210      	movs	r2, #16
 8002852:	2120      	movs	r1, #32
 8002854:	e76f      	b.n	8002736 <_gdispPostInitDriver+0x106>
 8002856:	bf00      	nop
 8002858:	200000b8 	.word	0x200000b8
 800285c:	20000948 	.word	0x20000948
 8002860:	2000094c 	.word	0x2000094c
 8002864:	08007d84 	.word	0x08007d84
 8002868:	08007e04 	.word	0x08007e04

0800286c <_gdispDeInitDriver>:
	if (GDISP == gd)
 800286c:	4908      	ldr	r1, [pc, #32]	; (8002890 <_gdispDeInitDriver+0x24>)
 800286e:	680b      	ldr	r3, [r1, #0]
 8002870:	4283      	cmp	r3, r0
 8002872:	d000      	beq.n	8002876 <_gdispDeInitDriver+0xa>
 8002874:	4770      	bx	lr
	for(pd = dhead; pd; pd = pd->driverchain) {
 8002876:	4b07      	ldr	r3, [pc, #28]	; (8002894 <_gdispDeInitDriver+0x28>)
 8002878:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800287a:	b913      	cbnz	r3, 8002882 <_gdispDeInitDriver+0x16>
 800287c:	e005      	b.n	800288a <_gdispDeInitDriver+0x1e>
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	b11b      	cbz	r3, 800288a <_gdispDeInitDriver+0x1e>
		if (pd->vmt->type == type) {
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	8812      	ldrh	r2, [r2, #0]
 8002886:	2a67      	cmp	r2, #103	; 0x67
 8002888:	d1f9      	bne.n	800287e <_gdispDeInitDriver+0x12>
		GDISP = (GDisplay *)gdriverGetInstance(GDRIVER_TYPE_DISPLAY, 0);
 800288a:	600b      	str	r3, [r1, #0]
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	2000094c 	.word	0x2000094c
 8002894:	200000b8 	.word	0x200000b8

08002898 <gdispGetDisplay>:
	for(pd = dhead; pd; pd = pd->driverchain) {
 8002898:	4b09      	ldr	r3, [pc, #36]	; (80028c0 <gdispGetDisplay+0x28>)
 800289a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800289c:	b16b      	cbz	r3, 80028ba <gdispGetDisplay+0x22>
 800289e:	2100      	movs	r1, #0
 80028a0:	e001      	b.n	80028a6 <gdispGetDisplay+0xe>
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	b14b      	cbz	r3, 80028ba <gdispGetDisplay+0x22>
		if (pd->vmt->type == type) {
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	8812      	ldrh	r2, [r2, #0]
 80028aa:	2a67      	cmp	r2, #103	; 0x67
 80028ac:	d1f9      	bne.n	80028a2 <gdispGetDisplay+0xa>
			if (sinstance == instance)
 80028ae:	4288      	cmp	r0, r1
 80028b0:	d003      	beq.n	80028ba <gdispGetDisplay+0x22>
	for(pd = dhead; pd; pd = pd->driverchain) {
 80028b2:	681b      	ldr	r3, [r3, #0]
			sinstance++;
 80028b4:	3101      	adds	r1, #1
	for(pd = dhead; pd; pd = pd->driverchain) {
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1f5      	bne.n	80028a6 <gdispGetDisplay+0xe>
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	200000b8 	.word	0x200000b8

080028c4 <gdispSetDisplay>:
	if (g) GDISP = g;
 80028c4:	b108      	cbz	r0, 80028ca <gdispSetDisplay+0x6>
 80028c6:	4b01      	ldr	r3, [pc, #4]	; (80028cc <gdispSetDisplay+0x8>)
 80028c8:	6018      	str	r0, [r3, #0]
 80028ca:	4770      	bx	lr
 80028cc:	2000094c 	.word	0x2000094c

080028d0 <gdispGetDisplayCount>:
	for(pd = dhead; pd; pd = pd->driverchain) {
 80028d0:	4b07      	ldr	r3, [pc, #28]	; (80028f0 <gdispGetDisplayCount+0x20>)
 80028d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028d4:	b14b      	cbz	r3, 80028ea <gdispGetDisplayCount+0x1a>
 80028d6:	2000      	movs	r0, #0
		if (pd->vmt->type == type)
 80028d8:	685a      	ldr	r2, [r3, #4]
	for(pd = dhead; pd; pd = pd->driverchain) {
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	8812      	ldrh	r2, [r2, #0]
 80028de:	2a67      	cmp	r2, #103	; 0x67
 80028e0:	bf08      	it	eq
 80028e2:	3001      	addeq	r0, #1
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1f7      	bne.n	80028d8 <gdispGetDisplayCount+0x8>
 80028e8:	4770      	bx	lr
	sinstance = 0;
 80028ea:	4618      	mov	r0, r3
}
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	200000b8 	.word	0x200000b8

080028f4 <gdispGGetWidth>:
coord_t gdispGGetWidth(GDisplay *g)				{ return g->g.Width; }
 80028f4:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop

080028fc <gdispGGetHeight>:
coord_t gdispGGetHeight(GDisplay *g)			{ return g->g.Height; }
 80028fc:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop

08002904 <gdispGGetPowerMode>:
powermode_t gdispGGetPowerMode(GDisplay *g)		{ return g->g.Powermode; }
 8002904:	7b80      	ldrb	r0, [r0, #14]
 8002906:	4770      	bx	lr

08002908 <gdispGGetOrientation>:
orientation_t gdispGGetOrientation(GDisplay *g)	{ return g->g.Orientation; }
 8002908:	8980      	ldrh	r0, [r0, #12]
 800290a:	4770      	bx	lr

0800290c <gdispGGetBacklight>:
uint8_t gdispGGetBacklight(GDisplay *g)			{ return g->g.Backlight; }
 800290c:	7bc0      	ldrb	r0, [r0, #15]
 800290e:	4770      	bx	lr

08002910 <gdispGGetContrast>:
uint8_t gdispGGetContrast(GDisplay *g)			{ return g->g.Contrast; }
 8002910:	7c00      	ldrb	r0, [r0, #16]
 8002912:	4770      	bx	lr

08002914 <gdispGFlush>:
void gdispGFlush(GDisplay *g) {
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop

08002918 <gdispGDrawPixel>:
void gdispGDrawPixel(GDisplay *g, coord_t x, coord_t y, color_t color) {
 8002918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!q->head)
 800291c:	4d25      	ldr	r5, [pc, #148]	; (80029b4 <gdispGDrawPixel+0x9c>)
	Qadd(&readyQ, me = _gfxCurrentThread);
 800291e:	4f26      	ldr	r7, [pc, #152]	; (80029b8 <gdispGDrawPixel+0xa0>)
 8002920:	4606      	mov	r6, r0
 8002922:	4688      	mov	r8, r1
 8002924:	4691      	mov	r9, r2
 8002926:	469a      	mov	sl, r3
	while (pmutex[0]) {
 8002928:	6a33      	ldr	r3, [r6, #32]
 800292a:	b1d3      	cbz	r3, 8002962 <gdispGDrawPixel+0x4a>
	if (!q->head)
 800292c:	6828      	ldr	r0, [r5, #0]
 800292e:	b130      	cbz	r0, 800293e <gdispGDrawPixel+0x26>
	q->head = t->next;
 8002930:	6804      	ldr	r4, [r0, #0]
 8002932:	602c      	str	r4, [r5, #0]
 8002934:	f003 ffe0 	bl	80068f8 <free>
	if (!q->head)
 8002938:	4620      	mov	r0, r4
 800293a:	2c00      	cmp	r4, #0
 800293c:	d1f8      	bne.n	8002930 <gdispGDrawPixel+0x18>
	if (!readyQ.head)
 800293e:	68ab      	ldr	r3, [r5, #8]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0f1      	beq.n	8002928 <gdispGDrawPixel+0x10>
	Qadd(&readyQ, me = _gfxCurrentThread);
 8002944:	6838      	ldr	r0, [r7, #0]
		q->tail->next = t;
 8002946:	68ea      	ldr	r2, [r5, #12]
		q->tail = t;
 8002948:	60e8      	str	r0, [r5, #12]
	t->next = 0;
 800294a:	2100      	movs	r1, #0
 800294c:	6001      	str	r1, [r0, #0]
		q->tail->next = t;
 800294e:	6010      	str	r0, [r2, #0]
	q->head = t->next;
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	60aa      	str	r2, [r5, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8002954:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 8002956:	603b      	str	r3, [r7, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8002958:	f7fd fee0 	bl	800071c <_gfxTaskSwitch>
	while (pmutex[0]) {
 800295c:	6a33      	ldr	r3, [r6, #32]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1e4      	bne.n	800292c <gdispGDrawPixel+0x14>
			if (g->p.x < g->clipx0 || g->p.x >= g->clipx1 || g->p.y < g->clipy0 || g->p.y >= g->clipy1)
 8002962:	f9b6 3024 	ldrsh.w	r3, [r6, #36]	; 0x24
	g->p.x		= x;
 8002966:	f8a6 802c 	strh.w	r8, [r6, #44]	; 0x2c
	pmutex[0] = 1;
 800296a:	2201      	movs	r2, #1
			if (g->p.x < g->clipx0 || g->p.x >= g->clipx1 || g->p.y < g->clipy0 || g->p.y >= g->clipy1)
 800296c:	4543      	cmp	r3, r8
	g->p.y		= y;
 800296e:	f8a6 902e 	strh.w	r9, [r6, #46]	; 0x2e
	g->p.color	= color;
 8002972:	f8a6 a03c 	strh.w	sl, [r6, #60]	; 0x3c
 8002976:	6232      	str	r2, [r6, #32]
			if (g->p.x < g->clipx0 || g->p.x >= g->clipx1 || g->p.y < g->clipy0 || g->p.y >= g->clipy1)
 8002978:	dc03      	bgt.n	8002982 <gdispGDrawPixel+0x6a>
 800297a:	f9b6 3028 	ldrsh.w	r3, [r6, #40]	; 0x28
 800297e:	4543      	cmp	r3, r8
 8002980:	dc03      	bgt.n	800298a <gdispGDrawPixel+0x72>
	pmutex[0] = 0;
 8002982:	2300      	movs	r3, #0
 8002984:	6233      	str	r3, [r6, #32]
}
 8002986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (g->p.x < g->clipx0 || g->p.x >= g->clipx1 || g->p.y < g->clipy0 || g->p.y >= g->clipy1)
 800298a:	f9b6 3026 	ldrsh.w	r3, [r6, #38]	; 0x26
 800298e:	454b      	cmp	r3, r9
 8002990:	dcf7      	bgt.n	8002982 <gdispGDrawPixel+0x6a>
 8002992:	f9b6 302a 	ldrsh.w	r3, [r6, #42]	; 0x2a
 8002996:	454b      	cmp	r3, r9
 8002998:	ddf3      	ble.n	8002982 <gdispGDrawPixel+0x6a>
			g->p.cx = g->p.cy = 1;
 800299a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800299e:	6333      	str	r3, [r6, #48]	; 0x30
			gdisp_lld_write_start(g);
 80029a0:	4630      	mov	r0, r6
 80029a2:	f7fd fe7b 	bl	800069c <gdisp_lld_write_start>
			gdisp_lld_write_color(g);
 80029a6:	4630      	mov	r0, r6
 80029a8:	f7fd fd14 	bl	80003d4 <gdisp_lld_write_color>
			gdisp_lld_write_stop(g);
 80029ac:	4630      	mov	r0, r6
 80029ae:	f7fd fe73 	bl	8000698 <gdisp_lld_write_stop>
 80029b2:	e7e6      	b.n	8002982 <gdispGDrawPixel+0x6a>
 80029b4:	200000b8 	.word	0x200000b8
 80029b8:	20000948 	.word	0x20000948

080029bc <gdispGDrawLine>:
void gdispGDrawLine(GDisplay *g, coord_t x0, coord_t y0, coord_t x1, coord_t y1, color_t color) {
 80029bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029c0:	b083      	sub	sp, #12
 80029c2:	4699      	mov	r9, r3
 80029c4:	f9bd 8030 	ldrsh.w	r8, [sp, #48]	; 0x30
 80029c8:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
	if (!q->head)
 80029cc:	4c1c      	ldr	r4, [pc, #112]	; (8002a40 <gdispGDrawLine+0x84>)
	Qadd(&readyQ, me = _gfxCurrentThread);
 80029ce:	4e1d      	ldr	r6, [pc, #116]	; (8002a44 <gdispGDrawLine+0x88>)
 80029d0:	9300      	str	r3, [sp, #0]
 80029d2:	4605      	mov	r5, r0
 80029d4:	468b      	mov	fp, r1
 80029d6:	4692      	mov	sl, r2
	while (pmutex[0]) {
 80029d8:	6a2b      	ldr	r3, [r5, #32]
 80029da:	b1d3      	cbz	r3, 8002a12 <gdispGDrawLine+0x56>
	if (!q->head)
 80029dc:	6820      	ldr	r0, [r4, #0]
 80029de:	b130      	cbz	r0, 80029ee <gdispGDrawLine+0x32>
	q->head = t->next;
 80029e0:	6807      	ldr	r7, [r0, #0]
 80029e2:	6027      	str	r7, [r4, #0]
 80029e4:	f003 ff88 	bl	80068f8 <free>
	if (!q->head)
 80029e8:	4638      	mov	r0, r7
 80029ea:	2f00      	cmp	r7, #0
 80029ec:	d1f8      	bne.n	80029e0 <gdispGDrawLine+0x24>
	if (!readyQ.head)
 80029ee:	68a3      	ldr	r3, [r4, #8]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0f1      	beq.n	80029d8 <gdispGDrawLine+0x1c>
	Qadd(&readyQ, me = _gfxCurrentThread);
 80029f4:	6830      	ldr	r0, [r6, #0]
		q->tail->next = t;
 80029f6:	68e2      	ldr	r2, [r4, #12]
		q->tail = t;
 80029f8:	60e0      	str	r0, [r4, #12]
	t->next = 0;
 80029fa:	2100      	movs	r1, #0
 80029fc:	6001      	str	r1, [r0, #0]
		q->tail->next = t;
 80029fe:	6010      	str	r0, [r2, #0]
	q->head = t->next;
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	60a2      	str	r2, [r4, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8002a04:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 8002a06:	6033      	str	r3, [r6, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8002a08:	f7fd fe88 	bl	800071c <_gfxTaskSwitch>
	while (pmutex[0]) {
 8002a0c:	6a2b      	ldr	r3, [r5, #32]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1e4      	bne.n	80029dc <gdispGDrawLine+0x20>
 8002a12:	9301      	str	r3, [sp, #4]
	pmutex[0] = 1;
 8002a14:	2201      	movs	r2, #1
	g->p.color = color;
 8002a16:	f8bd 3000 	ldrh.w	r3, [sp]
 8002a1a:	87ab      	strh	r3, [r5, #60]	; 0x3c
	g->p.x = x0;
 8002a1c:	f8a5 b02c 	strh.w	fp, [r5, #44]	; 0x2c
	g->p.y = y0;
 8002a20:	f8a5 a02e 	strh.w	sl, [r5, #46]	; 0x2e
	g->p.x1 = x1;
 8002a24:	f8a5 9034 	strh.w	r9, [r5, #52]	; 0x34
	g->p.y1 = y1;
 8002a28:	f8a5 8036 	strh.w	r8, [r5, #54]	; 0x36
 8002a2c:	622a      	str	r2, [r5, #32]
	line_clip(g);
 8002a2e:	4628      	mov	r0, r5
 8002a30:	f7fd fe86 	bl	8000740 <line_clip>
	pmutex[0] = 0;
 8002a34:	9b01      	ldr	r3, [sp, #4]
 8002a36:	622b      	str	r3, [r5, #32]
}
 8002a38:	b003      	add	sp, #12
 8002a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a3e:	bf00      	nop
 8002a40:	200000b8 	.word	0x200000b8
 8002a44:	20000948 	.word	0x20000948

08002a48 <gdispGClear>:
void gdispGClear(GDisplay *g, color_t color) {
 8002a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!q->head)
 8002a4c:	4d1f      	ldr	r5, [pc, #124]	; (8002acc <gdispGClear+0x84>)
	Qadd(&readyQ, me = _gfxCurrentThread);
 8002a4e:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8002ad0 <gdispGClear+0x88>
 8002a52:	4606      	mov	r6, r0
 8002a54:	460f      	mov	r7, r1
	while (pmutex[0]) {
 8002a56:	6a33      	ldr	r3, [r6, #32]
 8002a58:	b1e3      	cbz	r3, 8002a94 <gdispGClear+0x4c>
	if (!q->head)
 8002a5a:	6828      	ldr	r0, [r5, #0]
 8002a5c:	b130      	cbz	r0, 8002a6c <gdispGClear+0x24>
	q->head = t->next;
 8002a5e:	6804      	ldr	r4, [r0, #0]
 8002a60:	602c      	str	r4, [r5, #0]
 8002a62:	f003 ff49 	bl	80068f8 <free>
	if (!q->head)
 8002a66:	4620      	mov	r0, r4
 8002a68:	2c00      	cmp	r4, #0
 8002a6a:	d1f8      	bne.n	8002a5e <gdispGClear+0x16>
	if (!readyQ.head)
 8002a6c:	68ab      	ldr	r3, [r5, #8]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d0f1      	beq.n	8002a56 <gdispGClear+0xe>
	Qadd(&readyQ, me = _gfxCurrentThread);
 8002a72:	f8d8 0000 	ldr.w	r0, [r8]
		q->tail->next = t;
 8002a76:	68ea      	ldr	r2, [r5, #12]
		q->tail = t;
 8002a78:	60e8      	str	r0, [r5, #12]
	t->next = 0;
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	6001      	str	r1, [r0, #0]
		q->tail->next = t;
 8002a7e:	6010      	str	r0, [r2, #0]
	q->head = t->next;
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	60aa      	str	r2, [r5, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8002a84:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 8002a86:	f8c8 3000 	str.w	r3, [r8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8002a8a:	f7fd fe47 	bl	800071c <_gfxTaskSwitch>
	while (pmutex[0]) {
 8002a8e:	6a33      	ldr	r3, [r6, #32]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1e2      	bne.n	8002a5a <gdispGClear+0x12>
			g->p.cx = g->g.Width;
 8002a94:	f9b6 4008 	ldrsh.w	r4, [r6, #8]
			g->p.cy = g->g.Height;
 8002a98:	f9b6 100a 	ldrsh.w	r1, [r6, #10]
			g->p.cx = g->g.Width;
 8002a9c:	68b2      	ldr	r2, [r6, #8]
			g->p.x = g->p.y = 0;
 8002a9e:	62f3      	str	r3, [r6, #44]	; 0x2c
	pmutex[0] = 1;
 8002aa0:	2301      	movs	r3, #1
			area = (uint32_t)g->p.cx * g->p.cy;
 8002aa2:	fb04 f401 	mul.w	r4, r4, r1
			g->p.color = color;
 8002aa6:	87b7      	strh	r7, [r6, #60]	; 0x3c
 8002aa8:	6233      	str	r3, [r6, #32]
			g->p.cx = g->g.Width;
 8002aaa:	6332      	str	r2, [r6, #48]	; 0x30
			gdisp_lld_write_start(g);
 8002aac:	4630      	mov	r0, r6
 8002aae:	f7fd fdf5 	bl	800069c <gdisp_lld_write_start>
			for(; area; area--)
 8002ab2:	b124      	cbz	r4, 8002abe <gdispGClear+0x76>
				gdisp_lld_write_color(g);
 8002ab4:	4630      	mov	r0, r6
 8002ab6:	f7fd fc8d 	bl	80003d4 <gdisp_lld_write_color>
			for(; area; area--)
 8002aba:	3c01      	subs	r4, #1
 8002abc:	d1fa      	bne.n	8002ab4 <gdispGClear+0x6c>
			gdisp_lld_write_stop(g);
 8002abe:	4630      	mov	r0, r6
 8002ac0:	f7fd fdea 	bl	8000698 <gdisp_lld_write_stop>
	pmutex[0] = 0;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	6233      	str	r3, [r6, #32]
			return;
 8002ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002acc:	200000b8 	.word	0x200000b8
 8002ad0:	20000948 	.word	0x20000948

08002ad4 <gdispGFillArea>:
void gdispGFillArea(GDisplay *g, coord_t x, coord_t y, coord_t cx, coord_t cy, color_t color) {
 8002ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ad8:	b083      	sub	sp, #12
	if (!q->head)
 8002ada:	4c40      	ldr	r4, [pc, #256]	; (8002bdc <gdispGFillArea+0x108>)
 8002adc:	f9bd 8030 	ldrsh.w	r8, [sp, #48]	; 0x30
 8002ae0:	f8bd b034 	ldrh.w	fp, [sp, #52]	; 0x34
	Qadd(&readyQ, me = _gfxCurrentThread);
 8002ae4:	4f3e      	ldr	r7, [pc, #248]	; (8002be0 <gdispGFillArea+0x10c>)
 8002ae6:	9301      	str	r3, [sp, #4]
 8002ae8:	4605      	mov	r5, r0
 8002aea:	468a      	mov	sl, r1
 8002aec:	4691      	mov	r9, r2
	while (pmutex[0]) {
 8002aee:	6a2b      	ldr	r3, [r5, #32]
 8002af0:	b1d3      	cbz	r3, 8002b28 <gdispGFillArea+0x54>
	if (!q->head)
 8002af2:	6820      	ldr	r0, [r4, #0]
 8002af4:	b130      	cbz	r0, 8002b04 <gdispGFillArea+0x30>
	q->head = t->next;
 8002af6:	6806      	ldr	r6, [r0, #0]
 8002af8:	6026      	str	r6, [r4, #0]
 8002afa:	f003 fefd 	bl	80068f8 <free>
	if (!q->head)
 8002afe:	4630      	mov	r0, r6
 8002b00:	2e00      	cmp	r6, #0
 8002b02:	d1f8      	bne.n	8002af6 <gdispGFillArea+0x22>
	if (!readyQ.head)
 8002b04:	68a3      	ldr	r3, [r4, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d0f1      	beq.n	8002aee <gdispGFillArea+0x1a>
	Qadd(&readyQ, me = _gfxCurrentThread);
 8002b0a:	6838      	ldr	r0, [r7, #0]
		q->tail->next = t;
 8002b0c:	68e2      	ldr	r2, [r4, #12]
		q->tail = t;
 8002b0e:	60e0      	str	r0, [r4, #12]
	t->next = 0;
 8002b10:	2100      	movs	r1, #0
 8002b12:	6001      	str	r1, [r0, #0]
		q->tail->next = t;
 8002b14:	6010      	str	r0, [r2, #0]
	q->head = t->next;
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	60a2      	str	r2, [r4, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8002b1a:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 8002b1c:	603b      	str	r3, [r7, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8002b1e:	f7fd fdfd 	bl	800071c <_gfxTaskSwitch>
	while (pmutex[0]) {
 8002b22:	6a2b      	ldr	r3, [r5, #32]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1e4      	bne.n	8002af2 <gdispGFillArea+0x1e>
	g->p.x = x;
 8002b28:	9801      	ldr	r0, [sp, #4]
	TEST_CLIP_AREA(g) {
 8002b2a:	f9b5 1024 	ldrsh.w	r1, [r5, #36]	; 0x24
	g->p.color = color;
 8002b2e:	f8a5 b03c 	strh.w	fp, [r5, #60]	; 0x3c
	g->p.x = x;
 8002b32:	461a      	mov	r2, r3
 8002b34:	f36a 030f 	bfi	r3, sl, #0, #16
 8002b38:	f369 431f 	bfi	r3, r9, #16, #16
 8002b3c:	f360 020f 	bfi	r2, r0, #0, #16
 8002b40:	f368 421f 	bfi	r2, r8, #16, #16
 8002b44:	62eb      	str	r3, [r5, #44]	; 0x2c
	TEST_CLIP_AREA(g) {
 8002b46:	458a      	cmp	sl, r1
	pmutex[0] = 1;
 8002b48:	f04f 0301 	mov.w	r3, #1
	g->p.x = x;
 8002b4c:	632a      	str	r2, [r5, #48]	; 0x30
 8002b4e:	622b      	str	r3, [r5, #32]
	TEST_CLIP_AREA(g) {
 8002b50:	da07      	bge.n	8002b62 <gdispGFillArea+0x8e>
 8002b52:	4603      	mov	r3, r0
 8002b54:	4453      	add	r3, sl
 8002b56:	1a5e      	subs	r6, r3, r1
 8002b58:	b233      	sxth	r3, r6
 8002b5a:	9301      	str	r3, [sp, #4]
 8002b5c:	862b      	strh	r3, [r5, #48]	; 0x30
 8002b5e:	85a9      	strh	r1, [r5, #44]	; 0x2c
 8002b60:	468a      	mov	sl, r1
 8002b62:	f9b5 3026 	ldrsh.w	r3, [r5, #38]	; 0x26
 8002b66:	4599      	cmp	r9, r3
 8002b68:	da08      	bge.n	8002b7c <gdispGFillArea+0xa8>
 8002b6a:	44c8      	add	r8, r9
 8002b6c:	eba8 0803 	sub.w	r8, r8, r3
 8002b70:	fa0f f888 	sxth.w	r8, r8
 8002b74:	f8a5 8032 	strh.w	r8, [r5, #50]	; 0x32
 8002b78:	85eb      	strh	r3, [r5, #46]	; 0x2e
 8002b7a:	4699      	mov	r9, r3
 8002b7c:	9a01      	ldr	r2, [sp, #4]
 8002b7e:	f9b5 3028 	ldrsh.w	r3, [r5, #40]	; 0x28
 8002b82:	4452      	add	r2, sl
 8002b84:	429a      	cmp	r2, r3
 8002b86:	dd04      	ble.n	8002b92 <gdispGFillArea+0xbe>
 8002b88:	eba3 030a 	sub.w	r3, r3, sl
 8002b8c:	b21b      	sxth	r3, r3
 8002b8e:	9301      	str	r3, [sp, #4]
 8002b90:	862b      	strh	r3, [r5, #48]	; 0x30
 8002b92:	f9b5 302a 	ldrsh.w	r3, [r5, #42]	; 0x2a
 8002b96:	eb09 0208 	add.w	r2, r9, r8
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	dd05      	ble.n	8002baa <gdispGFillArea+0xd6>
 8002b9e:	eba3 0309 	sub.w	r3, r3, r9
 8002ba2:	fa0f f883 	sxth.w	r8, r3
 8002ba6:	f8a5 8032 	strh.w	r8, [r5, #50]	; 0x32
 8002baa:	9b01      	ldr	r3, [sp, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	dd0f      	ble.n	8002bd0 <gdispGFillArea+0xfc>
 8002bb0:	f1b8 0f00 	cmp.w	r8, #0
 8002bb4:	dd0c      	ble.n	8002bd0 <gdispGFillArea+0xfc>
			gdisp_lld_write_start(g);
 8002bb6:	4628      	mov	r0, r5
			area = (uint32_t)g->p.cx * g->p.cy;
 8002bb8:	fb03 f608 	mul.w	r6, r3, r8
			gdisp_lld_write_start(g);
 8002bbc:	f7fd fd6e 	bl	800069c <gdisp_lld_write_start>
				gdisp_lld_write_color(g);
 8002bc0:	4628      	mov	r0, r5
 8002bc2:	f7fd fc07 	bl	80003d4 <gdisp_lld_write_color>
			for(; area; area--)
 8002bc6:	3e01      	subs	r6, #1
 8002bc8:	d1fa      	bne.n	8002bc0 <gdispGFillArea+0xec>
			gdisp_lld_write_stop(g);
 8002bca:	4628      	mov	r0, r5
 8002bcc:	f7fd fd64 	bl	8000698 <gdisp_lld_write_stop>
	pmutex[0] = 0;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	622b      	str	r3, [r5, #32]
}
 8002bd4:	b003      	add	sp, #12
 8002bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bda:	bf00      	nop
 8002bdc:	200000b8 	.word	0x200000b8
 8002be0:	20000948 	.word	0x20000948

08002be4 <WM_Redraw>:
static void WM_Redraw(GHandle gh) {
 8002be4:	b5f0      	push	{r4, r5, r6, r7, lr}
	flags = gh->flags;
 8002be6:	6984      	ldr	r4, [r0, #24]
	gh->flags &= ~(GWIN_FLG_NEEDREDRAW|GWIN_FLG_BGREDRAW|GWIN_FLG_PARENTREVEAL);
 8002be8:	f024 7380 	bic.w	r3, r4, #16777216	; 0x1000000
 8002bec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
	if ((flags & GWIN_FLG_SYSVISIBLE)) {
 8002bf0:	05a6      	lsls	r6, r4, #22
static void WM_Redraw(GHandle gh) {
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	4605      	mov	r5, r0
	gh->flags &= ~(GWIN_FLG_NEEDREDRAW|GWIN_FLG_BGREDRAW|GWIN_FLG_PARENTREVEAL);
 8002bf6:	6183      	str	r3, [r0, #24]
	if ((flags & GWIN_FLG_SYSVISIBLE)) {
 8002bf8:	d506      	bpl.n	8002c08 <WM_Redraw+0x24>
		if (gh->vmt->Redraw)
 8002bfa:	6843      	ldr	r3, [r0, #4]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	b13b      	cbz	r3, 8002c10 <WM_Redraw+0x2c>
}
 8002c00:	b003      	add	sp, #12
 8002c02:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
				gh->vmt->AfterClear(gh);
 8002c06:	4718      	bx	r3
		if ((flags & GWIN_FLG_BGREDRAW)) {
 8002c08:	0422      	lsls	r2, r4, #16
 8002c0a:	d419      	bmi.n	8002c40 <WM_Redraw+0x5c>
}
 8002c0c:	b003      	add	sp, #12
 8002c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		else if ((flags & GWIN_FLG_BGREDRAW)) {
 8002c10:	0420      	lsls	r0, r4, #16
 8002c12:	d5fb      	bpl.n	8002c0c <WM_Redraw+0x28>
			gdispGFillArea(gh->display, gh->x, gh->y, gh->width, gh->height, gh->bgcolor);
 8002c14:	8aef      	ldrh	r7, [r5, #22]
 8002c16:	f9b5 6012 	ldrsh.w	r6, [r5, #18]
 8002c1a:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
 8002c1e:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
 8002c22:	f9b5 200e 	ldrsh.w	r2, [r5, #14]
 8002c26:	68a8      	ldr	r0, [r5, #8]
 8002c28:	e88d 00c0 	stmia.w	sp, {r6, r7}
 8002c2c:	f7ff ff52 	bl	8002ad4 <gdispGFillArea>
			if (!(flags & GWIN_FLG_PARENTREVEAL) && gh->vmt->AfterClear)
 8002c30:	01e1      	lsls	r1, r4, #7
 8002c32:	d4eb      	bmi.n	8002c0c <WM_Redraw+0x28>
 8002c34:	686b      	ldr	r3, [r5, #4]
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d0e7      	beq.n	8002c0c <WM_Redraw+0x28>
				gh->vmt->AfterClear(gh);
 8002c3c:	4628      	mov	r0, r5
 8002c3e:	e7df      	b.n	8002c00 <WM_Redraw+0x1c>
void gwinSetDefaultBgColor(color_t bgclr) {
	defaultBgColor = bgclr;
}

color_t gwinGetDefaultBgColor(void) {
	return defaultBgColor;
 8002c40:	4c25      	ldr	r4, [pc, #148]	; (8002cd8 <WM_Redraw+0xf4>)
			gdispGFillArea(gh->display, gh->x, gh->y, gh->width, gh->height, gwinGetDefaultBgColor());
 8002c42:	f9b5 6012 	ldrsh.w	r6, [r5, #18]
 8002c46:	f8b4 7874 	ldrh.w	r7, [r4, #2164]	; 0x874
 8002c4a:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
 8002c4e:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 8002c52:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 8002c56:	6880      	ldr	r0, [r0, #8]
 8002c58:	e88d 00c0 	stmia.w	sp, {r6, r7}
 8002c5c:	f7ff ff3a 	bl	8002ad4 <gdispGFillArea>
	return gh ? (GHandle)gfxQueueASyncNext(&gh->wmq) : (GHandle)gfxQueueASyncPeek(&_GWINList);
 8002c60:	6a64      	ldr	r4, [r4, #36]	; 0x24
			for(gx = gwinGetNextWindow(0); gx; gx = gwinGetNextWindow(gx)) {
 8002c62:	2c00      	cmp	r4, #0
 8002c64:	d0d2      	beq.n	8002c0c <WM_Redraw+0x28>
				if ((gx->flags & GWIN_FLG_SYSVISIBLE)
 8002c66:	69a3      	ldr	r3, [r4, #24]
 8002c68:	059b      	lsls	r3, r3, #22
 8002c6a:	d503      	bpl.n	8002c74 <WM_Redraw+0x90>
						&& gx->display == gh->display
 8002c6c:	68a6      	ldr	r6, [r4, #8]
 8002c6e:	68ab      	ldr	r3, [r5, #8]
 8002c70:	429e      	cmp	r6, r3
 8002c72:	d004      	beq.n	8002c7e <WM_Redraw+0x9a>
	return gh ? (GHandle)gfxQueueASyncNext(&gh->wmq) : (GHandle)gfxQueueASyncPeek(&_GWINList);
 8002c74:	6824      	ldr	r4, [r4, #0]
			for(gx = gwinGetNextWindow(0); gx; gx = gwinGetNextWindow(gx)) {
 8002c76:	2c00      	cmp	r4, #0
 8002c78:	d1f5      	bne.n	8002c66 <WM_Redraw+0x82>
}
 8002c7a:	b003      	add	sp, #12
 8002c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
						&& gx->x < gh->x+gh->width && gx->y < gh->y+gh->height && gx->x+gx->width >= gh->x && gx->y+gx->height >= gh->y) {
 8002c7e:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
 8002c82:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
 8002c86:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8002c8a:	4403      	add	r3, r0
 8002c8c:	4299      	cmp	r1, r3
 8002c8e:	daf1      	bge.n	8002c74 <WM_Redraw+0x90>
 8002c90:	f9b5 700e 	ldrsh.w	r7, [r5, #14]
 8002c94:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
 8002c98:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
 8002c9c:	443b      	add	r3, r7
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	dae8      	bge.n	8002c74 <WM_Redraw+0x90>
 8002ca2:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 8002ca6:	eb03 0e01 	add.w	lr, r3, r1
 8002caa:	4570      	cmp	r0, lr
 8002cac:	dce2      	bgt.n	8002c74 <WM_Redraw+0x90>
 8002cae:	f9b4 e012 	ldrsh.w	lr, [r4, #18]
 8002cb2:	eb0e 0002 	add.w	r0, lr, r2
 8002cb6:	4287      	cmp	r7, r0
						gx->vmt->Redraw(gx);
 8002cb8:	4620      	mov	r0, r4
						&& gx->x < gh->x+gh->width && gx->y < gh->y+gh->height && gx->x+gx->width >= gh->x && gx->y+gx->height >= gh->y) {
 8002cba:	dcdb      	bgt.n	8002c74 <WM_Redraw+0x90>
					if (gx->vmt->Redraw)
 8002cbc:	6867      	ldr	r7, [r4, #4]
 8002cbe:	68ff      	ldr	r7, [r7, #12]
 8002cc0:	b10f      	cbz	r7, 8002cc6 <WM_Redraw+0xe2>
						gx->vmt->Redraw(gx);
 8002cc2:	47b8      	blx	r7
 8002cc4:	e7d6      	b.n	8002c74 <WM_Redraw+0x90>
						gdispGFillArea(gx->display, gx->x, gx->y, gx->width, gx->height, gx->bgcolor);
 8002cc6:	8ae0      	ldrh	r0, [r4, #22]
 8002cc8:	9001      	str	r0, [sp, #4]
 8002cca:	f8cd e000 	str.w	lr, [sp]
 8002cce:	4630      	mov	r0, r6
 8002cd0:	f7ff ff00 	bl	8002ad4 <gdispGFillArea>
 8002cd4:	e7ce      	b.n	8002c74 <WM_Redraw+0x90>
 8002cd6:	bf00      	nop
 8002cd8:	200000b8 	.word	0x200000b8

08002cdc <gdispGBlitArea>:
void gdispGBlitArea(GDisplay *g, coord_t x, coord_t y, coord_t cx, coord_t cy, coord_t srcx, coord_t srcy, coord_t srccx, const pixel_t *buffer) {
 8002cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ce0:	b085      	sub	sp, #20
	if (!q->head)
 8002ce2:	4d5f      	ldr	r5, [pc, #380]	; (8002e60 <gdispGBlitArea+0x184>)
 8002ce4:	9301      	str	r3, [sp, #4]
 8002ce6:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8002cea:	9302      	str	r3, [sp, #8]
 8002cec:	f9bd a038 	ldrsh.w	sl, [sp, #56]	; 0x38
 8002cf0:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	; 0x44
 8002cf4:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
	Qadd(&readyQ, me = _gfxCurrentThread);
 8002cf8:	f8df 9168 	ldr.w	r9, [pc, #360]	; 8002e64 <gdispGBlitArea+0x188>
 8002cfc:	9303      	str	r3, [sp, #12]
 8002cfe:	4604      	mov	r4, r0
 8002d00:	4688      	mov	r8, r1
 8002d02:	4617      	mov	r7, r2
	while (pmutex[0]) {
 8002d04:	6a23      	ldr	r3, [r4, #32]
 8002d06:	b1e3      	cbz	r3, 8002d42 <gdispGBlitArea+0x66>
	if (!q->head)
 8002d08:	6828      	ldr	r0, [r5, #0]
 8002d0a:	b130      	cbz	r0, 8002d1a <gdispGBlitArea+0x3e>
	q->head = t->next;
 8002d0c:	6806      	ldr	r6, [r0, #0]
 8002d0e:	602e      	str	r6, [r5, #0]
 8002d10:	f003 fdf2 	bl	80068f8 <free>
	if (!q->head)
 8002d14:	4630      	mov	r0, r6
 8002d16:	2e00      	cmp	r6, #0
 8002d18:	d1f8      	bne.n	8002d0c <gdispGBlitArea+0x30>
	if (!readyQ.head)
 8002d1a:	68ab      	ldr	r3, [r5, #8]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0f1      	beq.n	8002d04 <gdispGBlitArea+0x28>
	Qadd(&readyQ, me = _gfxCurrentThread);
 8002d20:	f8d9 0000 	ldr.w	r0, [r9]
		q->tail->next = t;
 8002d24:	68ea      	ldr	r2, [r5, #12]
		q->tail = t;
 8002d26:	60e8      	str	r0, [r5, #12]
	t->next = 0;
 8002d28:	2100      	movs	r1, #0
 8002d2a:	6001      	str	r1, [r0, #0]
		q->tail->next = t;
 8002d2c:	6010      	str	r0, [r2, #0]
	q->head = t->next;
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	60aa      	str	r2, [r5, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8002d32:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 8002d34:	f8c9 3000 	str.w	r3, [r9]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8002d38:	f7fd fcf0 	bl	800071c <_gfxTaskSwitch>
	while (pmutex[0]) {
 8002d3c:	6a23      	ldr	r3, [r4, #32]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1e2      	bne.n	8002d08 <gdispGBlitArea+0x2c>
			if (x < g->clipx0) { cx -= g->clipx0 - x; srcx += g->clipx0 - x; x = g->clipx0; }
 8002d42:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
	pmutex[0] = 1;
 8002d46:	2201      	movs	r2, #1
 8002d48:	4543      	cmp	r3, r8
 8002d4a:	6222      	str	r2, [r4, #32]
 8002d4c:	dd0e      	ble.n	8002d6c <gdispGBlitArea+0x90>
 8002d4e:	9a01      	ldr	r2, [sp, #4]
 8002d50:	fa1f f888 	uxth.w	r8, r8
 8002d54:	4442      	add	r2, r8
 8002d56:	4616      	mov	r6, r2
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	ebab 0808 	sub.w	r8, fp, r8
 8002d5e:	1ab6      	subs	r6, r6, r2
 8002d60:	b231      	sxth	r1, r6
 8002d62:	4442      	add	r2, r8
 8002d64:	9101      	str	r1, [sp, #4]
 8002d66:	fa0f fb82 	sxth.w	fp, r2
 8002d6a:	4698      	mov	r8, r3
			if (y < g->clipy0) { cy -= g->clipy0 - y; srcy += g->clipy0 - x; y = g->clipy0; }
 8002d6c:	f9b4 3026 	ldrsh.w	r3, [r4, #38]	; 0x26
 8002d70:	42bb      	cmp	r3, r7
 8002d72:	dd0c      	ble.n	8002d8e <gdispGBlitArea+0xb2>
 8002d74:	9a02      	ldr	r2, [sp, #8]
 8002d76:	b299      	uxth	r1, r3
 8002d78:	440a      	add	r2, r1
 8002d7a:	44ba      	add	sl, r7
 8002d7c:	eba2 0208 	sub.w	r2, r2, r8
 8002d80:	ebaa 0a01 	sub.w	sl, sl, r1
 8002d84:	b212      	sxth	r2, r2
 8002d86:	9202      	str	r2, [sp, #8]
 8002d88:	fa0f fa8a 	sxth.w	sl, sl
 8002d8c:	461f      	mov	r7, r3
			if (x+cx > g->clipx1)	cx = g->clipx1 - x;
 8002d8e:	9a01      	ldr	r2, [sp, #4]
 8002d90:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 8002d94:	4442      	add	r2, r8
 8002d96:	429a      	cmp	r2, r3
 8002d98:	dd03      	ble.n	8002da2 <gdispGBlitArea+0xc6>
 8002d9a:	eba3 0308 	sub.w	r3, r3, r8
 8002d9e:	b21b      	sxth	r3, r3
 8002da0:	9301      	str	r3, [sp, #4]
			if (y+cy > g->clipy1)	cy = g->clipy1 - y;
 8002da2:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a
			if (srcx+cx > srccx) cx = srccx - srcx;
 8002da6:	9903      	ldr	r1, [sp, #12]
			if (y+cy > g->clipy1)	cy = g->clipy1 - y;
 8002da8:	eb07 020a 	add.w	r2, r7, sl
 8002dac:	429a      	cmp	r2, r3
 8002dae:	bfc4      	itt	gt
 8002db0:	1bdb      	subgt	r3, r3, r7
 8002db2:	fa0f fa83 	sxthgt.w	sl, r3
			if (srcx+cx > srccx) cx = srccx - srcx;
 8002db6:	9b01      	ldr	r3, [sp, #4]
 8002db8:	445b      	add	r3, fp
 8002dba:	428b      	cmp	r3, r1
 8002dbc:	dd03      	ble.n	8002dc6 <gdispGBlitArea+0xea>
 8002dbe:	eba1 060b 	sub.w	r6, r1, fp
 8002dc2:	b233      	sxth	r3, r6
 8002dc4:	9301      	str	r3, [sp, #4]
			if (cx <= 0 || cy <= 0) { MUTEX_EXIT(g); return; }
 8002dc6:	9b01      	ldr	r3, [sp, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	dd44      	ble.n	8002e56 <gdispGBlitArea+0x17a>
 8002dcc:	f1ba 0f00 	cmp.w	sl, #0
 8002dd0:	dd41      	ble.n	8002e56 <gdispGBlitArea+0x17a>
			g->p.x = x;
 8002dd2:	2200      	movs	r2, #0
			buffer += srcy*srccx+srcx;
 8002dd4:	9802      	ldr	r0, [sp, #8]
 8002dd6:	9d03      	ldr	r5, [sp, #12]
			g->p.x = x;
 8002dd8:	f363 020f 	bfi	r2, r3, #0, #16
 8002ddc:	2100      	movs	r1, #0
 8002dde:	f36a 421f 	bfi	r2, sl, #16, #16
 8002de2:	f368 010f 	bfi	r1, r8, #0, #16
			buffer += srcy*srccx+srcx;
 8002de6:	4686      	mov	lr, r0
			g->p.x = x;
 8002de8:	f367 411f 	bfi	r1, r7, #16, #16
			srcx = x + cx;
 8002dec:	b29b      	uxth	r3, r3
			srcy = y + cy;
 8002dee:	eb07 060a 	add.w	r6, r7, sl
			g->p.x = x;
 8002df2:	6322      	str	r2, [r4, #48]	; 0x30
			buffer += srcy*srccx+srcx;
 8002df4:	9a12      	ldr	r2, [sp, #72]	; 0x48
			g->p.x = x;
 8002df6:	62e1      	str	r1, [r4, #44]	; 0x2c
			buffer += srcy*srccx+srcx;
 8002df8:	fb05 ba0e 	mla	sl, r5, lr, fp
			srccx -= cx;
 8002dfc:	eba5 0903 	sub.w	r9, r5, r3
			srcy = y + cy;
 8002e00:	b236      	sxth	r6, r6
			srcx = x + cx;
 8002e02:	4443      	add	r3, r8
			gdisp_lld_write_start(g);
 8002e04:	4620      	mov	r0, r4
			buffer += srcy*srccx+srcx;
 8002e06:	eb02 0a4a 	add.w	sl, r2, sl, lsl #1
			srccx -= cx;
 8002e0a:	fa0f f989 	sxth.w	r9, r9
			srcx = x + cx;
 8002e0e:	b21d      	sxth	r5, r3
			gdisp_lld_write_start(g);
 8002e10:	f7fd fc44 	bl	800069c <gdisp_lld_write_start>
			for(g->p.y = y; g->p.y < srcy; g->p.y++, buffer += srccx) {
 8002e14:	42b7      	cmp	r7, r6
 8002e16:	85e7      	strh	r7, [r4, #46]	; 0x2e
 8002e18:	bfb8      	it	lt
 8002e1a:	ea4f 0949 	movlt.w	r9, r9, lsl #1
 8002e1e:	da17      	bge.n	8002e50 <gdispGBlitArea+0x174>
				for(g->p.x = x; g->p.x < srcx; g->p.x++) {
 8002e20:	45a8      	cmp	r8, r5
 8002e22:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
 8002e26:	da0d      	bge.n	8002e44 <gdispGBlitArea+0x168>
					g->p.color = *buffer++;
 8002e28:	f83a 3b02 	ldrh.w	r3, [sl], #2
 8002e2c:	87a3      	strh	r3, [r4, #60]	; 0x3c
					gdisp_lld_write_color(g);
 8002e2e:	4620      	mov	r0, r4
 8002e30:	f7fd fad0 	bl	80003d4 <gdisp_lld_write_color>
				for(g->p.x = x; g->p.x < srcx; g->p.x++) {
 8002e34:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8002e36:	3301      	adds	r3, #1
 8002e38:	b21b      	sxth	r3, r3
 8002e3a:	429d      	cmp	r5, r3
 8002e3c:	85a3      	strh	r3, [r4, #44]	; 0x2c
 8002e3e:	dcf3      	bgt.n	8002e28 <gdispGBlitArea+0x14c>
 8002e40:	f9b4 702e 	ldrsh.w	r7, [r4, #46]	; 0x2e
			for(g->p.y = y; g->p.y < srcy; g->p.y++, buffer += srccx) {
 8002e44:	3701      	adds	r7, #1
 8002e46:	b23f      	sxth	r7, r7
 8002e48:	42be      	cmp	r6, r7
 8002e4a:	85e7      	strh	r7, [r4, #46]	; 0x2e
 8002e4c:	44ca      	add	sl, r9
 8002e4e:	dce7      	bgt.n	8002e20 <gdispGBlitArea+0x144>
			gdisp_lld_write_stop(g);
 8002e50:	4620      	mov	r0, r4
 8002e52:	f7fd fc21 	bl	8000698 <gdisp_lld_write_stop>
	pmutex[0] = 0;
 8002e56:	2300      	movs	r3, #0
 8002e58:	6223      	str	r3, [r4, #32]
}
 8002e5a:	b005      	add	sp, #20
 8002e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e60:	200000b8 	.word	0x200000b8
 8002e64:	20000948 	.word	0x20000948

08002e68 <gdispGSetClip>:
	void gdispGSetClip(GDisplay *g, coord_t x, coord_t y, coord_t cx, coord_t cy) {
 8002e68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!q->head)
 8002e6c:	4c38      	ldr	r4, [pc, #224]	; (8002f50 <gdispGSetClip+0xe8>)
 8002e6e:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
	Qadd(&readyQ, me = _gfxCurrentThread);
 8002e72:	4e38      	ldr	r6, [pc, #224]	; (8002f54 <gdispGSetClip+0xec>)
 8002e74:	4605      	mov	r5, r0
 8002e76:	4689      	mov	r9, r1
 8002e78:	4690      	mov	r8, r2
 8002e7a:	469a      	mov	sl, r3
	while (pmutex[0]) {
 8002e7c:	6a2b      	ldr	r3, [r5, #32]
 8002e7e:	b1d3      	cbz	r3, 8002eb6 <gdispGSetClip+0x4e>
	if (!q->head)
 8002e80:	6820      	ldr	r0, [r4, #0]
 8002e82:	b130      	cbz	r0, 8002e92 <gdispGSetClip+0x2a>
	q->head = t->next;
 8002e84:	6807      	ldr	r7, [r0, #0]
 8002e86:	6027      	str	r7, [r4, #0]
 8002e88:	f003 fd36 	bl	80068f8 <free>
	if (!q->head)
 8002e8c:	4638      	mov	r0, r7
 8002e8e:	2f00      	cmp	r7, #0
 8002e90:	d1f8      	bne.n	8002e84 <gdispGSetClip+0x1c>
	if (!readyQ.head)
 8002e92:	68a3      	ldr	r3, [r4, #8]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d0f1      	beq.n	8002e7c <gdispGSetClip+0x14>
	Qadd(&readyQ, me = _gfxCurrentThread);
 8002e98:	6830      	ldr	r0, [r6, #0]
		q->tail->next = t;
 8002e9a:	68e2      	ldr	r2, [r4, #12]
		q->tail = t;
 8002e9c:	60e0      	str	r0, [r4, #12]
	t->next = 0;
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	6001      	str	r1, [r0, #0]
		q->tail->next = t;
 8002ea2:	6010      	str	r0, [r2, #0]
	q->head = t->next;
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	60a2      	str	r2, [r4, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8002ea8:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 8002eaa:	6033      	str	r3, [r6, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8002eac:	f7fd fc36 	bl	800071c <_gfxTaskSwitch>
	while (pmutex[0]) {
 8002eb0:	6a2b      	ldr	r3, [r5, #32]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1e4      	bne.n	8002e80 <gdispGSetClip+0x18>
	pmutex[0] = 1;
 8002eb6:	2201      	movs	r2, #1
				if (x < 0) { cx += x; x = 0; }
 8002eb8:	f1b9 0f00 	cmp.w	r9, #0
 8002ebc:	622a      	str	r2, [r5, #32]
 8002ebe:	db3b      	blt.n	8002f38 <gdispGSetClip+0xd0>
				if (y < 0) { cy += y; y = 0; }
 8002ec0:	f1b8 0f00 	cmp.w	r8, #0
 8002ec4:	db31      	blt.n	8002f2a <gdispGSetClip+0xc2>
				if (cx <= 0 || cy <= 0 || x >= g->g.Width || y >= g->g.Height) { x = y = cx = cy = 0; }
 8002ec6:	f1ba 0f00 	cmp.w	sl, #0
 8002eca:	dd25      	ble.n	8002f18 <gdispGSetClip+0xb0>
 8002ecc:	f1bb 0f00 	cmp.w	fp, #0
 8002ed0:	dd22      	ble.n	8002f18 <gdispGSetClip+0xb0>
 8002ed2:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8002ed6:	4589      	cmp	r9, r1
 8002ed8:	db15      	blt.n	8002f06 <gdispGSetClip+0x9e>
 8002eda:	2300      	movs	r3, #0
 8002edc:	f9b5 000a 	ldrsh.w	r0, [r5, #10]
 8002ee0:	4698      	mov	r8, r3
 8002ee2:	4699      	mov	r9, r3
 8002ee4:	461a      	mov	r2, r3
				g->clipx1 = x+cx;	if (g->clipx1 > g->g.Width) g->clipx1 = g->g.Width;
 8002ee6:	428a      	cmp	r2, r1
 8002ee8:	bfa8      	it	ge
 8002eea:	460a      	movge	r2, r1
				g->clipy1 = y+cy;	if (g->clipy1 > g->g.Height) g->clipy1 = g->g.Height;
 8002eec:	4283      	cmp	r3, r0
 8002eee:	bfa8      	it	ge
 8002ef0:	4603      	movge	r3, r0
	pmutex[0] = 0;
 8002ef2:	2100      	movs	r1, #0
				g->clipx1 = x+cx;	if (g->clipx1 > g->g.Width) g->clipx1 = g->g.Width;
 8002ef4:	852a      	strh	r2, [r5, #40]	; 0x28
				g->clipy1 = y+cy;	if (g->clipy1 > g->g.Height) g->clipy1 = g->g.Height;
 8002ef6:	856b      	strh	r3, [r5, #42]	; 0x2a
				g->clipx0 = x;
 8002ef8:	f8a5 9024 	strh.w	r9, [r5, #36]	; 0x24
				g->clipy0 = y;
 8002efc:	f8a5 8026 	strh.w	r8, [r5, #38]	; 0x26
 8002f00:	6229      	str	r1, [r5, #32]
	}
 8002f02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (cx <= 0 || cy <= 0 || x >= g->g.Width || y >= g->g.Height) { x = y = cx = cy = 0; }
 8002f06:	f9b5 000a 	ldrsh.w	r0, [r5, #10]
 8002f0a:	4580      	cmp	r8, r0
 8002f0c:	db19      	blt.n	8002f42 <gdispGSetClip+0xda>
 8002f0e:	2300      	movs	r3, #0
 8002f10:	4698      	mov	r8, r3
 8002f12:	4699      	mov	r9, r3
 8002f14:	461a      	mov	r2, r3
 8002f16:	e7e6      	b.n	8002ee6 <gdispGSetClip+0x7e>
 8002f18:	2300      	movs	r3, #0
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	4698      	mov	r8, r3
 8002f1e:	4699      	mov	r9, r3
 8002f20:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8002f24:	f9b5 000a 	ldrsh.w	r0, [r5, #10]
 8002f28:	e7dd      	b.n	8002ee6 <gdispGSetClip+0x7e>
				if (y < 0) { cy += y; y = 0; }
 8002f2a:	eb0b 0708 	add.w	r7, fp, r8
 8002f2e:	fa0f fb87 	sxth.w	fp, r7
 8002f32:	f04f 0800 	mov.w	r8, #0
 8002f36:	e7c6      	b.n	8002ec6 <gdispGSetClip+0x5e>
				if (x < 0) { cx += x; x = 0; }
 8002f38:	44ca      	add	sl, r9
 8002f3a:	fa0f fa8a 	sxth.w	sl, sl
 8002f3e:	4699      	mov	r9, r3
 8002f40:	e7be      	b.n	8002ec0 <gdispGSetClip+0x58>
 8002f42:	44ca      	add	sl, r9
 8002f44:	eb08 070b 	add.w	r7, r8, fp
 8002f48:	fa0f f28a 	sxth.w	r2, sl
 8002f4c:	b23b      	sxth	r3, r7
 8002f4e:	e7ca      	b.n	8002ee6 <gdispGSetClip+0x7e>
 8002f50:	200000b8 	.word	0x200000b8
 8002f54:	20000948 	.word	0x20000948

08002f58 <gdispGControl>:
		void gdispGControl(GDisplay *g, unsigned what, void *value) {
 8002f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!q->head)
 8002f5c:	4d2b      	ldr	r5, [pc, #172]	; (800300c <gdispGControl+0xb4>)
	Qadd(&readyQ, me = _gfxCurrentThread);
 8002f5e:	4f2c      	ldr	r7, [pc, #176]	; (8003010 <gdispGControl+0xb8>)
 8002f60:	4606      	mov	r6, r0
 8002f62:	4688      	mov	r8, r1
 8002f64:	4691      	mov	r9, r2
	while (pmutex[0]) {
 8002f66:	6a33      	ldr	r3, [r6, #32]
 8002f68:	b1d3      	cbz	r3, 8002fa0 <gdispGControl+0x48>
	if (!q->head)
 8002f6a:	6828      	ldr	r0, [r5, #0]
 8002f6c:	b130      	cbz	r0, 8002f7c <gdispGControl+0x24>
	q->head = t->next;
 8002f6e:	6804      	ldr	r4, [r0, #0]
 8002f70:	602c      	str	r4, [r5, #0]
 8002f72:	f003 fcc1 	bl	80068f8 <free>
	if (!q->head)
 8002f76:	4620      	mov	r0, r4
 8002f78:	2c00      	cmp	r4, #0
 8002f7a:	d1f8      	bne.n	8002f6e <gdispGControl+0x16>
	if (!readyQ.head)
 8002f7c:	68ab      	ldr	r3, [r5, #8]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d0f1      	beq.n	8002f66 <gdispGControl+0xe>
	Qadd(&readyQ, me = _gfxCurrentThread);
 8002f82:	6838      	ldr	r0, [r7, #0]
		q->tail->next = t;
 8002f84:	68ea      	ldr	r2, [r5, #12]
		q->tail = t;
 8002f86:	60e8      	str	r0, [r5, #12]
	t->next = 0;
 8002f88:	2100      	movs	r1, #0
 8002f8a:	6001      	str	r1, [r0, #0]
		q->tail->next = t;
 8002f8c:	6010      	str	r0, [r2, #0]
	q->head = t->next;
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	60aa      	str	r2, [r5, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8002f92:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 8002f94:	603b      	str	r3, [r7, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8002f96:	f7fd fbc1 	bl	800071c <_gfxTaskSwitch>
	while (pmutex[0]) {
 8002f9a:	6a33      	ldr	r3, [r6, #32]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1e4      	bne.n	8002f6a <gdispGControl+0x12>
	pmutex[0] = 1;
 8002fa0:	2301      	movs	r3, #1
			if (what == GDISP_CONTROL_ORIENTATION) {
 8002fa2:	4598      	cmp	r8, r3
			g->p.x = what;
 8002fa4:	f8a6 802c 	strh.w	r8, [r6, #44]	; 0x2c
			g->p.ptr = value;
 8002fa8:	f8c6 9040 	str.w	r9, [r6, #64]	; 0x40
 8002fac:	6233      	str	r3, [r6, #32]
			if (what == GDISP_CONTROL_ORIENTATION) {
 8002fae:	d006      	beq.n	8002fbe <gdispGControl+0x66>
			gdisp_lld_control(g);
 8002fb0:	4630      	mov	r0, r6
 8002fb2:	f7fd fb01 	bl	80005b8 <gdisp_lld_control>
	pmutex[0] = 0;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	6233      	str	r3, [r6, #32]
		}
 8002fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				switch ((orientation_t) value) {
 8002fbe:	fa1f f989 	uxth.w	r9, r9
 8002fc2:	f5b9 7f7a 	cmp.w	r9, #1000	; 0x3e8
 8002fc6:	d017      	beq.n	8002ff8 <gdispGControl+0xa0>
 8002fc8:	f240 33e9 	movw	r3, #1001	; 0x3e9
 8002fcc:	4599      	cmp	r9, r3
 8002fce:	d108      	bne.n	8002fe2 <gdispGControl+0x8a>
					g->p.ptr = g->g.Width >= g->g.Height ? (void *)GDISP_ROTATE_0 : (void *)GDISP_ROTATE_90;
 8002fd0:	f9b6 3008 	ldrsh.w	r3, [r6, #8]
 8002fd4:	f9b6 200a 	ldrsh.w	r2, [r6, #10]
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	bfb4      	ite	lt
 8002fdc:	235a      	movlt	r3, #90	; 0x5a
 8002fde:	2300      	movge	r3, #0
 8002fe0:	6433      	str	r3, [r6, #64]	; 0x40
			gdisp_lld_control(g);
 8002fe2:	4630      	mov	r0, r6
 8002fe4:	f7fd fae8 	bl	80005b8 <gdisp_lld_control>
							g->clipx1 = g->g.Width;
 8002fe8:	68b3      	ldr	r3, [r6, #8]
 8002fea:	62b3      	str	r3, [r6, #40]	; 0x28
							g->clipx0 = 0;
 8002fec:	2200      	movs	r2, #0
 8002fee:	2300      	movs	r3, #0
 8002ff0:	6272      	str	r2, [r6, #36]	; 0x24
 8002ff2:	6233      	str	r3, [r6, #32]
		}
 8002ff4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					g->p.ptr = g->g.Width >= g->g.Height ? (void *)GDISP_ROTATE_90 : (void *)GDISP_ROTATE_0;
 8002ff8:	f9b6 3008 	ldrsh.w	r3, [r6, #8]
 8002ffc:	f9b6 200a 	ldrsh.w	r2, [r6, #10]
 8003000:	4293      	cmp	r3, r2
 8003002:	bfac      	ite	ge
 8003004:	235a      	movge	r3, #90	; 0x5a
 8003006:	2300      	movlt	r3, #0
 8003008:	6433      	str	r3, [r6, #64]	; 0x40
					break;
 800300a:	e7ea      	b.n	8002fe2 <gdispGControl+0x8a>
 800300c:	200000b8 	.word	0x200000b8
 8003010:	20000948 	.word	0x20000948

08003014 <gdispGDrawBox>:
void gdispGDrawBox(GDisplay *g, coord_t x, coord_t y, coord_t cx, coord_t cy, color_t color) {
 8003014:	b430      	push	{r4, r5}
	if (cx <= 0 || cy <= 0) return;
 8003016:	2b00      	cmp	r3, #0
void gdispGDrawBox(GDisplay *g, coord_t x, coord_t y, coord_t cx, coord_t cy, color_t color) {
 8003018:	f9bd 4008 	ldrsh.w	r4, [sp, #8]
 800301c:	f8bd 500c 	ldrh.w	r5, [sp, #12]
	if (cx <= 0 || cy <= 0) return;
 8003020:	dd06      	ble.n	8003030 <gdispGDrawBox+0x1c>
 8003022:	2c00      	cmp	r4, #0
 8003024:	dd04      	ble.n	8003030 <gdispGDrawBox+0x1c>
 8003026:	9503      	str	r5, [sp, #12]
 8003028:	9402      	str	r4, [sp, #8]
}
 800302a:	bc30      	pop	{r4, r5}
 800302c:	f7fd bdc6 	b.w	8000bbc <gdispGDrawBox.part.6>
 8003030:	bc30      	pop	{r4, r5}
 8003032:	4770      	bx	lr

08003034 <gdispBlendColor>:

		return ARGB2COLOR(a1, r1, g1, b1);
	}
#else
	color_t gdispBlendColor(color_t fg, color_t bg, uint8_t alpha)
	{
 8003034:	b5f0      	push	{r4, r5, r6, r7, lr}
		uint16_t fg_ratio = alpha + 1;
		uint16_t bg_ratio = 256 - alpha;
		uint16_t r, g, b;

		r = RED_OF(fg) * fg_ratio;
		g = GREEN_OF(fg) * fg_ratio;
 8003036:	ea4f 0ee0 	mov.w	lr, r0, asr #3
		uint16_t fg_ratio = alpha + 1;
 800303a:	1c57      	adds	r7, r2, #1
		b = BLUE_OF(fg) * fg_ratio;

		r += RED_OF(bg) * bg_ratio;
		g += GREEN_OF(bg) * bg_ratio;
 800303c:	10cc      	asrs	r4, r1, #3
		r = RED_OF(fg) * fg_ratio;
 800303e:	1206      	asrs	r6, r0, #8
		g = GREEN_OF(fg) * fg_ratio;
 8003040:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
		uint16_t bg_ratio = 256 - alpha;
 8003044:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
		b = BLUE_OF(fg) * fg_ratio;
 8003048:	00c5      	lsls	r5, r0, #3
		g = GREEN_OF(fg) * fg_ratio;
 800304a:	fb1e fe07 	smulbb	lr, lr, r7
		g += GREEN_OF(bg) * bg_ratio;
 800304e:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
		r += RED_OF(bg) * bg_ratio;
 8003052:	120b      	asrs	r3, r1, #8
		r = RED_OF(fg) * fg_ratio;
 8003054:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
		g += GREEN_OF(bg) * bg_ratio;
 8003058:	fb02 e004 	mla	r0, r2, r4, lr
		r = RED_OF(fg) * fg_ratio;
 800305c:	fb16 f607 	smulbb	r6, r6, r7
		b = BLUE_OF(fg) * fg_ratio;
 8003060:	b2ec      	uxtb	r4, r5
		r += RED_OF(bg) * bg_ratio;
 8003062:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
		b += BLUE_OF(bg) * bg_ratio;
 8003066:	00c9      	lsls	r1, r1, #3
		r += RED_OF(bg) * bg_ratio;
 8003068:	fb02 6303 	mla	r3, r2, r3, r6
		b = BLUE_OF(fg) * fg_ratio;
 800306c:	fb14 f407 	smulbb	r4, r4, r7
		b += BLUE_OF(bg) * bg_ratio;
 8003070:	b2c9      	uxtb	r1, r1

		r >>= 8;
		g >>= 8;
		b >>= 8;

		return RGB2COLOR(r, g, b);
 8003072:	0940      	lsrs	r0, r0, #5
 8003074:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
		b += BLUE_OF(bg) * bg_ratio;
 8003078:	fb01 4202 	mla	r2, r1, r2, r4
		return RGB2COLOR(r, g, b);
 800307c:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8003080:	4303      	orrs	r3, r0
 8003082:	f3c2 20c4 	ubfx	r0, r2, #11, #5
	}
 8003086:	4318      	orrs	r0, r3
 8003088:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800308a:	bf00      	nop

0800308c <gdispContrastColor>:
#endif

color_t gdispContrastColor(color_t color) {
	uint16_t r, g, b;

	r = RED_OF(color) > 128 ? 0 : 255;
 800308c:	1203      	asrs	r3, r0, #8
 800308e:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8003092:	2b81      	cmp	r3, #129	; 0x81
 8003094:	4a0b      	ldr	r2, [pc, #44]	; (80030c4 <gdispContrastColor+0x38>)
	g = GREEN_OF(color) > 128 ? 0 : 255;
 8003096:	ea4f 01e0 	mov.w	r1, r0, asr #3
	b = BLUE_OF(color) > 128 ? 0 : 255;
 800309a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 800309e:	b2c0      	uxtb	r0, r0
	r = RED_OF(color) > 128 ? 0 : 255;
 80030a0:	bfaa      	itet	ge
 80030a2:	2200      	movge	r2, #0
 80030a4:	f06f 031f 	mvnlt.w	r3, #31
 80030a8:	f44f 63fc 	movge.w	r3, #2016	; 0x7e0
	g = GREEN_OF(color) > 128 ? 0 : 255;
 80030ac:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80030b0:	2980      	cmp	r1, #128	; 0x80
 80030b2:	bfc8      	it	gt
 80030b4:	4613      	movgt	r3, r2
	b = BLUE_OF(color) > 128 ? 0 : 255;
 80030b6:	2881      	cmp	r0, #129	; 0x81
 80030b8:	bfb4      	ite	lt
 80030ba:	201f      	movlt	r0, #31
 80030bc:	2000      	movge	r0, #0

	return RGB2COLOR(r, g, b);
 80030be:	4318      	orrs	r0, r3
}
 80030c0:	b280      	uxth	r0, r0
 80030c2:	4770      	bx	lr
 80030c4:	fffff800 	.word	0xfffff800

080030c8 <_gtimerInit>:
{
 80030c8:	b510      	push	{r4, lr}
	psem->cnt = val;
 80030ca:	4c05      	ldr	r4, [pc, #20]	; (80030e0 <_gtimerInit+0x18>)
 80030cc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	pmutex[0] = 0;
 80030d0:	2300      	movs	r3, #0
	ticks2ms = gfxMillisecondsToTicks(1);
 80030d2:	2001      	movs	r0, #1
	psem->cnt = val;
 80030d4:	6122      	str	r2, [r4, #16]
	pmutex[0] = 0;
 80030d6:	6163      	str	r3, [r4, #20]
 80030d8:	f7fd f908 	bl	80002ec <gfxMillisecondsToTicks>
 80030dc:	61e0      	str	r0, [r4, #28]
 80030de:	bd10      	pop	{r4, pc}
 80030e0:	200000b8 	.word	0x200000b8

080030e4 <_gtimerDeinit>:
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop

080030e8 <gtimerInit>:
	pt->flags = 0;
 80030e8:	2300      	movs	r3, #0
 80030ea:	8203      	strh	r3, [r0, #16]
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop

080030f0 <gtimerDeinit>:
{
 80030f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80030f4:	4d20      	ldr	r5, [pc, #128]	; (8003178 <gtimerDeinit+0x88>)
	Qadd(&readyQ, me = _gfxCurrentThread);
 80030f6:	4e21      	ldr	r6, [pc, #132]	; (800317c <gtimerDeinit+0x8c>)
 80030f8:	696f      	ldr	r7, [r5, #20]
 80030fa:	4681      	mov	r9, r0
	t->next = 0;
 80030fc:	f04f 0800 	mov.w	r8, #0
	while (pmutex[0]) {
 8003100:	b1d7      	cbz	r7, 8003138 <gtimerDeinit+0x48>
	if (!q->head)
 8003102:	6828      	ldr	r0, [r5, #0]
 8003104:	b130      	cbz	r0, 8003114 <gtimerDeinit+0x24>
	q->head = t->next;
 8003106:	6804      	ldr	r4, [r0, #0]
 8003108:	602c      	str	r4, [r5, #0]
 800310a:	f003 fbf5 	bl	80068f8 <free>
	if (!q->head)
 800310e:	4620      	mov	r0, r4
 8003110:	2c00      	cmp	r4, #0
 8003112:	d1f8      	bne.n	8003106 <gtimerDeinit+0x16>
	if (!readyQ.head)
 8003114:	68ab      	ldr	r3, [r5, #8]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d0f2      	beq.n	8003100 <gtimerDeinit+0x10>
	Qadd(&readyQ, me = _gfxCurrentThread);
 800311a:	6831      	ldr	r1, [r6, #0]
		q->tail->next = t;
 800311c:	68ea      	ldr	r2, [r5, #12]
	t->next = 0;
 800311e:	f8c1 8000 	str.w	r8, [r1]
		q->tail->next = t;
 8003122:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 8003124:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 8003126:	60e9      	str	r1, [r5, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8003128:	4608      	mov	r0, r1
	q->head = t->next;
 800312a:	60aa      	str	r2, [r5, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 800312c:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 800312e:	6033      	str	r3, [r6, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8003130:	f7fd faf4 	bl	800071c <_gfxTaskSwitch>
	while (pmutex[0]) {
 8003134:	2f00      	cmp	r7, #0
 8003136:	d1e4      	bne.n	8003102 <gtimerDeinit+0x12>
	if (pt->flags & GTIMER_FLG_SCHEDULED) {
 8003138:	f8b9 3010 	ldrh.w	r3, [r9, #16]
	pmutex[0] = 1;
 800313c:	2201      	movs	r2, #1
 800313e:	071b      	lsls	r3, r3, #28
 8003140:	616a      	str	r2, [r5, #20]
 8003142:	d512      	bpl.n	800316a <gtimerDeinit+0x7a>
		if (pt->next == pt)
 8003144:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8003148:	4599      	cmp	r9, r3
 800314a:	d012      	beq.n	8003172 <gtimerDeinit+0x82>
			pt->next->prev = pt->prev;
 800314c:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8003150:	619a      	str	r2, [r3, #24]
			pt->prev->next = pt->next;
 8003152:	f8d9 1018 	ldr.w	r1, [r9, #24]
			if (pTimerHead == pt)
 8003156:	69aa      	ldr	r2, [r5, #24]
			pt->prev->next = pt->next;
 8003158:	614b      	str	r3, [r1, #20]
			if (pTimerHead == pt)
 800315a:	4591      	cmp	r9, r2
				pTimerHead = pt->next;
 800315c:	bf04      	itt	eq
 800315e:	f8d9 3014 	ldreq.w	r3, [r9, #20]
 8003162:	61ab      	streq	r3, [r5, #24]
		pt->flags = 0;
 8003164:	2300      	movs	r3, #0
 8003166:	f8a9 3010 	strh.w	r3, [r9, #16]
	pmutex[0] = 0;
 800316a:	2300      	movs	r3, #0
 800316c:	616b      	str	r3, [r5, #20]
}
 800316e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			pTimerHead = 0;
 8003172:	61af      	str	r7, [r5, #24]
 8003174:	e7f6      	b.n	8003164 <gtimerDeinit+0x74>
 8003176:	bf00      	nop
 8003178:	200000b8 	.word	0x200000b8
 800317c:	20000948 	.word	0x20000948

08003180 <gtimerStart>:
void gtimerStart(GTimer *pt, GTimerFunction fn, void *param, bool_t periodic, delaytime_t millisec) {
 8003180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003184:	4c4c      	ldr	r4, [pc, #304]	; (80032b8 <gtimerStart+0x138>)
 8003186:	b083      	sub	sp, #12
 8003188:	6965      	ldr	r5, [r4, #20]
 800318a:	9501      	str	r5, [sp, #4]
	Qadd(&readyQ, me = _gfxCurrentThread);
 800318c:	4d4b      	ldr	r5, [pc, #300]	; (80032bc <gtimerStart+0x13c>)
 800318e:	4606      	mov	r6, r0
 8003190:	468b      	mov	fp, r1
 8003192:	4692      	mov	sl, r2
 8003194:	4699      	mov	r9, r3
	t->next = 0;
 8003196:	f04f 0800 	mov.w	r8, #0
	while (pmutex[0]) {
 800319a:	9b01      	ldr	r3, [sp, #4]
 800319c:	b1db      	cbz	r3, 80031d6 <gtimerStart+0x56>
	if (!q->head)
 800319e:	6820      	ldr	r0, [r4, #0]
 80031a0:	b130      	cbz	r0, 80031b0 <gtimerStart+0x30>
	q->head = t->next;
 80031a2:	6807      	ldr	r7, [r0, #0]
 80031a4:	6027      	str	r7, [r4, #0]
 80031a6:	f003 fba7 	bl	80068f8 <free>
	if (!q->head)
 80031aa:	4638      	mov	r0, r7
 80031ac:	2f00      	cmp	r7, #0
 80031ae:	d1f8      	bne.n	80031a2 <gtimerStart+0x22>
	if (!readyQ.head)
 80031b0:	68a3      	ldr	r3, [r4, #8]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d0f1      	beq.n	800319a <gtimerStart+0x1a>
	Qadd(&readyQ, me = _gfxCurrentThread);
 80031b6:	6829      	ldr	r1, [r5, #0]
		q->tail->next = t;
 80031b8:	68e2      	ldr	r2, [r4, #12]
	t->next = 0;
 80031ba:	f8c1 8000 	str.w	r8, [r1]
		q->tail->next = t;
 80031be:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 80031c0:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 80031c2:	60e1      	str	r1, [r4, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 80031c4:	4608      	mov	r0, r1
 80031c6:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 80031c8:	602b      	str	r3, [r5, #0]
	q->head = t->next;
 80031ca:	60a2      	str	r2, [r4, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 80031cc:	f7fd faa6 	bl	800071c <_gfxTaskSwitch>
	while (pmutex[0]) {
 80031d0:	9b01      	ldr	r3, [sp, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1e3      	bne.n	800319e <gtimerStart+0x1e>
	if (!hThread) {
 80031d6:	6f23      	ldr	r3, [r4, #112]	; 0x70
	pmutex[0] = 1;
 80031d8:	2201      	movs	r2, #1
 80031da:	6162      	str	r2, [r4, #20]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d050      	beq.n	8003282 <gtimerStart+0x102>
	if (pt->flags & GTIMER_FLG_SCHEDULED) {
 80031e0:	8a33      	ldrh	r3, [r6, #16]
 80031e2:	0718      	lsls	r0, r3, #28
 80031e4:	d50b      	bpl.n	80031fe <gtimerStart+0x7e>
		if (pt->next == pt)
 80031e6:	6973      	ldr	r3, [r6, #20]
 80031e8:	429e      	cmp	r6, r3
 80031ea:	d047      	beq.n	800327c <gtimerStart+0xfc>
			pt->next->prev = pt->prev;
 80031ec:	69b2      	ldr	r2, [r6, #24]
 80031ee:	619a      	str	r2, [r3, #24]
			pt->prev->next = pt->next;
 80031f0:	69b1      	ldr	r1, [r6, #24]
			if (pTimerHead == pt)
 80031f2:	69a2      	ldr	r2, [r4, #24]
			pt->prev->next = pt->next;
 80031f4:	614b      	str	r3, [r1, #20]
			if (pTimerHead == pt)
 80031f6:	4296      	cmp	r6, r2
				pTimerHead = pt->next;
 80031f8:	bf04      	itt	eq
 80031fa:	6973      	ldreq	r3, [r6, #20]
 80031fc:	61a3      	streq	r3, [r4, #24]
	pt->fn = fn;
 80031fe:	f8c6 b000 	str.w	fp, [r6]
	pt->param = param;
 8003202:	f8c6 a004 	str.w	sl, [r6, #4]
	if (periodic)
 8003206:	f1b9 0f00 	cmp.w	r9, #0
 800320a:	d127      	bne.n	800325c <gtimerStart+0xdc>
	if (millisec == TIME_INFINITE) {
 800320c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	pt->flags = GTIMER_FLG_SCHEDULED;
 800320e:	2308      	movs	r3, #8
	if (millisec == TIME_INFINITE) {
 8003210:	1c51      	adds	r1, r2, #1
	pt->flags = GTIMER_FLG_SCHEDULED;
 8003212:	8233      	strh	r3, [r6, #16]
 8003214:	f04f 030a 	mov.w	r3, #10
	if (millisec == TIME_INFINITE) {
 8003218:	d027      	beq.n	800326a <gtimerStart+0xea>
 800321a:	4610      	mov	r0, r2
		pt->period = gfxMillisecondsToTicks(millisec);
 800321c:	f7fd f866 	bl	80002ec <gfxMillisecondsToTicks>
 8003220:	60f0      	str	r0, [r6, #12]
		pt->when = gfxSystemTicks() + pt->period;
 8003222:	f7fd f85d 	bl	80002e0 <gfxSystemTicks>
 8003226:	68f3      	ldr	r3, [r6, #12]
 8003228:	4403      	add	r3, r0
 800322a:	60b3      	str	r3, [r6, #8]
	if (pTimerHead) {
 800322c:	69a3      	ldr	r3, [r4, #24]
 800322e:	b30b      	cbz	r3, 8003274 <gtimerStart+0xf4>
		pt->prev = pTimerHead->prev;
 8003230:	699a      	ldr	r2, [r3, #24]
 8003232:	61b2      	str	r2, [r6, #24]
		pt->next = pTimerHead;
 8003234:	6173      	str	r3, [r6, #20]
		pt->prev->next = pt;
 8003236:	6156      	str	r6, [r2, #20]
		pt->next->prev = pt;
 8003238:	6973      	ldr	r3, [r6, #20]
 800323a:	619e      	str	r6, [r3, #24]
	if (!(pt->flags & GTIMER_FLG_INFINITE))
 800323c:	8a33      	ldrh	r3, [r6, #16]
 800323e:	079b      	lsls	r3, r3, #30
 8003240:	d407      	bmi.n	8003252 <gtimerStart+0xd2>
	if (psem->cnt < psem->limit)
 8003242:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 8003246:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 800324a:	429a      	cmp	r2, r3
		psem->cnt++;
 800324c:	bfc4      	itt	gt
 800324e:	3301      	addgt	r3, #1
 8003250:	8223      	strhgt	r3, [r4, #16]
	pmutex[0] = 0;
 8003252:	2300      	movs	r3, #0
 8003254:	6163      	str	r3, [r4, #20]
}
 8003256:	b003      	add	sp, #12
 8003258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (millisec == TIME_INFINITE) {
 800325c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		pt->flags |= GTIMER_FLG_PERIODIC;
 800325e:	2309      	movs	r3, #9
	if (millisec == TIME_INFINITE) {
 8003260:	1c51      	adds	r1, r2, #1
		pt->flags |= GTIMER_FLG_PERIODIC;
 8003262:	8233      	strh	r3, [r6, #16]
 8003264:	f04f 030b 	mov.w	r3, #11
	if (millisec == TIME_INFINITE) {
 8003268:	d1d7      	bne.n	800321a <gtimerStart+0x9a>
		pt->flags |= GTIMER_FLG_INFINITE;
 800326a:	8233      	strh	r3, [r6, #16]
	if (pTimerHead) {
 800326c:	69a3      	ldr	r3, [r4, #24]
		pt->period = TIME_INFINITE;
 800326e:	60f2      	str	r2, [r6, #12]
	if (pTimerHead) {
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1dd      	bne.n	8003230 <gtimerStart+0xb0>
		pt->next = pt->prev = pTimerHead = pt;
 8003274:	61a6      	str	r6, [r4, #24]
 8003276:	61b6      	str	r6, [r6, #24]
 8003278:	6176      	str	r6, [r6, #20]
 800327a:	e7df      	b.n	800323c <gtimerStart+0xbc>
			pTimerHead = 0;
 800327c:	2300      	movs	r3, #0
 800327e:	61a3      	str	r3, [r4, #24]
 8003280:	e7bd      	b.n	80031fe <gtimerStart+0x7e>
	me = _gfxCurrentThread;
 8003282:	4b0e      	ldr	r3, [pc, #56]	; (80032bc <gtimerStart+0x13c>)
	if (q->head) {
 8003284:	68a2      	ldr	r2, [r4, #8]
	me = _gfxCurrentThread;
 8003286:	6818      	ldr	r0, [r3, #0]
		t->flags = 0;
 8003288:	9d01      	ldr	r5, [sp, #4]
 800328a:	67a5      	str	r5, [r4, #120]	; 0x78
	t->size = stacksz;
 800328c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003290:	67e1      	str	r1, [r4, #124]	; 0x7c
	t->fn = fn;
 8003292:	490b      	ldr	r1, [pc, #44]	; (80032c0 <gtimerStart+0x140>)
	t->param = param;
 8003294:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
	t->fn = fn;
 8003298:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
	t->next = 0;
 800329c:	6005      	str	r5, [r0, #0]
	if (q->head) {
 800329e:	b14a      	cbz	r2, 80032b4 <gtimerStart+0x134>
		q->tail->next = t;
 80032a0:	68e2      	ldr	r2, [r4, #12]
 80032a2:	6010      	str	r0, [r2, #0]
	_gfxCurrentThread = t;
 80032a4:	4d07      	ldr	r5, [pc, #28]	; (80032c4 <gtimerStart+0x144>)
 80032a6:	60e0      	str	r0, [r4, #12]
	_gfxStartThread(me, t);
 80032a8:	4629      	mov	r1, r5
	_gfxCurrentThread = t;
 80032aa:	601d      	str	r5, [r3, #0]
	_gfxStartThread(me, t);
 80032ac:	f7fe fc22 	bl	8001af4 <_gfxStartThread>
		hThread = gfxThreadCreate(waTimerThread, GTIMER_THREAD_WORKAREA_SIZE, GTIMER_THREAD_PRIORITY, GTimerThreadHandler, 0);
 80032b0:	6725      	str	r5, [r4, #112]	; 0x70
 80032b2:	e795      	b.n	80031e0 <gtimerStart+0x60>
		q->head = q->tail = t;
 80032b4:	60a0      	str	r0, [r4, #8]
 80032b6:	e7f5      	b.n	80032a4 <gtimerStart+0x124>
 80032b8:	200000b8 	.word	0x200000b8
 80032bc:	20000948 	.word	0x20000948
 80032c0:	080009d9 	.word	0x080009d9
 80032c4:	2000012c 	.word	0x2000012c

080032c8 <gtimerStop>:
void gtimerStop(GTimer *pt) {
 80032c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032cc:	4d20      	ldr	r5, [pc, #128]	; (8003350 <gtimerStop+0x88>)
	Qadd(&readyQ, me = _gfxCurrentThread);
 80032ce:	4e21      	ldr	r6, [pc, #132]	; (8003354 <gtimerStop+0x8c>)
 80032d0:	696f      	ldr	r7, [r5, #20]
 80032d2:	4681      	mov	r9, r0
	t->next = 0;
 80032d4:	f04f 0800 	mov.w	r8, #0
	while (pmutex[0]) {
 80032d8:	b1d7      	cbz	r7, 8003310 <gtimerStop+0x48>
	if (!q->head)
 80032da:	6828      	ldr	r0, [r5, #0]
 80032dc:	b130      	cbz	r0, 80032ec <gtimerStop+0x24>
	q->head = t->next;
 80032de:	6804      	ldr	r4, [r0, #0]
 80032e0:	602c      	str	r4, [r5, #0]
 80032e2:	f003 fb09 	bl	80068f8 <free>
	if (!q->head)
 80032e6:	4620      	mov	r0, r4
 80032e8:	2c00      	cmp	r4, #0
 80032ea:	d1f8      	bne.n	80032de <gtimerStop+0x16>
	if (!readyQ.head)
 80032ec:	68ab      	ldr	r3, [r5, #8]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d0f2      	beq.n	80032d8 <gtimerStop+0x10>
	Qadd(&readyQ, me = _gfxCurrentThread);
 80032f2:	6831      	ldr	r1, [r6, #0]
		q->tail->next = t;
 80032f4:	68ea      	ldr	r2, [r5, #12]
	t->next = 0;
 80032f6:	f8c1 8000 	str.w	r8, [r1]
		q->tail->next = t;
 80032fa:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 80032fc:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 80032fe:	60e9      	str	r1, [r5, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8003300:	4608      	mov	r0, r1
	q->head = t->next;
 8003302:	60aa      	str	r2, [r5, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8003304:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 8003306:	6033      	str	r3, [r6, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8003308:	f7fd fa08 	bl	800071c <_gfxTaskSwitch>
	while (pmutex[0]) {
 800330c:	2f00      	cmp	r7, #0
 800330e:	d1e4      	bne.n	80032da <gtimerStop+0x12>
	if (pt->flags & GTIMER_FLG_SCHEDULED) {
 8003310:	f8b9 3010 	ldrh.w	r3, [r9, #16]
	pmutex[0] = 1;
 8003314:	2201      	movs	r2, #1
 8003316:	071b      	lsls	r3, r3, #28
 8003318:	616a      	str	r2, [r5, #20]
 800331a:	d512      	bpl.n	8003342 <gtimerStop+0x7a>
		if (pt->next == pt)
 800331c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8003320:	4599      	cmp	r9, r3
 8003322:	d012      	beq.n	800334a <gtimerStop+0x82>
			pt->next->prev = pt->prev;
 8003324:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8003328:	619a      	str	r2, [r3, #24]
			pt->prev->next = pt->next;
 800332a:	f8d9 1018 	ldr.w	r1, [r9, #24]
			if (pTimerHead == pt)
 800332e:	69aa      	ldr	r2, [r5, #24]
			pt->prev->next = pt->next;
 8003330:	614b      	str	r3, [r1, #20]
			if (pTimerHead == pt)
 8003332:	4591      	cmp	r9, r2
				pTimerHead = pt->next;
 8003334:	bf04      	itt	eq
 8003336:	f8d9 3014 	ldreq.w	r3, [r9, #20]
 800333a:	61ab      	streq	r3, [r5, #24]
		pt->flags = 0;
 800333c:	2300      	movs	r3, #0
 800333e:	f8a9 3010 	strh.w	r3, [r9, #16]
	pmutex[0] = 0;
 8003342:	2300      	movs	r3, #0
 8003344:	616b      	str	r3, [r5, #20]
}
 8003346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			pTimerHead = 0;
 800334a:	61af      	str	r7, [r5, #24]
 800334c:	e7f6      	b.n	800333c <gtimerStop+0x74>
 800334e:	bf00      	nop
 8003350:	200000b8 	.word	0x200000b8
 8003354:	20000948 	.word	0x20000948

08003358 <gtimerIsActive>:
	return (pt->flags & GTIMER_FLG_SCHEDULED) ? TRUE : FALSE;
 8003358:	8a00      	ldrh	r0, [r0, #16]
 800335a:	f340 00c0 	sbfx	r0, r0, #3, #1
}
 800335e:	b2c0      	uxtb	r0, r0
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop

08003364 <gtimerJab>:
void gtimerJab(GTimer *pt) {
 8003364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003368:	4d1b      	ldr	r5, [pc, #108]	; (80033d8 <gtimerJab+0x74>)
	Qadd(&readyQ, me = _gfxCurrentThread);
 800336a:	4e1c      	ldr	r6, [pc, #112]	; (80033dc <gtimerJab+0x78>)
 800336c:	696f      	ldr	r7, [r5, #20]
 800336e:	4681      	mov	r9, r0
	t->next = 0;
 8003370:	f04f 0800 	mov.w	r8, #0
	while (pmutex[0]) {
 8003374:	b1d7      	cbz	r7, 80033ac <gtimerJab+0x48>
	if (!q->head)
 8003376:	6828      	ldr	r0, [r5, #0]
 8003378:	b130      	cbz	r0, 8003388 <gtimerJab+0x24>
	q->head = t->next;
 800337a:	6804      	ldr	r4, [r0, #0]
 800337c:	602c      	str	r4, [r5, #0]
 800337e:	f003 fabb 	bl	80068f8 <free>
	if (!q->head)
 8003382:	4620      	mov	r0, r4
 8003384:	2c00      	cmp	r4, #0
 8003386:	d1f8      	bne.n	800337a <gtimerJab+0x16>
	if (!readyQ.head)
 8003388:	68ab      	ldr	r3, [r5, #8]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d0f2      	beq.n	8003374 <gtimerJab+0x10>
	Qadd(&readyQ, me = _gfxCurrentThread);
 800338e:	6831      	ldr	r1, [r6, #0]
		q->tail->next = t;
 8003390:	68ea      	ldr	r2, [r5, #12]
	t->next = 0;
 8003392:	f8c1 8000 	str.w	r8, [r1]
		q->tail->next = t;
 8003396:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 8003398:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 800339a:	60e9      	str	r1, [r5, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 800339c:	4608      	mov	r0, r1
	q->head = t->next;
 800339e:	60aa      	str	r2, [r5, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 80033a0:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 80033a2:	6033      	str	r3, [r6, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 80033a4:	f7fd f9ba 	bl	800071c <_gfxTaskSwitch>
	while (pmutex[0]) {
 80033a8:	2f00      	cmp	r7, #0
 80033aa:	d1e4      	bne.n	8003376 <gtimerJab+0x12>
	if (psem->cnt < psem->limit)
 80033ac:	f9b5 2010 	ldrsh.w	r2, [r5, #16]
	pt->flags |= GTIMER_FLG_JABBED;
 80033b0:	f8b9 3010 	ldrh.w	r3, [r9, #16]
 80033b4:	f9b5 1012 	ldrsh.w	r1, [r5, #18]
 80033b8:	f043 0304 	orr.w	r3, r3, #4
	pmutex[0] = 1;
 80033bc:	2001      	movs	r0, #1
	if (psem->cnt < psem->limit)
 80033be:	4291      	cmp	r1, r2
 80033c0:	f8a9 3010 	strh.w	r3, [r9, #16]
		psem->cnt++;
 80033c4:	bfc8      	it	gt
 80033c6:	1812      	addgt	r2, r2, r0
	pmutex[0] = 0;
 80033c8:	f04f 0300 	mov.w	r3, #0
	pmutex[0] = 1;
 80033cc:	6168      	str	r0, [r5, #20]
		psem->cnt++;
 80033ce:	bfc8      	it	gt
 80033d0:	822a      	strhgt	r2, [r5, #16]
	pmutex[0] = 0;
 80033d2:	616b      	str	r3, [r5, #20]

	// Bump the thread
	gfxSemSignal(&waitsem);
	gfxMutexExit(&mutex);
}
 80033d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033d8:	200000b8 	.word	0x200000b8
 80033dc:	20000948 	.word	0x20000948

080033e0 <gtimerJabI>:
	if (psem->cnt < psem->limit)
 80033e0:	4908      	ldr	r1, [pc, #32]	; (8003404 <gtimerJabI+0x24>)

void gtimerJabI(GTimer *pt) {
	// Jab it!
	pt->flags |= GTIMER_FLG_JABBED;
 80033e2:	8a03      	ldrh	r3, [r0, #16]
 80033e4:	f9b1 2010 	ldrsh.w	r2, [r1, #16]
void gtimerJabI(GTimer *pt) {
 80033e8:	b410      	push	{r4}
 80033ea:	f9b1 4012 	ldrsh.w	r4, [r1, #18]
 80033ee:	4294      	cmp	r4, r2
	pt->flags |= GTIMER_FLG_JABBED;
 80033f0:	f043 0304 	orr.w	r3, r3, #4
		psem->cnt++;
 80033f4:	bfc8      	it	gt
 80033f6:	3201      	addgt	r2, #1
 80033f8:	8203      	strh	r3, [r0, #16]
 80033fa:	bfc8      	it	gt
 80033fc:	820a      	strhgt	r2, [r1, #16]

	// Bump the thread
	gfxSemSignalI(&waitsem);
}
 80033fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	200000b8 	.word	0x200000b8

08003408 <_gwinInit>:
{
 8003408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	psem->cnt = val;
 800340c:	4d42      	ldr	r5, [pc, #264]	; (8003518 <_gwinInit+0x110>)
	Qadd(&readyQ, me = _gfxCurrentThread);
 800340e:	4e43      	ldr	r6, [pc, #268]	; (800351c <_gwinInit+0x114>)
 8003410:	f8d5 8014 	ldr.w	r8, [r5, #20]
 8003414:	2700      	movs	r7, #0
	psem->cnt = val;
 8003416:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800341a:	622b      	str	r3, [r5, #32]
 800341c:	62af      	str	r7, [r5, #40]	; 0x28
 800341e:	626f      	str	r7, [r5, #36]	; 0x24
	pt->flags = 0;
 8003420:	f8a5 7040 	strh.w	r7, [r5, #64]	; 0x40
	while (pmutex[0]) {
 8003424:	f1b8 0f00 	cmp.w	r8, #0
 8003428:	d01a      	beq.n	8003460 <_gwinInit+0x58>
	if (!q->head)
 800342a:	6828      	ldr	r0, [r5, #0]
 800342c:	b130      	cbz	r0, 800343c <_gwinInit+0x34>
	q->head = t->next;
 800342e:	6804      	ldr	r4, [r0, #0]
 8003430:	602c      	str	r4, [r5, #0]
 8003432:	f003 fa61 	bl	80068f8 <free>
	if (!q->head)
 8003436:	4620      	mov	r0, r4
 8003438:	2c00      	cmp	r4, #0
 800343a:	d1f8      	bne.n	800342e <_gwinInit+0x26>
	if (!readyQ.head)
 800343c:	68ab      	ldr	r3, [r5, #8]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d0f0      	beq.n	8003424 <_gwinInit+0x1c>
	Qadd(&readyQ, me = _gfxCurrentThread);
 8003442:	6831      	ldr	r1, [r6, #0]
		q->tail->next = t;
 8003444:	68ea      	ldr	r2, [r5, #12]
	t->next = 0;
 8003446:	600f      	str	r7, [r1, #0]
		q->tail->next = t;
 8003448:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 800344a:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 800344c:	60e9      	str	r1, [r5, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 800344e:	4608      	mov	r0, r1
	q->head = t->next;
 8003450:	60aa      	str	r2, [r5, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8003452:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 8003454:	6033      	str	r3, [r6, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8003456:	f7fd f961 	bl	800071c <_gfxTaskSwitch>
	while (pmutex[0]) {
 800345a:	f1b8 0f00 	cmp.w	r8, #0
 800345e:	d1e4      	bne.n	800342a <_gwinInit+0x22>
	if (!hThread) {
 8003460:	6f2b      	ldr	r3, [r5, #112]	; 0x70
	pmutex[0] = 1;
 8003462:	2201      	movs	r2, #1
 8003464:	616a      	str	r2, [r5, #20]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d039      	beq.n	80034de <_gwinInit+0xd6>
	if (pt->flags & GTIMER_FLG_SCHEDULED) {
 800346a:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
 800346e:	071b      	lsls	r3, r3, #28
 8003470:	d419      	bmi.n	80034a6 <_gwinInit+0x9e>
 8003472:	69ab      	ldr	r3, [r5, #24]
 8003474:	4a2a      	ldr	r2, [pc, #168]	; (8003520 <_gwinInit+0x118>)
	pt->fn = fn;
 8003476:	492b      	ldr	r1, [pc, #172]	; (8003524 <_gwinInit+0x11c>)
 8003478:	6329      	str	r1, [r5, #48]	; 0x30
	pt->param = param;
 800347a:	2400      	movs	r4, #0
		pt->flags |= GTIMER_FLG_INFINITE;
 800347c:	200b      	movs	r0, #11
		pt->period = TIME_INFINITE;
 800347e:	f04f 31ff 	mov.w	r1, #4294967295
	pt->param = param;
 8003482:	636c      	str	r4, [r5, #52]	; 0x34
		pt->flags |= GTIMER_FLG_INFINITE;
 8003484:	f8a5 0040 	strh.w	r0, [r5, #64]	; 0x40
		pt->period = TIME_INFINITE;
 8003488:	63e9      	str	r1, [r5, #60]	; 0x3c
	if (pTimerHead) {
 800348a:	b323      	cbz	r3, 80034d6 <_gwinInit+0xce>
		pt->prev = pTimerHead->prev;
 800348c:	6999      	ldr	r1, [r3, #24]
		pt->next = pTimerHead;
 800348e:	646b      	str	r3, [r5, #68]	; 0x44
		pt->prev = pTimerHead->prev;
 8003490:	64a9      	str	r1, [r5, #72]	; 0x48
		pt->prev->next = pt;
 8003492:	614a      	str	r2, [r1, #20]
		pt->next->prev = pt;
 8003494:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003496:	619a      	str	r2, [r3, #24]
	_GWINwm = (GWindowManager *)&GNullWindowManager;
 8003498:	4b23      	ldr	r3, [pc, #140]	; (8003528 <_gwinInit+0x120>)
 800349a:	4a24      	ldr	r2, [pc, #144]	; (800352c <_gwinInit+0x124>)
 800349c:	601a      	str	r2, [r3, #0]
	pmutex[0] = 0;
 800349e:	2300      	movs	r3, #0
 80034a0:	616b      	str	r3, [r5, #20]
 80034a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (pt->next == pt)
 80034a6:	6c69      	ldr	r1, [r5, #68]	; 0x44
 80034a8:	4a1d      	ldr	r2, [pc, #116]	; (8003520 <_gwinInit+0x118>)
 80034aa:	4291      	cmp	r1, r2
 80034ac:	d009      	beq.n	80034c2 <_gwinInit+0xba>
			pt->next->prev = pt->prev;
 80034ae:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80034b0:	618b      	str	r3, [r1, #24]
			pt->prev->next = pt->next;
 80034b2:	6ca8      	ldr	r0, [r5, #72]	; 0x48
			if (pTimerHead == pt)
 80034b4:	69ab      	ldr	r3, [r5, #24]
			pt->prev->next = pt->next;
 80034b6:	6141      	str	r1, [r0, #20]
			if (pTimerHead == pt)
 80034b8:	4293      	cmp	r3, r2
				pTimerHead = pt->next;
 80034ba:	bf04      	itt	eq
 80034bc:	6c6b      	ldreq	r3, [r5, #68]	; 0x44
 80034be:	61ab      	streq	r3, [r5, #24]
 80034c0:	e7d9      	b.n	8003476 <_gwinInit+0x6e>
	pt->fn = fn;
 80034c2:	4b18      	ldr	r3, [pc, #96]	; (8003524 <_gwinInit+0x11c>)
 80034c4:	632b      	str	r3, [r5, #48]	; 0x30
	pt->param = param;
 80034c6:	2000      	movs	r0, #0
		pt->flags |= GTIMER_FLG_INFINITE;
 80034c8:	210b      	movs	r1, #11
		pt->period = TIME_INFINITE;
 80034ca:	f04f 33ff 	mov.w	r3, #4294967295
	pt->param = param;
 80034ce:	6368      	str	r0, [r5, #52]	; 0x34
		pt->flags |= GTIMER_FLG_INFINITE;
 80034d0:	f8a5 1040 	strh.w	r1, [r5, #64]	; 0x40
		pt->period = TIME_INFINITE;
 80034d4:	63eb      	str	r3, [r5, #60]	; 0x3c
		pt->next = pt->prev = pTimerHead = pt;
 80034d6:	61aa      	str	r2, [r5, #24]
 80034d8:	64aa      	str	r2, [r5, #72]	; 0x48
 80034da:	646a      	str	r2, [r5, #68]	; 0x44
 80034dc:	e7dc      	b.n	8003498 <_gwinInit+0x90>
	me = _gfxCurrentThread;
 80034de:	4b0f      	ldr	r3, [pc, #60]	; (800351c <_gwinInit+0x114>)
	if (q->head) {
 80034e0:	68aa      	ldr	r2, [r5, #8]
	me = _gfxCurrentThread;
 80034e2:	6818      	ldr	r0, [r3, #0]
	t->fn = fn;
 80034e4:	4912      	ldr	r1, [pc, #72]	; (8003530 <_gwinInit+0x128>)
		t->flags = 0;
 80034e6:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
	t->size = stacksz;
 80034ea:	f44f 6400 	mov.w	r4, #2048	; 0x800
	t->param = param;
 80034ee:	f8c5 8084 	str.w	r8, [r5, #132]	; 0x84
	t->size = stacksz;
 80034f2:	67ec      	str	r4, [r5, #124]	; 0x7c
	t->fn = fn;
 80034f4:	f8c5 1080 	str.w	r1, [r5, #128]	; 0x80
	t->next = 0;
 80034f8:	f8c0 8000 	str.w	r8, [r0]
	if (q->head) {
 80034fc:	b14a      	cbz	r2, 8003512 <_gwinInit+0x10a>
		q->tail->next = t;
 80034fe:	68ea      	ldr	r2, [r5, #12]
 8003500:	6010      	str	r0, [r2, #0]
	_gfxCurrentThread = t;
 8003502:	4c0c      	ldr	r4, [pc, #48]	; (8003534 <_gwinInit+0x12c>)
 8003504:	60e8      	str	r0, [r5, #12]
	_gfxStartThread(me, t);
 8003506:	4621      	mov	r1, r4
	_gfxCurrentThread = t;
 8003508:	601c      	str	r4, [r3, #0]
	_gfxStartThread(me, t);
 800350a:	f7fe faf3 	bl	8001af4 <_gfxStartThread>
		hThread = gfxThreadCreate(waTimerThread, GTIMER_THREAD_WORKAREA_SIZE, GTIMER_THREAD_PRIORITY, GTimerThreadHandler, 0);
 800350e:	672c      	str	r4, [r5, #112]	; 0x70
 8003510:	e7ab      	b.n	800346a <_gwinInit+0x62>
		q->head = q->tail = t;
 8003512:	60a8      	str	r0, [r5, #8]
 8003514:	e7f5      	b.n	8003502 <_gwinInit+0xfa>
 8003516:	bf00      	nop
 8003518:	200000b8 	.word	0x200000b8
 800351c:	20000948 	.word	0x20000948
 8003520:	200000e8 	.word	0x200000e8
 8003524:	08001c79 	.word	0x08001c79
 8003528:	20000944 	.word	0x20000944
 800352c:	08007d80 	.word	0x08007d80
 8003530:	080009d9 	.word	0x080009d9
 8003534:	2000012c 	.word	0x2000012c

08003538 <_gwindowCreate>:
GHandle _gwindowCreate(GDisplay *g, GWindowObject *pgw, const GWindowInit *pInit, const gwinVMT *vmt, uint32_t flags) {
 8003538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800353a:	4607      	mov	r7, r0
 800353c:	b083      	sub	sp, #12
 800353e:	4616      	mov	r6, r2
		if (!(pgw = gfxAlloc(vmt->size)))
 8003540:	685d      	ldr	r5, [r3, #4]
	if (!pgw) {
 8003542:	2900      	cmp	r1, #0
 8003544:	d02c      	beq.n	80035a0 <_gwindowCreate+0x68>
		pgw->flags = flags;
 8003546:	9a08      	ldr	r2, [sp, #32]
 8003548:	618a      	str	r2, [r1, #24]
 800354a:	460c      	mov	r4, r1
	pgw->color = defaultFgColor;
 800354c:	491b      	ldr	r1, [pc, #108]	; (80035bc <_gwindowCreate+0x84>)
	pgw->bgcolor = defaultBgColor;
 800354e:	4a1c      	ldr	r2, [pc, #112]	; (80035c0 <_gwindowCreate+0x88>)
	pgw->color = defaultFgColor;
 8003550:	8809      	ldrh	r1, [r1, #0]
	pgw->bgcolor = defaultBgColor;
 8003552:	f8b2 2874 	ldrh.w	r2, [r2, #2164]	; 0x874
	pgw->display = g;
 8003556:	60a7      	str	r7, [r4, #8]
	if (vmt->size > sizeof(GWindowObject))
 8003558:	2d1c      	cmp	r5, #28
	pgw->vmt = vmt;
 800355a:	6063      	str	r3, [r4, #4]
	pgw->color = defaultFgColor;
 800355c:	82a1      	strh	r1, [r4, #20]
	pgw->bgcolor = defaultBgColor;
 800355e:	82e2      	strh	r2, [r4, #22]
	if (vmt->size > sizeof(GWindowObject))
 8003560:	d80f      	bhi.n	8003582 <_gwindowCreate+0x4a>
	if (!_GWINwm->vmt->Add(gh, pInit))
 8003562:	4b18      	ldr	r3, [pc, #96]	; (80035c4 <_gwindowCreate+0x8c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4631      	mov	r1, r6
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	4620      	mov	r0, r4
 800356e:	4798      	blx	r3
 8003570:	4605      	mov	r5, r0
 8003572:	b918      	cbnz	r0, 800357c <_gwindowCreate+0x44>
		if ((pgw->flags & GWIN_FLG_DYNAMIC))
 8003574:	69a3      	ldr	r3, [r4, #24]
 8003576:	04db      	lsls	r3, r3, #19
 8003578:	d40b      	bmi.n	8003592 <_gwindowCreate+0x5a>
			return 0;
 800357a:	2400      	movs	r4, #0
}
 800357c:	4620      	mov	r0, r4
 800357e:	b003      	add	sp, #12
 8003580:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(pgw+1, 0, vmt->size - sizeof(GWindowObject));
 8003582:	f1a5 021c 	sub.w	r2, r5, #28
 8003586:	2100      	movs	r1, #0
 8003588:	f104 001c 	add.w	r0, r4, #28
 800358c:	f003 f9bc 	bl	8006908 <memset>
 8003590:	e7e7      	b.n	8003562 <_gwindowCreate+0x2a>
 8003592:	4620      	mov	r0, r4
 8003594:	f003 f9b0 	bl	80068f8 <free>
		return 0;
 8003598:	462c      	mov	r4, r5
}
 800359a:	4620      	mov	r0, r4
 800359c:	b003      	add	sp, #12
 800359e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return malloc(sz);
 80035a0:	4628      	mov	r0, r5
		if (!(pgw = gfxAlloc(vmt->size)))
 80035a2:	9301      	str	r3, [sp, #4]
 80035a4:	f003 f9a0 	bl	80068e8 <malloc>
 80035a8:	9b01      	ldr	r3, [sp, #4]
 80035aa:	2800      	cmp	r0, #0
 80035ac:	d0e5      	beq.n	800357a <_gwindowCreate+0x42>
		pgw->flags = flags|GWIN_FLG_DYNAMIC;
 80035ae:	9a08      	ldr	r2, [sp, #32]
 80035b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80035b4:	6182      	str	r2, [r0, #24]
 80035b6:	4604      	mov	r4, r0
 80035b8:	e7c8      	b.n	800354c <_gwindowCreate+0x14>
 80035ba:	bf00      	nop
 80035bc:	20000034 	.word	0x20000034
 80035c0:	200000b8 	.word	0x200000b8
 80035c4:	20000944 	.word	0x20000944

080035c8 <_gwinDestroy>:
	if (!gh)
 80035c8:	2800      	cmp	r0, #0
 80035ca:	d06b      	beq.n	80036a4 <_gwinDestroy+0xdc>
			if ((gh->flags & GWIN_FLG_VISIBLE)) {
 80035cc:	6983      	ldr	r3, [r0, #24]
 80035ce:	05da      	lsls	r2, r3, #23
void _gwinDestroy(GHandle gh, GRedrawMethod how) {
 80035d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035d4:	4606      	mov	r6, r0
 80035d6:	4688      	mov	r8, r1
				RedrawPending |= DOREDRAW_INVISIBLES;
 80035d8:	4d3c      	ldr	r5, [pc, #240]	; (80036cc <_gwinDestroy+0x104>)
			if ((gh->flags & GWIN_FLG_VISIBLE)) {
 80035da:	d41d      	bmi.n	8003618 <_gwinDestroy+0x50>
	if (!RedrawPending)
 80035dc:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 80035e0:	b143      	cbz	r3, 80035f4 <_gwinDestroy+0x2c>
	if (how == REDRAW_WAIT)
 80035e2:	f1b8 0f00 	cmp.w	r8, #0
 80035e6:	d063      	beq.n	80036b0 <_gwinDestroy+0xe8>
	else if (how == REDRAW_NOWAIT && !gfxSemWait(&gwinsem, TIME_IMMEDIATE))
 80035e8:	f1b8 0f01 	cmp.w	r8, #1
 80035ec:	d066      	beq.n	80036bc <_gwinDestroy+0xf4>
 80035ee:	4640      	mov	r0, r8
 80035f0:	f7fd ffe2 	bl	80015b8 <_gwinFlushRedraws.part.8>
		_GWINwm->vmt->Delete(gh);
 80035f4:	4b36      	ldr	r3, [pc, #216]	; (80036d0 <_gwinDestroy+0x108>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4630      	mov	r0, r6
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	4798      	blx	r3
	if (gh->vmt->Destroy)
 8003600:	6873      	ldr	r3, [r6, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	b10b      	cbz	r3, 800360a <_gwinDestroy+0x42>
		gh->vmt->Destroy(gh);
 8003606:	4630      	mov	r0, r6
 8003608:	4798      	blx	r3
	if (gh->flags & GWIN_FLG_DYNAMIC) {
 800360a:	69b3      	ldr	r3, [r6, #24]
 800360c:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 8003610:	d149      	bne.n	80036a6 <_gwinDestroy+0xde>
		gh->flags = 0;							// To be sure, to be sure
 8003612:	61b3      	str	r3, [r6, #24]
 8003614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				RedrawPending |= DOREDRAW_INVISIBLES;
 8003618:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
	Qadd(&readyQ, me = _gfxCurrentThread);
 800361c:	4f2d      	ldr	r7, [pc, #180]	; (80036d4 <_gwinDestroy+0x10c>)
 800361e:	f8d5 9014 	ldr.w	r9, [r5, #20]
				gh->flags &= ~(GWIN_FLG_VISIBLE|GWIN_FLG_SYSVISIBLE);
 8003622:	f423 7340 	bic.w	r3, r3, #768	; 0x300
				gh->flags |= (GWIN_FLG_NEEDREDRAW|GWIN_FLG_BGREDRAW);
 8003626:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
				RedrawPending |= DOREDRAW_INVISIBLES;
 800362a:	f042 0201 	orr.w	r2, r2, #1
				gh->flags |= (GWIN_FLG_NEEDREDRAW|GWIN_FLG_BGREDRAW);
 800362e:	6183      	str	r3, [r0, #24]
				RedrawPending |= DOREDRAW_INVISIBLES;
 8003630:	f885 202c 	strb.w	r2, [r5, #44]	; 0x2c
	t->next = 0;
 8003634:	f04f 0a00 	mov.w	sl, #0
	while (pmutex[0]) {
 8003638:	f1b9 0f00 	cmp.w	r9, #0
 800363c:	d01b      	beq.n	8003676 <_gwinDestroy+0xae>
	if (!q->head)
 800363e:	6828      	ldr	r0, [r5, #0]
 8003640:	b130      	cbz	r0, 8003650 <_gwinDestroy+0x88>
	q->head = t->next;
 8003642:	6804      	ldr	r4, [r0, #0]
 8003644:	602c      	str	r4, [r5, #0]
		free(ptr);
 8003646:	f003 f957 	bl	80068f8 <free>
	if (!q->head)
 800364a:	4620      	mov	r0, r4
 800364c:	2c00      	cmp	r4, #0
 800364e:	d1f8      	bne.n	8003642 <_gwinDestroy+0x7a>
	if (!readyQ.head)
 8003650:	68ab      	ldr	r3, [r5, #8]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d0f0      	beq.n	8003638 <_gwinDestroy+0x70>
	Qadd(&readyQ, me = _gfxCurrentThread);
 8003656:	6839      	ldr	r1, [r7, #0]
		q->tail->next = t;
 8003658:	68ea      	ldr	r2, [r5, #12]
	t->next = 0;
 800365a:	f8c1 a000 	str.w	sl, [r1]
		q->tail->next = t;
 800365e:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 8003660:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 8003662:	60e9      	str	r1, [r5, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8003664:	4608      	mov	r0, r1
	q->head = t->next;
 8003666:	60aa      	str	r2, [r5, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8003668:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 800366a:	603b      	str	r3, [r7, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 800366c:	f7fd f856 	bl	800071c <_gfxTaskSwitch>
	while (pmutex[0]) {
 8003670:	f1b9 0f00 	cmp.w	r9, #0
 8003674:	d1e3      	bne.n	800363e <_gwinDestroy+0x76>
	pt->flags |= GTIMER_FLG_JABBED;
 8003676:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
	if (psem->cnt < psem->limit)
 800367a:	f9b5 2010 	ldrsh.w	r2, [r5, #16]
 800367e:	f9b5 1012 	ldrsh.w	r1, [r5, #18]
 8003682:	f043 0304 	orr.w	r3, r3, #4
	pmutex[0] = 1;
 8003686:	2001      	movs	r0, #1
 8003688:	f8a5 3040 	strh.w	r3, [r5, #64]	; 0x40
	pmutex[0] = 0;
 800368c:	2300      	movs	r3, #0
	if (psem->cnt < psem->limit)
 800368e:	4291      	cmp	r1, r2
	pmutex[0] = 1;
 8003690:	6168      	str	r0, [r5, #20]
	pmutex[0] = 0;
 8003692:	616b      	str	r3, [r5, #20]
	if (!RedrawPending)
 8003694:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
		psem->cnt++;
 8003698:	bfc4      	itt	gt
 800369a:	1812      	addgt	r2, r2, r0
 800369c:	822a      	strhgt	r2, [r5, #16]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d19f      	bne.n	80035e2 <_gwinDestroy+0x1a>
 80036a2:	e7a7      	b.n	80035f4 <_gwinDestroy+0x2c>
 80036a4:	4770      	bx	lr
 80036a6:	4630      	mov	r0, r6
}
 80036a8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036ac:	f003 b924 	b.w	80068f8 <free>
		gfxSemWait(&gwinsem, TIME_INFINITE);
 80036b0:	f04f 31ff 	mov.w	r1, #4294967295
 80036b4:	4808      	ldr	r0, [pc, #32]	; (80036d8 <_gwinDestroy+0x110>)
 80036b6:	f7fe fa8f 	bl	8001bd8 <gfxSemWait>
 80036ba:	e798      	b.n	80035ee <_gwinDestroy+0x26>
	else if (how == REDRAW_NOWAIT && !gfxSemWait(&gwinsem, TIME_IMMEDIATE))
 80036bc:	2100      	movs	r1, #0
 80036be:	4806      	ldr	r0, [pc, #24]	; (80036d8 <_gwinDestroy+0x110>)
 80036c0:	f7fe fa8a 	bl	8001bd8 <gfxSemWait>
 80036c4:	2800      	cmp	r0, #0
 80036c6:	d192      	bne.n	80035ee <_gwinDestroy+0x26>
 80036c8:	e794      	b.n	80035f4 <_gwinDestroy+0x2c>
 80036ca:	bf00      	nop
 80036cc:	200000b8 	.word	0x200000b8
 80036d0:	20000944 	.word	0x20000944
 80036d4:	20000948 	.word	0x20000948
 80036d8:	200000d8 	.word	0x200000d8

080036dc <gwinClearInit>:
void gwinClearInit(GWindowInit *pwi) {
 80036dc:	2300      	movs	r3, #0
 80036de:	6003      	str	r3, [r0, #0]
 80036e0:	6043      	str	r3, [r0, #4]
 80036e2:	8103      	strh	r3, [r0, #8]
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop

080036e8 <gwinSetDefaultColor>:
	defaultFgColor = clr;
 80036e8:	4b01      	ldr	r3, [pc, #4]	; (80036f0 <gwinSetDefaultColor+0x8>)
 80036ea:	8018      	strh	r0, [r3, #0]
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	20000034 	.word	0x20000034

080036f4 <gwinGetDefaultColor>:
	return defaultFgColor;
 80036f4:	4b01      	ldr	r3, [pc, #4]	; (80036fc <gwinGetDefaultColor+0x8>)
}
 80036f6:	8818      	ldrh	r0, [r3, #0]
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	20000034 	.word	0x20000034

08003700 <gwinSetDefaultBgColor>:
	defaultBgColor = bgclr;
 8003700:	4b01      	ldr	r3, [pc, #4]	; (8003708 <gwinSetDefaultBgColor+0x8>)
 8003702:	f8a3 0874 	strh.w	r0, [r3, #2164]	; 0x874
 8003706:	4770      	bx	lr
 8003708:	200000b8 	.word	0x200000b8

0800370c <gwinGetDefaultBgColor>:
	return defaultBgColor;
 800370c:	4b01      	ldr	r3, [pc, #4]	; (8003714 <gwinGetDefaultBgColor+0x8>)
}
 800370e:	f8b3 0874 	ldrh.w	r0, [r3, #2164]	; 0x874
 8003712:	4770      	bx	lr
 8003714:	200000b8 	.word	0x200000b8

08003718 <gwinGWindowCreate>:

/*-----------------------------------------------
 * The GWindow Routines
 *-----------------------------------------------*/

GHandle gwinGWindowCreate(GDisplay *g, GWindowObject *pgw, const GWindowInit *pInit) {
 8003718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800371c:	4607      	mov	r7, r0
 800371e:	4615      	mov	r5, r2
	if (!pgw) {
 8003720:	2900      	cmp	r1, #0
 8003722:	f000 80d4 	beq.w	80038ce <gwinGWindowCreate+0x1b6>
		pgw->flags = flags;
 8003726:	2300      	movs	r3, #0
 8003728:	618b      	str	r3, [r1, #24]
 800372a:	460e      	mov	r6, r1
	if (!_GWINwm->vmt->Add(gh, pInit))
 800372c:	4b6d      	ldr	r3, [pc, #436]	; (80038e4 <gwinGWindowCreate+0x1cc>)
	pgw->color = defaultFgColor;
 800372e:	4a6e      	ldr	r2, [pc, #440]	; (80038e8 <gwinGWindowCreate+0x1d0>)
 8003730:	681b      	ldr	r3, [r3, #0]
	pgw->bgcolor = defaultBgColor;
 8003732:	4c6e      	ldr	r4, [pc, #440]	; (80038ec <gwinGWindowCreate+0x1d4>)
 8003734:	681b      	ldr	r3, [r3, #0]
	pgw->color = defaultFgColor;
 8003736:	8810      	ldrh	r0, [r2, #0]
	pgw->bgcolor = defaultBgColor;
 8003738:	f8b4 1874 	ldrh.w	r1, [r4, #2164]	; 0x874
	pgw->vmt = vmt;
 800373c:	4a6c      	ldr	r2, [pc, #432]	; (80038f0 <gwinGWindowCreate+0x1d8>)
 800373e:	689b      	ldr	r3, [r3, #8]
	pgw->display = g;
 8003740:	60b7      	str	r7, [r6, #8]
	pgw->color = defaultFgColor;
 8003742:	82b0      	strh	r0, [r6, #20]
	pgw->bgcolor = defaultBgColor;
 8003744:	82f1      	strh	r1, [r6, #22]
	pgw->vmt = vmt;
 8003746:	6072      	str	r2, [r6, #4]
 8003748:	4629      	mov	r1, r5
 800374a:	4630      	mov	r0, r6
 800374c:	4798      	blx	r3
 800374e:	4607      	mov	r7, r0
 8003750:	b930      	cbnz	r0, 8003760 <gwinGWindowCreate+0x48>
		if ((pgw->flags & GWIN_FLG_DYNAMIC))
 8003752:	69b3      	ldr	r3, [r6, #24]
 8003754:	04db      	lsls	r3, r3, #19
 8003756:	d473      	bmi.n	8003840 <gwinGWindowCreate+0x128>
	if (!(pgw = _gwindowCreate(g, pgw, pInit, &basegwinVMT, 0)))
		return 0;
 8003758:	2600      	movs	r6, #0

	gwinSetVisible(pgw, pInit->show);
	_gwinFlushRedraws(REDRAW_WAIT);

	return pgw;
}
 800375a:	4630      	mov	r0, r6
 800375c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (visible) {
 8003760:	7a2f      	ldrb	r7, [r5, #8]
			if (!(gh->flags & GWIN_FLG_VISIBLE)) {
 8003762:	69b3      	ldr	r3, [r6, #24]
		if (visible) {
 8003764:	bb37      	cbnz	r7, 80037b4 <gwinGWindowCreate+0x9c>
			if ((gh->flags & GWIN_FLG_VISIBLE)) {
 8003766:	05da      	lsls	r2, r3, #23
 8003768:	d471      	bmi.n	800384e <gwinGWindowCreate+0x136>
	if (!RedrawPending)
 800376a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800376e:	2b00      	cmp	r3, #0
 8003770:	d0f3      	beq.n	800375a <gwinGWindowCreate+0x42>
	Qadd(&readyQ, me = _gfxCurrentThread);
 8003772:	4f60      	ldr	r7, [pc, #384]	; (80038f4 <gwinGWindowCreate+0x1dc>)
	t->next = 0;
 8003774:	f04f 0800 	mov.w	r8, #0
	while (psem->cnt <= 0) {
 8003778:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
 800377c:	2b00      	cmp	r3, #0
 800377e:	dc57      	bgt.n	8003830 <gwinGWindowCreate+0x118>
	if (!q->head)
 8003780:	6820      	ldr	r0, [r4, #0]
 8003782:	b130      	cbz	r0, 8003792 <gwinGWindowCreate+0x7a>
	q->head = t->next;
 8003784:	6805      	ldr	r5, [r0, #0]
 8003786:	6025      	str	r5, [r4, #0]
 8003788:	f003 f8b6 	bl	80068f8 <free>
	if (!q->head)
 800378c:	4628      	mov	r0, r5
 800378e:	2d00      	cmp	r5, #0
 8003790:	d1f8      	bne.n	8003784 <gwinGWindowCreate+0x6c>
	if (!readyQ.head)
 8003792:	68a3      	ldr	r3, [r4, #8]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d0ef      	beq.n	8003778 <gwinGWindowCreate+0x60>
	Qadd(&readyQ, me = _gfxCurrentThread);
 8003798:	6839      	ldr	r1, [r7, #0]
		q->tail->next = t;
 800379a:	68e2      	ldr	r2, [r4, #12]
	t->next = 0;
 800379c:	f8c1 8000 	str.w	r8, [r1]
		q->tail->next = t;
 80037a0:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 80037a2:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 80037a4:	60e1      	str	r1, [r4, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 80037a6:	4608      	mov	r0, r1
	q->head = t->next;
 80037a8:	60a2      	str	r2, [r4, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 80037aa:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 80037ac:	603b      	str	r3, [r7, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 80037ae:	f7fc ffb5 	bl	800071c <_gfxTaskSwitch>
 80037b2:	e7e1      	b.n	8003778 <gwinGWindowCreate+0x60>
			if (!(gh->flags & GWIN_FLG_VISIBLE)) {
 80037b4:	f413 7880 	ands.w	r8, r3, #256	; 0x100
 80037b8:	d1d7      	bne.n	800376a <gwinGWindowCreate+0x52>
				RedrawPending |= DOREDRAW_VISIBLES;
 80037ba:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 80037be:	f8d4 9014 	ldr.w	r9, [r4, #20]
	Qadd(&readyQ, me = _gfxCurrentThread);
 80037c2:	4f4c      	ldr	r7, [pc, #304]	; (80038f4 <gwinGWindowCreate+0x1dc>)
				gh->flags |= (GWIN_FLG_VISIBLE|GWIN_FLG_SYSVISIBLE|GWIN_FLG_NEEDREDRAW|GWIN_FLG_BGREDRAW);
 80037c4:	f443 4343 	orr.w	r3, r3, #49920	; 0xc300
				RedrawPending |= DOREDRAW_VISIBLES;
 80037c8:	f042 0202 	orr.w	r2, r2, #2
				gh->flags |= (GWIN_FLG_VISIBLE|GWIN_FLG_SYSVISIBLE|GWIN_FLG_NEEDREDRAW|GWIN_FLG_BGREDRAW);
 80037cc:	61b3      	str	r3, [r6, #24]
				RedrawPending |= DOREDRAW_VISIBLES;
 80037ce:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
	while (pmutex[0]) {
 80037d2:	f1b9 0f00 	cmp.w	r9, #0
 80037d6:	d01b      	beq.n	8003810 <gwinGWindowCreate+0xf8>
	if (!q->head)
 80037d8:	6820      	ldr	r0, [r4, #0]
 80037da:	b130      	cbz	r0, 80037ea <gwinGWindowCreate+0xd2>
	q->head = t->next;
 80037dc:	6805      	ldr	r5, [r0, #0]
 80037de:	6025      	str	r5, [r4, #0]
 80037e0:	f003 f88a 	bl	80068f8 <free>
	if (!q->head)
 80037e4:	4628      	mov	r0, r5
 80037e6:	2d00      	cmp	r5, #0
 80037e8:	d1f8      	bne.n	80037dc <gwinGWindowCreate+0xc4>
	if (!readyQ.head)
 80037ea:	68a3      	ldr	r3, [r4, #8]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d0f0      	beq.n	80037d2 <gwinGWindowCreate+0xba>
	Qadd(&readyQ, me = _gfxCurrentThread);
 80037f0:	6839      	ldr	r1, [r7, #0]
		q->tail->next = t;
 80037f2:	68e2      	ldr	r2, [r4, #12]
	t->next = 0;
 80037f4:	f8c1 8000 	str.w	r8, [r1]
		q->tail->next = t;
 80037f8:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 80037fa:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 80037fc:	60e1      	str	r1, [r4, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 80037fe:	4608      	mov	r0, r1
	q->head = t->next;
 8003800:	60a2      	str	r2, [r4, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8003802:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 8003804:	603b      	str	r3, [r7, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8003806:	f7fc ff89 	bl	800071c <_gfxTaskSwitch>
	while (pmutex[0]) {
 800380a:	f1b9 0f00 	cmp.w	r9, #0
 800380e:	d1e3      	bne.n	80037d8 <gwinGWindowCreate+0xc0>
	if (psem->cnt < psem->limit)
 8003810:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 8003814:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8003818:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 800381c:	4299      	cmp	r1, r3
 800381e:	f042 0204 	orr.w	r2, r2, #4
		psem->cnt++;
 8003822:	bfc8      	it	gt
 8003824:	3301      	addgt	r3, #1
 8003826:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
 800382a:	bfc8      	it	gt
 800382c:	8223      	strhgt	r3, [r4, #16]
 800382e:	e04b      	b.n	80038c8 <gwinGWindowCreate+0x1b0>
	psem->cnt--;
 8003830:	3b01      	subs	r3, #1
 8003832:	2000      	movs	r0, #0
 8003834:	8423      	strh	r3, [r4, #32]
 8003836:	f7fd febf 	bl	80015b8 <_gwinFlushRedraws.part.8>
 800383a:	4630      	mov	r0, r6
 800383c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003840:	4630      	mov	r0, r6
		return 0;
 8003842:	463e      	mov	r6, r7
 8003844:	f003 f858 	bl	80068f8 <free>
}
 8003848:	4630      	mov	r0, r6
 800384a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				RedrawPending |= DOREDRAW_INVISIBLES;
 800384e:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8003852:	f8d4 9014 	ldr.w	r9, [r4, #20]
	Qadd(&readyQ, me = _gfxCurrentThread);
 8003856:	f8df 809c 	ldr.w	r8, [pc, #156]	; 80038f4 <gwinGWindowCreate+0x1dc>
				gh->flags &= ~(GWIN_FLG_VISIBLE|GWIN_FLG_SYSVISIBLE);
 800385a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
				gh->flags |= (GWIN_FLG_NEEDREDRAW|GWIN_FLG_BGREDRAW);
 800385e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
				RedrawPending |= DOREDRAW_INVISIBLES;
 8003862:	f042 0201 	orr.w	r2, r2, #1
				gh->flags |= (GWIN_FLG_NEEDREDRAW|GWIN_FLG_BGREDRAW);
 8003866:	61b3      	str	r3, [r6, #24]
				RedrawPending |= DOREDRAW_INVISIBLES;
 8003868:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
	while (pmutex[0]) {
 800386c:	f1b9 0f00 	cmp.w	r9, #0
 8003870:	d01c      	beq.n	80038ac <gwinGWindowCreate+0x194>
	if (!q->head)
 8003872:	6820      	ldr	r0, [r4, #0]
 8003874:	b130      	cbz	r0, 8003884 <gwinGWindowCreate+0x16c>
	q->head = t->next;
 8003876:	6805      	ldr	r5, [r0, #0]
 8003878:	6025      	str	r5, [r4, #0]
 800387a:	f003 f83d 	bl	80068f8 <free>
	if (!q->head)
 800387e:	4628      	mov	r0, r5
 8003880:	2d00      	cmp	r5, #0
 8003882:	d1f8      	bne.n	8003876 <gwinGWindowCreate+0x15e>
	if (!readyQ.head)
 8003884:	68a3      	ldr	r3, [r4, #8]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d0f0      	beq.n	800386c <gwinGWindowCreate+0x154>
	Qadd(&readyQ, me = _gfxCurrentThread);
 800388a:	f8d8 1000 	ldr.w	r1, [r8]
		q->tail->next = t;
 800388e:	68e2      	ldr	r2, [r4, #12]
	t->next = 0;
 8003890:	600f      	str	r7, [r1, #0]
		q->tail->next = t;
 8003892:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 8003894:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 8003896:	60e1      	str	r1, [r4, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8003898:	4608      	mov	r0, r1
	q->head = t->next;
 800389a:	60a2      	str	r2, [r4, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 800389c:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 800389e:	f8c8 3000 	str.w	r3, [r8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 80038a2:	f7fc ff3b 	bl	800071c <_gfxTaskSwitch>
	while (pmutex[0]) {
 80038a6:	f1b9 0f00 	cmp.w	r9, #0
 80038aa:	d1e2      	bne.n	8003872 <gwinGWindowCreate+0x15a>
 80038ac:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
	if (psem->cnt < psem->limit)
 80038b0:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 80038b4:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 80038b8:	f043 0304 	orr.w	r3, r3, #4
 80038bc:	4291      	cmp	r1, r2
 80038be:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 80038c2:	dd01      	ble.n	80038c8 <gwinGWindowCreate+0x1b0>
		psem->cnt++;
 80038c4:	3201      	adds	r2, #1
 80038c6:	8222      	strh	r2, [r4, #16]
	pmutex[0] = 0;
 80038c8:	2300      	movs	r3, #0
 80038ca:	6163      	str	r3, [r4, #20]
 80038cc:	e74d      	b.n	800376a <gwinGWindowCreate+0x52>
		return malloc(sz);
 80038ce:	201c      	movs	r0, #28
 80038d0:	f003 f80a 	bl	80068e8 <malloc>
		if (!(pgw = gfxAlloc(vmt->size)))
 80038d4:	2800      	cmp	r0, #0
 80038d6:	f43f af3f 	beq.w	8003758 <gwinGWindowCreate+0x40>
		pgw->flags = flags|GWIN_FLG_DYNAMIC;
 80038da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038de:	6183      	str	r3, [r0, #24]
 80038e0:	4606      	mov	r6, r0
 80038e2:	e723      	b.n	800372c <gwinGWindowCreate+0x14>
 80038e4:	20000944 	.word	0x20000944
 80038e8:	20000034 	.word	0x20000034
 80038ec:	200000b8 	.word	0x200000b8
 80038f0:	08007e04 	.word	0x08007e04
 80038f4:	20000948 	.word	0x20000948

080038f8 <gwinDestroy>:
	if (!gh)
 80038f8:	2800      	cmp	r0, #0
 80038fa:	f000 8088 	beq.w	8003a0e <gwinDestroy+0x116>

void gwinDestroy(GHandle gh) {
 80038fe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			if ((gh->flags & GWIN_FLG_VISIBLE)) {
 8003902:	6983      	ldr	r3, [r0, #24]
				RedrawPending |= DOREDRAW_INVISIBLES;
 8003904:	4d45      	ldr	r5, [pc, #276]	; (8003a1c <gwinDestroy+0x124>)
			if ((gh->flags & GWIN_FLG_VISIBLE)) {
 8003906:	05da      	lsls	r2, r3, #23
 8003908:	4606      	mov	r6, r0
 800390a:	d43a      	bmi.n	8003982 <gwinDestroy+0x8a>
	if (!RedrawPending)
 800390c:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8003910:	b32b      	cbz	r3, 800395e <gwinDestroy+0x66>
	Qadd(&readyQ, me = _gfxCurrentThread);
 8003912:	4f43      	ldr	r7, [pc, #268]	; (8003a20 <gwinDestroy+0x128>)
	t->next = 0;
 8003914:	f04f 0800 	mov.w	r8, #0
	while (psem->cnt <= 0) {
 8003918:	f9b5 3020 	ldrsh.w	r3, [r5, #32]
 800391c:	2b00      	cmp	r3, #0
 800391e:	dc19      	bgt.n	8003954 <gwinDestroy+0x5c>
	if (!q->head)
 8003920:	6828      	ldr	r0, [r5, #0]
 8003922:	b130      	cbz	r0, 8003932 <gwinDestroy+0x3a>
	q->head = t->next;
 8003924:	6804      	ldr	r4, [r0, #0]
 8003926:	602c      	str	r4, [r5, #0]
		free(ptr);
 8003928:	f002 ffe6 	bl	80068f8 <free>
	if (!q->head)
 800392c:	4620      	mov	r0, r4
 800392e:	2c00      	cmp	r4, #0
 8003930:	d1f8      	bne.n	8003924 <gwinDestroy+0x2c>
	if (!readyQ.head)
 8003932:	68ab      	ldr	r3, [r5, #8]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d0ef      	beq.n	8003918 <gwinDestroy+0x20>
	Qadd(&readyQ, me = _gfxCurrentThread);
 8003938:	6839      	ldr	r1, [r7, #0]
		q->tail->next = t;
 800393a:	68ea      	ldr	r2, [r5, #12]
	t->next = 0;
 800393c:	f8c1 8000 	str.w	r8, [r1]
		q->tail->next = t;
 8003940:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 8003942:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 8003944:	60e9      	str	r1, [r5, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8003946:	4608      	mov	r0, r1
	q->head = t->next;
 8003948:	60aa      	str	r2, [r5, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 800394a:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 800394c:	603b      	str	r3, [r7, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 800394e:	f7fc fee5 	bl	800071c <_gfxTaskSwitch>
 8003952:	e7e1      	b.n	8003918 <gwinDestroy+0x20>
	psem->cnt--;
 8003954:	3b01      	subs	r3, #1
 8003956:	2000      	movs	r0, #0
 8003958:	842b      	strh	r3, [r5, #32]
 800395a:	f7fd fe2d 	bl	80015b8 <_gwinFlushRedraws.part.8>
		_GWINwm->vmt->Delete(gh);
 800395e:	4b31      	ldr	r3, [pc, #196]	; (8003a24 <gwinDestroy+0x12c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4630      	mov	r0, r6
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	4798      	blx	r3
	if (gh->vmt->Destroy)
 800396a:	6873      	ldr	r3, [r6, #4]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	b10b      	cbz	r3, 8003974 <gwinDestroy+0x7c>
		gh->vmt->Destroy(gh);
 8003970:	4630      	mov	r0, r6
 8003972:	4798      	blx	r3
	if (gh->flags & GWIN_FLG_DYNAMIC) {
 8003974:	69b3      	ldr	r3, [r6, #24]
 8003976:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 800397a:	d149      	bne.n	8003a10 <gwinDestroy+0x118>
		gh->flags = 0;							// To be sure, to be sure
 800397c:	61b3      	str	r3, [r6, #24]
	_gwinDestroy(gh, REDRAW_WAIT);
}
 800397e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				RedrawPending |= DOREDRAW_INVISIBLES;
 8003982:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
	Qadd(&readyQ, me = _gfxCurrentThread);
 8003986:	4f26      	ldr	r7, [pc, #152]	; (8003a20 <gwinDestroy+0x128>)
 8003988:	f8d5 8014 	ldr.w	r8, [r5, #20]
				gh->flags &= ~(GWIN_FLG_VISIBLE|GWIN_FLG_SYSVISIBLE);
 800398c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
				gh->flags |= (GWIN_FLG_NEEDREDRAW|GWIN_FLG_BGREDRAW);
 8003990:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
				RedrawPending |= DOREDRAW_INVISIBLES;
 8003994:	f042 0201 	orr.w	r2, r2, #1
				gh->flags |= (GWIN_FLG_NEEDREDRAW|GWIN_FLG_BGREDRAW);
 8003998:	6183      	str	r3, [r0, #24]
				RedrawPending |= DOREDRAW_INVISIBLES;
 800399a:	f885 202c 	strb.w	r2, [r5, #44]	; 0x2c
	t->next = 0;
 800399e:	f04f 0900 	mov.w	r9, #0
	while (pmutex[0]) {
 80039a2:	f1b8 0f00 	cmp.w	r8, #0
 80039a6:	d01b      	beq.n	80039e0 <gwinDestroy+0xe8>
	if (!q->head)
 80039a8:	6828      	ldr	r0, [r5, #0]
 80039aa:	b130      	cbz	r0, 80039ba <gwinDestroy+0xc2>
	q->head = t->next;
 80039ac:	6804      	ldr	r4, [r0, #0]
 80039ae:	602c      	str	r4, [r5, #0]
 80039b0:	f002 ffa2 	bl	80068f8 <free>
	if (!q->head)
 80039b4:	4620      	mov	r0, r4
 80039b6:	2c00      	cmp	r4, #0
 80039b8:	d1f8      	bne.n	80039ac <gwinDestroy+0xb4>
	if (!readyQ.head)
 80039ba:	68ab      	ldr	r3, [r5, #8]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d0f0      	beq.n	80039a2 <gwinDestroy+0xaa>
	Qadd(&readyQ, me = _gfxCurrentThread);
 80039c0:	6839      	ldr	r1, [r7, #0]
		q->tail->next = t;
 80039c2:	68ea      	ldr	r2, [r5, #12]
	t->next = 0;
 80039c4:	f8c1 9000 	str.w	r9, [r1]
		q->tail->next = t;
 80039c8:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 80039ca:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 80039cc:	60e9      	str	r1, [r5, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 80039ce:	4608      	mov	r0, r1
	q->head = t->next;
 80039d0:	60aa      	str	r2, [r5, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 80039d2:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 80039d4:	603b      	str	r3, [r7, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 80039d6:	f7fc fea1 	bl	800071c <_gfxTaskSwitch>
	while (pmutex[0]) {
 80039da:	f1b8 0f00 	cmp.w	r8, #0
 80039de:	d1e3      	bne.n	80039a8 <gwinDestroy+0xb0>
 80039e0:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
	if (psem->cnt < psem->limit)
 80039e4:	f9b5 2010 	ldrsh.w	r2, [r5, #16]
 80039e8:	f9b5 1012 	ldrsh.w	r1, [r5, #18]
 80039ec:	f043 0304 	orr.w	r3, r3, #4
	pmutex[0] = 1;
 80039f0:	2001      	movs	r0, #1
 80039f2:	f8a5 3040 	strh.w	r3, [r5, #64]	; 0x40
	pmutex[0] = 0;
 80039f6:	2300      	movs	r3, #0
	if (psem->cnt < psem->limit)
 80039f8:	4291      	cmp	r1, r2
	pmutex[0] = 1;
 80039fa:	6168      	str	r0, [r5, #20]
	pmutex[0] = 0;
 80039fc:	616b      	str	r3, [r5, #20]
	if (!RedrawPending)
 80039fe:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
		psem->cnt++;
 8003a02:	bfc4      	itt	gt
 8003a04:	1812      	addgt	r2, r2, r0
 8003a06:	822a      	strhgt	r2, [r5, #16]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d182      	bne.n	8003912 <gwinDestroy+0x1a>
 8003a0c:	e7a7      	b.n	800395e <gwinDestroy+0x66>
 8003a0e:	4770      	bx	lr
 8003a10:	4630      	mov	r0, r6
 8003a12:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a16:	f002 bf6f 	b.w	80068f8 <free>
 8003a1a:	bf00      	nop
 8003a1c:	200000b8 	.word	0x200000b8
 8003a20:	20000948 	.word	0x20000948
 8003a24:	20000944 	.word	0x20000944

08003a28 <gwinGetClassName>:

const char *gwinGetClassName(GHandle gh) {
	return gh->vmt->classname;
 8003a28:	6843      	ldr	r3, [r0, #4]
}
 8003a2a:	6818      	ldr	r0, [r3, #0]
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop

08003a30 <gwinGetVisible>:

bool_t gwinGetVisible(GHandle gh) {
	return (gh->flags & GWIN_FLG_SYSVISIBLE) ? TRUE : FALSE;
 8003a30:	6980      	ldr	r0, [r0, #24]
 8003a32:	f340 2040 	sbfx	r0, r0, #9, #1
}
 8003a36:	b2c0      	uxtb	r0, r0
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop

08003a3c <gwinGetEnabled>:

bool_t gwinGetEnabled(GHandle gh) {
	return (gh->flags & GWIN_FLG_SYSENABLED) ? TRUE : FALSE;
 8003a3c:	6980      	ldr	r0, [r0, #24]
 8003a3e:	f340 20c0 	sbfx	r0, r0, #11, #1
}
 8003a42:	b2c0      	uxtb	r0, r0
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop

08003a48 <_gwmInit>:
{
 8003a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	psem->cnt = val;
 8003a4c:	4d42      	ldr	r5, [pc, #264]	; (8003b58 <_gwmInit+0x110>)
	Qadd(&readyQ, me = _gfxCurrentThread);
 8003a4e:	4e43      	ldr	r6, [pc, #268]	; (8003b5c <_gwmInit+0x114>)
 8003a50:	f8d5 8014 	ldr.w	r8, [r5, #20]
 8003a54:	2700      	movs	r7, #0
	psem->cnt = val;
 8003a56:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8003a5a:	622b      	str	r3, [r5, #32]
 8003a5c:	62af      	str	r7, [r5, #40]	; 0x28
 8003a5e:	626f      	str	r7, [r5, #36]	; 0x24
	pt->flags = 0;
 8003a60:	f8a5 7040 	strh.w	r7, [r5, #64]	; 0x40
	while (pmutex[0]) {
 8003a64:	f1b8 0f00 	cmp.w	r8, #0
 8003a68:	d01a      	beq.n	8003aa0 <_gwmInit+0x58>
	if (!q->head)
 8003a6a:	6828      	ldr	r0, [r5, #0]
 8003a6c:	b130      	cbz	r0, 8003a7c <_gwmInit+0x34>
	q->head = t->next;
 8003a6e:	6804      	ldr	r4, [r0, #0]
 8003a70:	602c      	str	r4, [r5, #0]
 8003a72:	f002 ff41 	bl	80068f8 <free>
	if (!q->head)
 8003a76:	4620      	mov	r0, r4
 8003a78:	2c00      	cmp	r4, #0
 8003a7a:	d1f8      	bne.n	8003a6e <_gwmInit+0x26>
	if (!readyQ.head)
 8003a7c:	68ab      	ldr	r3, [r5, #8]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0f0      	beq.n	8003a64 <_gwmInit+0x1c>
	Qadd(&readyQ, me = _gfxCurrentThread);
 8003a82:	6831      	ldr	r1, [r6, #0]
		q->tail->next = t;
 8003a84:	68ea      	ldr	r2, [r5, #12]
	t->next = 0;
 8003a86:	600f      	str	r7, [r1, #0]
		q->tail->next = t;
 8003a88:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 8003a8a:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 8003a8c:	60e9      	str	r1, [r5, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8003a8e:	4608      	mov	r0, r1
	q->head = t->next;
 8003a90:	60aa      	str	r2, [r5, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8003a92:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 8003a94:	6033      	str	r3, [r6, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8003a96:	f7fc fe41 	bl	800071c <_gfxTaskSwitch>
	while (pmutex[0]) {
 8003a9a:	f1b8 0f00 	cmp.w	r8, #0
 8003a9e:	d1e4      	bne.n	8003a6a <_gwmInit+0x22>
	if (!hThread) {
 8003aa0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
	pmutex[0] = 1;
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	616a      	str	r2, [r5, #20]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d039      	beq.n	8003b1e <_gwmInit+0xd6>
	if (pt->flags & GTIMER_FLG_SCHEDULED) {
 8003aaa:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
 8003aae:	071b      	lsls	r3, r3, #28
 8003ab0:	d419      	bmi.n	8003ae6 <_gwmInit+0x9e>
 8003ab2:	69ab      	ldr	r3, [r5, #24]
 8003ab4:	4a2a      	ldr	r2, [pc, #168]	; (8003b60 <_gwmInit+0x118>)
	pt->fn = fn;
 8003ab6:	492b      	ldr	r1, [pc, #172]	; (8003b64 <_gwmInit+0x11c>)
 8003ab8:	6329      	str	r1, [r5, #48]	; 0x30
	pt->param = param;
 8003aba:	2400      	movs	r4, #0
		pt->flags |= GTIMER_FLG_INFINITE;
 8003abc:	200b      	movs	r0, #11
		pt->period = TIME_INFINITE;
 8003abe:	f04f 31ff 	mov.w	r1, #4294967295
	pt->param = param;
 8003ac2:	636c      	str	r4, [r5, #52]	; 0x34
		pt->flags |= GTIMER_FLG_INFINITE;
 8003ac4:	f8a5 0040 	strh.w	r0, [r5, #64]	; 0x40
		pt->period = TIME_INFINITE;
 8003ac8:	63e9      	str	r1, [r5, #60]	; 0x3c
	if (pTimerHead) {
 8003aca:	b323      	cbz	r3, 8003b16 <_gwmInit+0xce>
		pt->prev = pTimerHead->prev;
 8003acc:	6999      	ldr	r1, [r3, #24]
		pt->next = pTimerHead;
 8003ace:	646b      	str	r3, [r5, #68]	; 0x44
		pt->prev = pTimerHead->prev;
 8003ad0:	64a9      	str	r1, [r5, #72]	; 0x48
		pt->prev->next = pt;
 8003ad2:	614a      	str	r2, [r1, #20]
		pt->next->prev = pt;
 8003ad4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003ad6:	619a      	str	r2, [r3, #24]
	_GWINwm = (GWindowManager *)&GNullWindowManager;
 8003ad8:	4b23      	ldr	r3, [pc, #140]	; (8003b68 <_gwmInit+0x120>)
 8003ada:	4a24      	ldr	r2, [pc, #144]	; (8003b6c <_gwmInit+0x124>)
 8003adc:	601a      	str	r2, [r3, #0]
	pmutex[0] = 0;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	616b      	str	r3, [r5, #20]
 8003ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (pt->next == pt)
 8003ae6:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8003ae8:	4a1d      	ldr	r2, [pc, #116]	; (8003b60 <_gwmInit+0x118>)
 8003aea:	4291      	cmp	r1, r2
 8003aec:	d009      	beq.n	8003b02 <_gwmInit+0xba>
			pt->next->prev = pt->prev;
 8003aee:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8003af0:	618b      	str	r3, [r1, #24]
			pt->prev->next = pt->next;
 8003af2:	6ca8      	ldr	r0, [r5, #72]	; 0x48
			if (pTimerHead == pt)
 8003af4:	69ab      	ldr	r3, [r5, #24]
			pt->prev->next = pt->next;
 8003af6:	6141      	str	r1, [r0, #20]
			if (pTimerHead == pt)
 8003af8:	4293      	cmp	r3, r2
				pTimerHead = pt->next;
 8003afa:	bf04      	itt	eq
 8003afc:	6c6b      	ldreq	r3, [r5, #68]	; 0x44
 8003afe:	61ab      	streq	r3, [r5, #24]
 8003b00:	e7d9      	b.n	8003ab6 <_gwmInit+0x6e>
	pt->fn = fn;
 8003b02:	4b18      	ldr	r3, [pc, #96]	; (8003b64 <_gwmInit+0x11c>)
 8003b04:	632b      	str	r3, [r5, #48]	; 0x30
	pt->param = param;
 8003b06:	2000      	movs	r0, #0
		pt->flags |= GTIMER_FLG_INFINITE;
 8003b08:	210b      	movs	r1, #11
		pt->period = TIME_INFINITE;
 8003b0a:	f04f 33ff 	mov.w	r3, #4294967295
	pt->param = param;
 8003b0e:	6368      	str	r0, [r5, #52]	; 0x34
		pt->flags |= GTIMER_FLG_INFINITE;
 8003b10:	f8a5 1040 	strh.w	r1, [r5, #64]	; 0x40
		pt->period = TIME_INFINITE;
 8003b14:	63eb      	str	r3, [r5, #60]	; 0x3c
		pt->next = pt->prev = pTimerHead = pt;
 8003b16:	61aa      	str	r2, [r5, #24]
 8003b18:	64aa      	str	r2, [r5, #72]	; 0x48
 8003b1a:	646a      	str	r2, [r5, #68]	; 0x44
 8003b1c:	e7dc      	b.n	8003ad8 <_gwmInit+0x90>
	me = _gfxCurrentThread;
 8003b1e:	4b0f      	ldr	r3, [pc, #60]	; (8003b5c <_gwmInit+0x114>)
	if (q->head) {
 8003b20:	68aa      	ldr	r2, [r5, #8]
	me = _gfxCurrentThread;
 8003b22:	6818      	ldr	r0, [r3, #0]
	t->fn = fn;
 8003b24:	4912      	ldr	r1, [pc, #72]	; (8003b70 <_gwmInit+0x128>)
		t->flags = 0;
 8003b26:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
	t->size = stacksz;
 8003b2a:	f44f 6400 	mov.w	r4, #2048	; 0x800
	t->param = param;
 8003b2e:	f8c5 8084 	str.w	r8, [r5, #132]	; 0x84
	t->size = stacksz;
 8003b32:	67ec      	str	r4, [r5, #124]	; 0x7c
	t->fn = fn;
 8003b34:	f8c5 1080 	str.w	r1, [r5, #128]	; 0x80
	t->next = 0;
 8003b38:	f8c0 8000 	str.w	r8, [r0]
	if (q->head) {
 8003b3c:	b14a      	cbz	r2, 8003b52 <_gwmInit+0x10a>
		q->tail->next = t;
 8003b3e:	68ea      	ldr	r2, [r5, #12]
 8003b40:	6010      	str	r0, [r2, #0]
	_gfxCurrentThread = t;
 8003b42:	4c0c      	ldr	r4, [pc, #48]	; (8003b74 <_gwmInit+0x12c>)
 8003b44:	60e8      	str	r0, [r5, #12]
	_gfxStartThread(me, t);
 8003b46:	4621      	mov	r1, r4
	_gfxCurrentThread = t;
 8003b48:	601c      	str	r4, [r3, #0]
	_gfxStartThread(me, t);
 8003b4a:	f7fd ffd3 	bl	8001af4 <_gfxStartThread>
		hThread = gfxThreadCreate(waTimerThread, GTIMER_THREAD_WORKAREA_SIZE, GTIMER_THREAD_PRIORITY, GTimerThreadHandler, 0);
 8003b4e:	672c      	str	r4, [r5, #112]	; 0x70
 8003b50:	e7ab      	b.n	8003aaa <_gwmInit+0x62>
		q->head = q->tail = t;
 8003b52:	60a8      	str	r0, [r5, #8]
 8003b54:	e7f5      	b.n	8003b42 <_gwmInit+0xfa>
 8003b56:	bf00      	nop
 8003b58:	200000b8 	.word	0x200000b8
 8003b5c:	20000948 	.word	0x20000948
 8003b60:	200000e8 	.word	0x200000e8
 8003b64:	08001c79 	.word	0x08001c79
 8003b68:	20000944 	.word	0x20000944
 8003b6c:	08007d80 	.word	0x08007d80
 8003b70:	080009d9 	.word	0x080009d9
 8003b74:	2000012c 	.word	0x2000012c

08003b78 <_gwmDeinit>:
{
 8003b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b7c:	4d63      	ldr	r5, [pc, #396]	; (8003d0c <_gwmDeinit+0x194>)
 8003b7e:	f8df 9198 	ldr.w	r9, [pc, #408]	; 8003d18 <_gwmDeinit+0x1a0>
	Qadd(&readyQ, me = _gfxCurrentThread);
 8003b82:	4f63      	ldr	r7, [pc, #396]	; (8003d10 <_gwmDeinit+0x198>)
	t->next = 0;
 8003b84:	f04f 0800 	mov.w	r8, #0
	return gh ? (GHandle)gfxQueueASyncNext(&gh->wmq) : (GHandle)gfxQueueASyncPeek(&_GWINList);
 8003b88:	6a6e      	ldr	r6, [r5, #36]	; 0x24
	while((gh = gwinGetNextWindow(0)))
 8003b8a:	2e00      	cmp	r6, #0
 8003b8c:	d03e      	beq.n	8003c0c <_gwmDeinit+0x94>
			if ((gh->flags & GWIN_FLG_VISIBLE)) {
 8003b8e:	69b3      	ldr	r3, [r6, #24]
 8003b90:	05da      	lsls	r2, r3, #23
 8003b92:	d477      	bmi.n	8003c84 <_gwmDeinit+0x10c>
	if (!RedrawPending)
 8003b94:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8003b98:	b32b      	cbz	r3, 8003be6 <_gwmDeinit+0x6e>
	while (psem->cnt <= 0) {
 8003b9a:	f9b5 3020 	ldrsh.w	r3, [r5, #32]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	dc1c      	bgt.n	8003bdc <_gwmDeinit+0x64>
	if (!q->head)
 8003ba2:	6828      	ldr	r0, [r5, #0]
 8003ba4:	b130      	cbz	r0, 8003bb4 <_gwmDeinit+0x3c>
	q->head = t->next;
 8003ba6:	6804      	ldr	r4, [r0, #0]
 8003ba8:	602c      	str	r4, [r5, #0]
 8003baa:	f002 fea5 	bl	80068f8 <free>
	if (!q->head)
 8003bae:	4620      	mov	r0, r4
 8003bb0:	2c00      	cmp	r4, #0
 8003bb2:	d1f8      	bne.n	8003ba6 <_gwmDeinit+0x2e>
	if (!readyQ.head)
 8003bb4:	68ab      	ldr	r3, [r5, #8]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d0ef      	beq.n	8003b9a <_gwmDeinit+0x22>
	Qadd(&readyQ, me = _gfxCurrentThread);
 8003bba:	6839      	ldr	r1, [r7, #0]
		q->tail->next = t;
 8003bbc:	68ea      	ldr	r2, [r5, #12]
	t->next = 0;
 8003bbe:	f8c1 8000 	str.w	r8, [r1]
		q->tail->next = t;
 8003bc2:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 8003bc4:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 8003bc6:	60e9      	str	r1, [r5, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8003bc8:	4608      	mov	r0, r1
	q->head = t->next;
 8003bca:	60aa      	str	r2, [r5, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8003bcc:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 8003bce:	603b      	str	r3, [r7, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8003bd0:	f7fc fda4 	bl	800071c <_gfxTaskSwitch>
	while (psem->cnt <= 0) {
 8003bd4:	f9b5 3020 	ldrsh.w	r3, [r5, #32]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	dde2      	ble.n	8003ba2 <_gwmDeinit+0x2a>
	psem->cnt--;
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	2000      	movs	r0, #0
 8003be0:	842b      	strh	r3, [r5, #32]
 8003be2:	f7fd fce9 	bl	80015b8 <_gwinFlushRedraws.part.8>
		_GWINwm->vmt->Delete(gh);
 8003be6:	f8d9 3000 	ldr.w	r3, [r9]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4630      	mov	r0, r6
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	4798      	blx	r3
	if (gh->vmt->Destroy)
 8003bf2:	6873      	ldr	r3, [r6, #4]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	b10b      	cbz	r3, 8003bfc <_gwmDeinit+0x84>
		gh->vmt->Destroy(gh);
 8003bf8:	4630      	mov	r0, r6
 8003bfa:	4798      	blx	r3
	if (gh->flags & GWIN_FLG_DYNAMIC) {
 8003bfc:	69b3      	ldr	r3, [r6, #24]
 8003bfe:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 8003c02:	d17d      	bne.n	8003d00 <_gwmDeinit+0x188>
		gh->flags = 0;							// To be sure, to be sure
 8003c04:	61b3      	str	r3, [r6, #24]
	return gh ? (GHandle)gfxQueueASyncNext(&gh->wmq) : (GHandle)gfxQueueASyncPeek(&_GWINList);
 8003c06:	6a6e      	ldr	r6, [r5, #36]	; 0x24
	while((gh = gwinGetNextWindow(0)))
 8003c08:	2e00      	cmp	r6, #0
 8003c0a:	d1c0      	bne.n	8003b8e <_gwmDeinit+0x16>
	_GWINwm->vmt->DeInit();
 8003c0c:	f8d9 3000 	ldr.w	r3, [r9]
	Qadd(&readyQ, me = _gfxCurrentThread);
 8003c10:	4f3f      	ldr	r7, [pc, #252]	; (8003d10 <_gwmDeinit+0x198>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	4798      	blx	r3
	t->next = 0;
 8003c18:	46b0      	mov	r8, r6
 8003c1a:	696e      	ldr	r6, [r5, #20]
	while (pmutex[0]) {
 8003c1c:	b1d6      	cbz	r6, 8003c54 <_gwmDeinit+0xdc>
	if (!q->head)
 8003c1e:	6828      	ldr	r0, [r5, #0]
 8003c20:	b130      	cbz	r0, 8003c30 <_gwmDeinit+0xb8>
	q->head = t->next;
 8003c22:	6804      	ldr	r4, [r0, #0]
 8003c24:	602c      	str	r4, [r5, #0]
 8003c26:	f002 fe67 	bl	80068f8 <free>
	if (!q->head)
 8003c2a:	4620      	mov	r0, r4
 8003c2c:	2c00      	cmp	r4, #0
 8003c2e:	d1f8      	bne.n	8003c22 <_gwmDeinit+0xaa>
	if (!readyQ.head)
 8003c30:	68ab      	ldr	r3, [r5, #8]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0f2      	beq.n	8003c1c <_gwmDeinit+0xa4>
	Qadd(&readyQ, me = _gfxCurrentThread);
 8003c36:	6839      	ldr	r1, [r7, #0]
		q->tail->next = t;
 8003c38:	68ea      	ldr	r2, [r5, #12]
	t->next = 0;
 8003c3a:	f8c1 8000 	str.w	r8, [r1]
		q->tail->next = t;
 8003c3e:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 8003c40:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 8003c42:	60e9      	str	r1, [r5, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8003c44:	4608      	mov	r0, r1
	q->head = t->next;
 8003c46:	60aa      	str	r2, [r5, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8003c48:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 8003c4a:	603b      	str	r3, [r7, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8003c4c:	f7fc fd66 	bl	800071c <_gfxTaskSwitch>
	while (pmutex[0]) {
 8003c50:	2e00      	cmp	r6, #0
 8003c52:	d1e4      	bne.n	8003c1e <_gwmDeinit+0xa6>
	if (pt->flags & GTIMER_FLG_SCHEDULED) {
 8003c54:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
 8003c58:	071b      	lsls	r3, r3, #28
 8003c5a:	d50f      	bpl.n	8003c7c <_gwmDeinit+0x104>
		if (pt->next == pt)
 8003c5c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003c5e:	4a2d      	ldr	r2, [pc, #180]	; (8003d14 <_gwmDeinit+0x19c>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d051      	beq.n	8003d08 <_gwmDeinit+0x190>
			pt->next->prev = pt->prev;
 8003c64:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8003c66:	6199      	str	r1, [r3, #24]
			pt->prev->next = pt->next;
 8003c68:	6ca8      	ldr	r0, [r5, #72]	; 0x48
			if (pTimerHead == pt)
 8003c6a:	69a9      	ldr	r1, [r5, #24]
			pt->prev->next = pt->next;
 8003c6c:	6143      	str	r3, [r0, #20]
			if (pTimerHead == pt)
 8003c6e:	4291      	cmp	r1, r2
				pTimerHead = pt->next;
 8003c70:	bf04      	itt	eq
 8003c72:	6c6b      	ldreq	r3, [r5, #68]	; 0x44
 8003c74:	61ab      	streq	r3, [r5, #24]
		pt->flags = 0;
 8003c76:	2300      	movs	r3, #0
 8003c78:	f8a5 3040 	strh.w	r3, [r5, #64]	; 0x40
	pmutex[0] = 0;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	616b      	str	r3, [r5, #20]
}
 8003c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				RedrawPending |= DOREDRAW_INVISIBLES;
 8003c84:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
 8003c88:	f8d5 a014 	ldr.w	sl, [r5, #20]
				gh->flags &= ~(GWIN_FLG_VISIBLE|GWIN_FLG_SYSVISIBLE);
 8003c8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
				gh->flags |= (GWIN_FLG_NEEDREDRAW|GWIN_FLG_BGREDRAW);
 8003c90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
				RedrawPending |= DOREDRAW_INVISIBLES;
 8003c94:	f042 0201 	orr.w	r2, r2, #1
				gh->flags |= (GWIN_FLG_NEEDREDRAW|GWIN_FLG_BGREDRAW);
 8003c98:	61b3      	str	r3, [r6, #24]
				RedrawPending |= DOREDRAW_INVISIBLES;
 8003c9a:	f885 202c 	strb.w	r2, [r5, #44]	; 0x2c
	while (pmutex[0]) {
 8003c9e:	f1ba 0f00 	cmp.w	sl, #0
 8003ca2:	d01b      	beq.n	8003cdc <_gwmDeinit+0x164>
	if (!q->head)
 8003ca4:	6828      	ldr	r0, [r5, #0]
 8003ca6:	b130      	cbz	r0, 8003cb6 <_gwmDeinit+0x13e>
	q->head = t->next;
 8003ca8:	6804      	ldr	r4, [r0, #0]
 8003caa:	602c      	str	r4, [r5, #0]
 8003cac:	f002 fe24 	bl	80068f8 <free>
	if (!q->head)
 8003cb0:	4620      	mov	r0, r4
 8003cb2:	2c00      	cmp	r4, #0
 8003cb4:	d1f8      	bne.n	8003ca8 <_gwmDeinit+0x130>
	if (!readyQ.head)
 8003cb6:	68ab      	ldr	r3, [r5, #8]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d0f0      	beq.n	8003c9e <_gwmDeinit+0x126>
	Qadd(&readyQ, me = _gfxCurrentThread);
 8003cbc:	6839      	ldr	r1, [r7, #0]
		q->tail->next = t;
 8003cbe:	68ea      	ldr	r2, [r5, #12]
	t->next = 0;
 8003cc0:	f8c1 8000 	str.w	r8, [r1]
		q->tail->next = t;
 8003cc4:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 8003cc6:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 8003cc8:	60e9      	str	r1, [r5, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8003cca:	4608      	mov	r0, r1
	q->head = t->next;
 8003ccc:	60aa      	str	r2, [r5, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8003cce:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 8003cd0:	603b      	str	r3, [r7, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8003cd2:	f7fc fd23 	bl	800071c <_gfxTaskSwitch>
	while (pmutex[0]) {
 8003cd6:	f1ba 0f00 	cmp.w	sl, #0
 8003cda:	d1e3      	bne.n	8003ca4 <_gwmDeinit+0x12c>
	if (psem->cnt < psem->limit)
 8003cdc:	f9b5 2010 	ldrsh.w	r2, [r5, #16]
 8003ce0:	f9b5 1012 	ldrsh.w	r1, [r5, #18]
	pt->flags |= GTIMER_FLG_JABBED;
 8003ce4:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
	pmutex[0] = 0;
 8003ce8:	f8c5 8014 	str.w	r8, [r5, #20]
	if (psem->cnt < psem->limit)
 8003cec:	4291      	cmp	r1, r2
 8003cee:	f043 0304 	orr.w	r3, r3, #4
		psem->cnt++;
 8003cf2:	bfc8      	it	gt
 8003cf4:	3201      	addgt	r2, #1
 8003cf6:	f8a5 3040 	strh.w	r3, [r5, #64]	; 0x40
 8003cfa:	bfc8      	it	gt
 8003cfc:	822a      	strhgt	r2, [r5, #16]
 8003cfe:	e749      	b.n	8003b94 <_gwmDeinit+0x1c>
 8003d00:	4630      	mov	r0, r6
 8003d02:	f002 fdf9 	bl	80068f8 <free>
 8003d06:	e73f      	b.n	8003b88 <_gwmDeinit+0x10>
			pTimerHead = 0;
 8003d08:	61ae      	str	r6, [r5, #24]
 8003d0a:	e7b4      	b.n	8003c76 <_gwmDeinit+0xfe>
 8003d0c:	200000b8 	.word	0x200000b8
 8003d10:	20000948 	.word	0x20000948
 8003d14:	200000e8 	.word	0x200000e8
 8003d18:	20000944 	.word	0x20000944

08003d1c <_gwinDeinit>:
	_gwmDeinit();
 8003d1c:	f7ff bf2c 	b.w	8003b78 <_gwmDeinit>

08003d20 <gfxDeinit>:
		uGFXMain(0);
	#endif
}

void gfxDeinit(void)
{
 8003d20:	b570      	push	{r4, r5, r6, lr}
	if (!gfxInitDone)
 8003d22:	4e0e      	ldr	r6, [pc, #56]	; (8003d5c <gfxDeinit+0x3c>)
 8003d24:	f896 306d 	ldrb.w	r3, [r6, #109]	; 0x6d
 8003d28:	b903      	cbnz	r3, 8003d2c <gfxDeinit+0xc>
 8003d2a:	bd70      	pop	{r4, r5, r6, pc}
		return;
	gfxInitDone = FALSE;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	f886 306d 	strb.w	r3, [r6, #109]	; 0x6d
 8003d32:	f7ff ff21 	bl	8003b78 <_gwmDeinit>
	while(dhead)
 8003d36:	6e74      	ldr	r4, [r6, #100]	; 0x64
 8003d38:	b90c      	cbnz	r4, 8003d3e <gfxDeinit+0x1e>
 8003d3a:	e00e      	b.n	8003d5a <gfxDeinit+0x3a>
 8003d3c:	462c      	mov	r4, r5
	if (driver->vmt->deinit)
 8003d3e:	6863      	ldr	r3, [r4, #4]
		dhead = driver->driverchain;
 8003d40:	6825      	ldr	r5, [r4, #0]
	if (driver->vmt->deinit)
 8003d42:	691b      	ldr	r3, [r3, #16]
		dhead = driver->driverchain;
 8003d44:	6675      	str	r5, [r6, #100]	; 0x64
	if (driver->vmt->deinit)
 8003d46:	b113      	cbz	r3, 8003d4e <gfxDeinit+0x2e>
		driver->vmt->deinit(driver);
 8003d48:	4620      	mov	r0, r4
 8003d4a:	4798      	blx	r3
 8003d4c:	6e75      	ldr	r5, [r6, #100]	; 0x64
 8003d4e:	4620      	mov	r0, r4
 8003d50:	f002 fdd2 	bl	80068f8 <free>
	while(dhead)
 8003d54:	2d00      	cmp	r5, #0
 8003d56:	d1f1      	bne.n	8003d3c <gfxDeinit+0x1c>
 8003d58:	bd70      	pop	{r4, r5, r6, pc}
 8003d5a:	bd70      	pop	{r4, r5, r6, pc}
 8003d5c:	200000b8 	.word	0x200000b8

08003d60 <_gwinFlushRedraws>:
	if (!RedrawPending)
 8003d60:	4b10      	ldr	r3, [pc, #64]	; (8003da4 <_gwinFlushRedraws+0x44>)
 8003d62:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8003d66:	b1a2      	cbz	r2, 8003d92 <_gwinFlushRedraws+0x32>
void _gwinFlushRedraws(GRedrawMethod how) {
 8003d68:	b510      	push	{r4, lr}
 8003d6a:	4604      	mov	r4, r0
	if (how == REDRAW_WAIT)
 8003d6c:	b130      	cbz	r0, 8003d7c <_gwinFlushRedraws+0x1c>
	else if (how == REDRAW_NOWAIT && !gfxSemWait(&gwinsem, TIME_IMMEDIATE))
 8003d6e:	2801      	cmp	r0, #1
 8003d70:	d010      	beq.n	8003d94 <_gwinFlushRedraws+0x34>
 8003d72:	4620      	mov	r0, r4
}
 8003d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d78:	f7fd bc1e 	b.w	80015b8 <_gwinFlushRedraws.part.8>
		gfxSemWait(&gwinsem, TIME_INFINITE);
 8003d7c:	f103 0020 	add.w	r0, r3, #32
 8003d80:	f04f 31ff 	mov.w	r1, #4294967295
 8003d84:	f7fd ff28 	bl	8001bd8 <gfxSemWait>
 8003d88:	4620      	mov	r0, r4
}
 8003d8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d8e:	f7fd bc13 	b.w	80015b8 <_gwinFlushRedraws.part.8>
 8003d92:	4770      	bx	lr
	else if (how == REDRAW_NOWAIT && !gfxSemWait(&gwinsem, TIME_IMMEDIATE))
 8003d94:	f103 0020 	add.w	r0, r3, #32
 8003d98:	2100      	movs	r1, #0
 8003d9a:	f7fd ff1d 	bl	8001bd8 <gfxSemWait>
 8003d9e:	2800      	cmp	r0, #0
 8003da0:	d1e7      	bne.n	8003d72 <_gwinFlushRedraws+0x12>
 8003da2:	bd10      	pop	{r4, pc}
 8003da4:	200000b8 	.word	0x200000b8

08003da8 <_gwinUpdate>:
	if (!(gh->flags & GWIN_FLG_SYSVISIBLE))
 8003da8:	6983      	ldr	r3, [r0, #24]
 8003daa:	059a      	lsls	r2, r3, #22
 8003dac:	d400      	bmi.n	8003db0 <_gwinUpdate+0x8>
 8003dae:	4770      	bx	lr
void _gwinUpdate(GHandle gh) {
 8003db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	RedrawPending |= DOREDRAW_VISIBLES;
 8003db4:	4d1e      	ldr	r5, [pc, #120]	; (8003e30 <_gwinUpdate+0x88>)
	Qadd(&readyQ, me = _gfxCurrentThread);
 8003db6:	4e1f      	ldr	r6, [pc, #124]	; (8003e34 <_gwinUpdate+0x8c>)
 8003db8:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
 8003dbc:	696f      	ldr	r7, [r5, #20]
	gh->flags |= GWIN_FLG_NEEDREDRAW;
 8003dbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
	RedrawPending |= DOREDRAW_VISIBLES;
 8003dc2:	f042 0202 	orr.w	r2, r2, #2
	gh->flags |= GWIN_FLG_NEEDREDRAW;
 8003dc6:	6183      	str	r3, [r0, #24]
	RedrawPending |= DOREDRAW_VISIBLES;
 8003dc8:	f885 202c 	strb.w	r2, [r5, #44]	; 0x2c
	t->next = 0;
 8003dcc:	f04f 0800 	mov.w	r8, #0
	while (pmutex[0]) {
 8003dd0:	b1d7      	cbz	r7, 8003e08 <_gwinUpdate+0x60>
	if (!q->head)
 8003dd2:	6828      	ldr	r0, [r5, #0]
 8003dd4:	b130      	cbz	r0, 8003de4 <_gwinUpdate+0x3c>
	q->head = t->next;
 8003dd6:	6804      	ldr	r4, [r0, #0]
 8003dd8:	602c      	str	r4, [r5, #0]
 8003dda:	f002 fd8d 	bl	80068f8 <free>
	if (!q->head)
 8003dde:	4620      	mov	r0, r4
 8003de0:	2c00      	cmp	r4, #0
 8003de2:	d1f8      	bne.n	8003dd6 <_gwinUpdate+0x2e>
	if (!readyQ.head)
 8003de4:	68ab      	ldr	r3, [r5, #8]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d0f2      	beq.n	8003dd0 <_gwinUpdate+0x28>
	Qadd(&readyQ, me = _gfxCurrentThread);
 8003dea:	6831      	ldr	r1, [r6, #0]
		q->tail->next = t;
 8003dec:	68ea      	ldr	r2, [r5, #12]
	t->next = 0;
 8003dee:	f8c1 8000 	str.w	r8, [r1]
		q->tail->next = t;
 8003df2:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 8003df4:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 8003df6:	60e9      	str	r1, [r5, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8003df8:	4608      	mov	r0, r1
	q->head = t->next;
 8003dfa:	60aa      	str	r2, [r5, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8003dfc:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 8003dfe:	6033      	str	r3, [r6, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8003e00:	f7fc fc8c 	bl	800071c <_gfxTaskSwitch>
	while (pmutex[0]) {
 8003e04:	2f00      	cmp	r7, #0
 8003e06:	d1e4      	bne.n	8003dd2 <_gwinUpdate+0x2a>
	if (psem->cnt < psem->limit)
 8003e08:	f9b5 2010 	ldrsh.w	r2, [r5, #16]
	pt->flags |= GTIMER_FLG_JABBED;
 8003e0c:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
 8003e10:	f9b5 1012 	ldrsh.w	r1, [r5, #18]
 8003e14:	f043 0304 	orr.w	r3, r3, #4
 8003e18:	4291      	cmp	r1, r2
 8003e1a:	f8a5 3040 	strh.w	r3, [r5, #64]	; 0x40
		psem->cnt++;
 8003e1e:	bfc8      	it	gt
 8003e20:	3201      	addgt	r2, #1
	pmutex[0] = 0;
 8003e22:	f04f 0300 	mov.w	r3, #0
		psem->cnt++;
 8003e26:	bfc8      	it	gt
 8003e28:	822a      	strhgt	r2, [r5, #16]
	pmutex[0] = 0;
 8003e2a:	616b      	str	r3, [r5, #20]
 8003e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e30:	200000b8 	.word	0x200000b8
 8003e34:	20000948 	.word	0x20000948

08003e38 <WM_Size>:
static void WM_Size(GHandle gh, coord_t w, coord_t h) {
 8003e38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	v = gdispGGetWidth(gh->display);
 8003e3c:	6883      	ldr	r3, [r0, #8]
static void WM_Size(GHandle gh, coord_t w, coord_t h) {
 8003e3e:	4605      	mov	r5, r0
	if (gh->x+w > v) 	w = v - gh->x;
 8003e40:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
coord_t gdispGGetWidth(GDisplay *g)				{ return g->g.Width; }
 8003e44:	f9b3 6008 	ldrsh.w	r6, [r3, #8]
coord_t gdispGGetHeight(GDisplay *g)			{ return g->g.Height; }
 8003e48:	f9b3 700a 	ldrsh.w	r7, [r3, #10]
 8003e4c:	1844      	adds	r4, r0, r1
 8003e4e:	42b4      	cmp	r4, r6
 8003e50:	bfc8      	it	gt
 8003e52:	1a36      	subgt	r6, r6, r0
	if (gh->y+h > v) 	h = v - gh->y;
 8003e54:	f9b5 000e 	ldrsh.w	r0, [r5, #14]
 8003e58:	eb00 0302 	add.w	r3, r0, r2
	if (gh->x+w > v) 	w = v - gh->x;
 8003e5c:	bfc8      	it	gt
 8003e5e:	b231      	sxthgt	r1, r6
	if (gh->y+h > v) 	h = v - gh->y;
 8003e60:	42bb      	cmp	r3, r7
 8003e62:	bfc4      	itt	gt
 8003e64:	1a3f      	subgt	r7, r7, r0
 8003e66:	b23a      	sxthgt	r2, r7
	if (gh->width == w && gh->height == h)
 8003e68:	f9b5 0010 	ldrsh.w	r0, [r5, #16]
 8003e6c:	2903      	cmp	r1, #3
 8003e6e:	bfb8      	it	lt
 8003e70:	2103      	movlt	r1, #3
 8003e72:	2a03      	cmp	r2, #3
 8003e74:	bfb8      	it	lt
 8003e76:	2203      	movlt	r2, #3
 8003e78:	4288      	cmp	r0, r1
 8003e7a:	460e      	mov	r6, r1
 8003e7c:	4693      	mov	fp, r2
 8003e7e:	d01f      	beq.n	8003ec0 <WM_Size+0x88>
	if ((gh->flags & GWIN_FLG_SYSVISIBLE)) {
 8003e80:	69ab      	ldr	r3, [r5, #24]
 8003e82:	059c      	lsls	r4, r3, #22
 8003e84:	d524      	bpl.n	8003ed0 <WM_Size+0x98>
		if (w >= gh->width && h >= gh->height) {
 8003e86:	4288      	cmp	r0, r1
 8003e88:	dc03      	bgt.n	8003e92 <WM_Size+0x5a>
 8003e8a:	f9b5 2012 	ldrsh.w	r2, [r5, #18]
 8003e8e:	455a      	cmp	r2, fp
 8003e90:	dd6a      	ble.n	8003f68 <WM_Size+0x130>
			if ((gh->flags & GWIN_FLG_VISIBLE)) {
 8003e92:	05d8      	lsls	r0, r3, #23
				RedrawPending |= DOREDRAW_INVISIBLES;
 8003e94:	4c58      	ldr	r4, [pc, #352]	; (8003ff8 <WM_Size+0x1c0>)
			if ((gh->flags & GWIN_FLG_VISIBLE)) {
 8003e96:	d420      	bmi.n	8003eda <WM_Size+0xa2>
	if (!RedrawPending)
 8003e98:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8003e9c:	b13b      	cbz	r3, 8003eae <WM_Size+0x76>
		gfxSemWait(&gwinsem, TIME_INFINITE);
 8003e9e:	f04f 31ff 	mov.w	r1, #4294967295
 8003ea2:	4856      	ldr	r0, [pc, #344]	; (8003ffc <WM_Size+0x1c4>)
 8003ea4:	f7fd fe98 	bl	8001bd8 <gfxSemWait>
 8003ea8:	2000      	movs	r0, #0
 8003eaa:	f7fd fb85 	bl	80015b8 <_gwinFlushRedraws.part.8>
			if (!(gh->flags & GWIN_FLG_VISIBLE)) {
 8003eae:	69ab      	ldr	r3, [r5, #24]
			gh->width = w; gh->height = h;
 8003eb0:	822e      	strh	r6, [r5, #16]
			if (!(gh->flags & GWIN_FLG_VISIBLE)) {
 8003eb2:	f413 7880 	ands.w	r8, r3, #256	; 0x100
			gh->width = w; gh->height = h;
 8003eb6:	f8a5 b012 	strh.w	fp, [r5, #18]
			if (!(gh->flags & GWIN_FLG_VISIBLE)) {
 8003eba:	d05d      	beq.n	8003f78 <WM_Size+0x140>
 8003ebc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (gh->width == w && gh->height == h)
 8003ec0:	f9b5 2012 	ldrsh.w	r2, [r5, #18]
 8003ec4:	455a      	cmp	r2, fp
 8003ec6:	f000 8094 	beq.w	8003ff2 <WM_Size+0x1ba>
	if ((gh->flags & GWIN_FLG_SYSVISIBLE)) {
 8003eca:	69ab      	ldr	r3, [r5, #24]
 8003ecc:	0599      	lsls	r1, r3, #22
 8003ece:	d4de      	bmi.n	8003e8e <WM_Size+0x56>
		gh->width = w; gh->height = h;
 8003ed0:	822e      	strh	r6, [r5, #16]
 8003ed2:	f8a5 b012 	strh.w	fp, [r5, #18]
 8003ed6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				RedrawPending |= DOREDRAW_INVISIBLES;
 8003eda:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
	Qadd(&readyQ, me = _gfxCurrentThread);
 8003ede:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8004000 <WM_Size+0x1c8>
 8003ee2:	f8d4 9014 	ldr.w	r9, [r4, #20]
				gh->flags &= ~(GWIN_FLG_VISIBLE|GWIN_FLG_SYSVISIBLE);
 8003ee6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
				gh->flags |= (GWIN_FLG_NEEDREDRAW|GWIN_FLG_BGREDRAW);
 8003eea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
				RedrawPending |= DOREDRAW_INVISIBLES;
 8003eee:	f042 0201 	orr.w	r2, r2, #1
				gh->flags |= (GWIN_FLG_NEEDREDRAW|GWIN_FLG_BGREDRAW);
 8003ef2:	61ab      	str	r3, [r5, #24]
				RedrawPending |= DOREDRAW_INVISIBLES;
 8003ef4:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
	t->next = 0;
 8003ef8:	f04f 0a00 	mov.w	sl, #0
	while (pmutex[0]) {
 8003efc:	f1b9 0f00 	cmp.w	r9, #0
 8003f00:	d01d      	beq.n	8003f3e <WM_Size+0x106>
	if (!q->head)
 8003f02:	6820      	ldr	r0, [r4, #0]
 8003f04:	b130      	cbz	r0, 8003f14 <WM_Size+0xdc>
	q->head = t->next;
 8003f06:	6807      	ldr	r7, [r0, #0]
 8003f08:	6027      	str	r7, [r4, #0]
 8003f0a:	f002 fcf5 	bl	80068f8 <free>
	if (!q->head)
 8003f0e:	4638      	mov	r0, r7
 8003f10:	2f00      	cmp	r7, #0
 8003f12:	d1f8      	bne.n	8003f06 <WM_Size+0xce>
	if (!readyQ.head)
 8003f14:	68a3      	ldr	r3, [r4, #8]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d0f0      	beq.n	8003efc <WM_Size+0xc4>
	Qadd(&readyQ, me = _gfxCurrentThread);
 8003f1a:	f8d8 1000 	ldr.w	r1, [r8]
		q->tail->next = t;
 8003f1e:	68e2      	ldr	r2, [r4, #12]
	t->next = 0;
 8003f20:	f8c1 a000 	str.w	sl, [r1]
		q->tail->next = t;
 8003f24:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 8003f26:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 8003f28:	60e1      	str	r1, [r4, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8003f2a:	4608      	mov	r0, r1
	q->head = t->next;
 8003f2c:	60a2      	str	r2, [r4, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8003f2e:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 8003f30:	f8c8 3000 	str.w	r3, [r8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8003f34:	f7fc fbf2 	bl	800071c <_gfxTaskSwitch>
	while (pmutex[0]) {
 8003f38:	f1b9 0f00 	cmp.w	r9, #0
 8003f3c:	d1e1      	bne.n	8003f02 <WM_Size+0xca>
	if (psem->cnt < psem->limit)
 8003f3e:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 8003f42:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 8003f46:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8003f4a:	f043 0304 	orr.w	r3, r3, #4
	pmutex[0] = 1;
 8003f4e:	2001      	movs	r0, #1
	if (psem->cnt < psem->limit)
 8003f50:	4291      	cmp	r1, r2
 8003f52:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
		psem->cnt++;
 8003f56:	bfc8      	it	gt
 8003f58:	1812      	addgt	r2, r2, r0
	pmutex[0] = 0;
 8003f5a:	f04f 0300 	mov.w	r3, #0
	pmutex[0] = 1;
 8003f5e:	6160      	str	r0, [r4, #20]
		psem->cnt++;
 8003f60:	bfc8      	it	gt
 8003f62:	8222      	strhgt	r2, [r4, #16]
	pmutex[0] = 0;
 8003f64:	6163      	str	r3, [r4, #20]
 8003f66:	e797      	b.n	8003e98 <WM_Size+0x60>
			gh->width = w; gh->height = h;
 8003f68:	822e      	strh	r6, [r5, #16]
 8003f6a:	f8a5 b012 	strh.w	fp, [r5, #18]
			_gwinUpdate(gh);
 8003f6e:	4628      	mov	r0, r5
}
 8003f70:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			_gwinUpdate(gh);
 8003f74:	f7ff bf18 	b.w	8003da8 <_gwinUpdate>
				RedrawPending |= DOREDRAW_VISIBLES;
 8003f78:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8003f7c:	6967      	ldr	r7, [r4, #20]
	Qadd(&readyQ, me = _gfxCurrentThread);
 8003f7e:	4e20      	ldr	r6, [pc, #128]	; (8004000 <WM_Size+0x1c8>)
				gh->flags |= (GWIN_FLG_VISIBLE|GWIN_FLG_SYSVISIBLE|GWIN_FLG_NEEDREDRAW|GWIN_FLG_BGREDRAW);
 8003f80:	f443 4343 	orr.w	r3, r3, #49920	; 0xc300
				RedrawPending |= DOREDRAW_VISIBLES;
 8003f84:	f042 0202 	orr.w	r2, r2, #2
				gh->flags |= (GWIN_FLG_VISIBLE|GWIN_FLG_SYSVISIBLE|GWIN_FLG_NEEDREDRAW|GWIN_FLG_BGREDRAW);
 8003f88:	61ab      	str	r3, [r5, #24]
				RedrawPending |= DOREDRAW_VISIBLES;
 8003f8a:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
	while (pmutex[0]) {
 8003f8e:	b1d7      	cbz	r7, 8003fc6 <WM_Size+0x18e>
	if (!q->head)
 8003f90:	6820      	ldr	r0, [r4, #0]
 8003f92:	b130      	cbz	r0, 8003fa2 <WM_Size+0x16a>
	q->head = t->next;
 8003f94:	6805      	ldr	r5, [r0, #0]
 8003f96:	6025      	str	r5, [r4, #0]
 8003f98:	f002 fcae 	bl	80068f8 <free>
	if (!q->head)
 8003f9c:	4628      	mov	r0, r5
 8003f9e:	2d00      	cmp	r5, #0
 8003fa0:	d1f8      	bne.n	8003f94 <WM_Size+0x15c>
	if (!readyQ.head)
 8003fa2:	68a3      	ldr	r3, [r4, #8]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d0f2      	beq.n	8003f8e <WM_Size+0x156>
	Qadd(&readyQ, me = _gfxCurrentThread);
 8003fa8:	6831      	ldr	r1, [r6, #0]
		q->tail->next = t;
 8003faa:	68e2      	ldr	r2, [r4, #12]
	t->next = 0;
 8003fac:	f8c1 8000 	str.w	r8, [r1]
		q->tail->next = t;
 8003fb0:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 8003fb2:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 8003fb4:	60e1      	str	r1, [r4, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8003fb6:	4608      	mov	r0, r1
	q->head = t->next;
 8003fb8:	60a2      	str	r2, [r4, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8003fba:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 8003fbc:	6033      	str	r3, [r6, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8003fbe:	f7fc fbad 	bl	800071c <_gfxTaskSwitch>
	while (pmutex[0]) {
 8003fc2:	2f00      	cmp	r7, #0
 8003fc4:	d1e4      	bne.n	8003f90 <WM_Size+0x158>
	if (psem->cnt < psem->limit)
 8003fc6:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 8003fca:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8003fce:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 8003fd2:	4299      	cmp	r1, r3
	pmutex[0] = 1;
 8003fd4:	f04f 0001 	mov.w	r0, #1
		psem->cnt++;
 8003fd8:	bfc8      	it	gt
 8003fda:	181b      	addgt	r3, r3, r0
 8003fdc:	f042 0204 	orr.w	r2, r2, #4
 8003fe0:	bfc8      	it	gt
 8003fe2:	8223      	strhgt	r3, [r4, #16]
	pmutex[0] = 0;
 8003fe4:	2300      	movs	r3, #0
	pmutex[0] = 1;
 8003fe6:	6160      	str	r0, [r4, #20]
 8003fe8:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
	pmutex[0] = 0;
 8003fec:	6163      	str	r3, [r4, #20]
 8003fee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ff2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ff6:	bf00      	nop
 8003ff8:	200000b8 	.word	0x200000b8
 8003ffc:	200000d8 	.word	0x200000d8
 8004000:	20000948 	.word	0x20000948

08004004 <WM_Add>:
static bool_t WM_Add(GHandle gh, const GWindowInit *pInit) {
 8004004:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004008:	460f      	mov	r7, r1
		if (!pitem) return;				// Safety
 800400a:	4605      	mov	r5, r0
 800400c:	b148      	cbz	r0, 8004022 <WM_Add+0x1e>
		if (!pqueue->head) {
 800400e:	4ca5      	ldr	r4, [pc, #660]	; (80042a4 <WM_Add+0x2a0>)
 8004010:	6a63      	ldr	r3, [r4, #36]	; 0x24
		pitem->next = 0;
 8004012:	2200      	movs	r2, #0
 8004014:	6002      	str	r2, [r0, #0]
		if (!pqueue->head) {
 8004016:	2b00      	cmp	r3, #0
 8004018:	f000 8188 	beq.w	800432c <WM_Add+0x328>
			pqueue->tail->next = pitem;
 800401c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800401e:	6018      	str	r0, [r3, #0]
			pqueue->tail = pitem;
 8004020:	62a0      	str	r0, [r4, #40]	; 0x28
	gh->x = gh->y = 0;
 8004022:	2200      	movs	r2, #0
 8004024:	f04f 1303 	mov.w	r3, #196611	; 0x30003
 8004028:	612b      	str	r3, [r5, #16]
 800402a:	60ea      	str	r2, [r5, #12]
		u = gdispGGetWidth(gh->display);
 800402c:	68ac      	ldr	r4, [r5, #8]
	WM_Move(gh, pInit->x, pInit->y);
 800402e:	f9b7 8000 	ldrsh.w	r8, [r7]
coord_t gdispGGetWidth(GDisplay *g)				{ return g->g.Width; }
 8004032:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8004036:	f9b7 9002 	ldrsh.w	r9, [r7, #2]
coord_t gdispGGetHeight(GDisplay *g)			{ return g->g.Height; }
 800403a:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
	if (x+gh->width > u)	x = u-gh->width;
 800403e:	f108 0303 	add.w	r3, r8, #3
 8004042:	428b      	cmp	r3, r1
 8004044:	b28b      	uxth	r3, r1
 8004046:	bfc8      	it	gt
 8004048:	f1a3 0803 	subgt.w	r8, r3, #3
	if (y+gh->height > v)	y = v-gh->height;
 800404c:	f109 0003 	add.w	r0, r9, #3
	if (x+gh->width > u)	x = u-gh->width;
 8004050:	bfc8      	it	gt
 8004052:	fa0f f888 	sxthgt.w	r8, r8
	if (y+gh->height > v)	y = v-gh->height;
 8004056:	b296      	uxth	r6, r2
 8004058:	4290      	cmp	r0, r2
 800405a:	bfc4      	itt	gt
 800405c:	f1a6 0903 	subgt.w	r9, r6, #3
 8004060:	fa0f f989 	sxthgt.w	r9, r9
 8004064:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8004068:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
	u -= x;
 800406c:	eba3 0308 	sub.w	r3, r3, r8
 8004070:	b21b      	sxth	r3, r3
	v -= y;
 8004072:	eba6 0609 	sub.w	r6, r6, r9
 8004076:	2b03      	cmp	r3, #3
 8004078:	b236      	sxth	r6, r6
 800407a:	bfa8      	it	ge
 800407c:	2303      	movge	r3, #3
	if (gh->height < v)	v = gh->height;
 800407e:	2e03      	cmp	r6, #3
 8004080:	dc05      	bgt.n	800408e <WM_Add+0x8a>
	if (u != gh->width || v != gh->height)
 8004082:	2b03      	cmp	r3, #3
 8004084:	d101      	bne.n	800408a <WM_Add+0x86>
 8004086:	2e03      	cmp	r6, #3
 8004088:	d07d      	beq.n	8004186 <WM_Add+0x182>
 800408a:	4630      	mov	r0, r6
 800408c:	e003      	b.n	8004096 <WM_Add+0x92>
 800408e:	2b03      	cmp	r3, #3
 8004090:	d079      	beq.n	8004186 <WM_Add+0x182>
 8004092:	2003      	movs	r0, #3
	if (gh->height < v)	v = gh->height;
 8004094:	4606      	mov	r6, r0
	if (gh->x+w > v) 	w = v - gh->x;
 8004096:	428b      	cmp	r3, r1
 8004098:	bfa8      	it	ge
 800409a:	460b      	movge	r3, r1
 800409c:	2b03      	cmp	r3, #3
 800409e:	bfb8      	it	lt
 80040a0:	2303      	movlt	r3, #3
	if (gh->y+h > v) 	h = v - gh->y;
 80040a2:	4282      	cmp	r2, r0
 80040a4:	bfb8      	it	lt
 80040a6:	4616      	movlt	r6, r2
	if (h < MIN_WIN_HEIGHT)	h = MIN_WIN_HEIGHT;
 80040a8:	2e02      	cmp	r6, #2
 80040aa:	b21b      	sxth	r3, r3
 80040ac:	dd5a      	ble.n	8004164 <WM_Add+0x160>
	if (gh->width == w && gh->height == h)
 80040ae:	2b03      	cmp	r3, #3
 80040b0:	d067      	beq.n	8004182 <WM_Add+0x17e>
	if ((gh->flags & GWIN_FLG_SYSVISIBLE)) {
 80040b2:	69a8      	ldr	r0, [r5, #24]
 80040b4:	0580      	lsls	r0, r0, #22
 80040b6:	d45c      	bmi.n	8004172 <WM_Add+0x16e>
		gh->width = w; gh->height = h;
 80040b8:	822b      	strh	r3, [r5, #16]
 80040ba:	826e      	strh	r6, [r5, #18]
	if (gh->x == x && gh->y == y)
 80040bc:	f1b8 0f00 	cmp.w	r8, #0
 80040c0:	f000 80e2 	beq.w	8004288 <WM_Add+0x284>
		u = gh->x; gh->x = x;
 80040c4:	f8a5 800c 	strh.w	r8, [r5, #12]
		v = gh->y; gh->y = y;
 80040c8:	f8a5 900e 	strh.w	r9, [r5, #14]
	WM_Size(gh, pInit->width, pInit->height);
 80040cc:	f9b7 6004 	ldrsh.w	r6, [r7, #4]
 80040d0:	f9b7 7006 	ldrsh.w	r7, [r7, #6]
	if (gh->x+w > v) 	w = v - gh->x;
 80040d4:	eb08 0006 	add.w	r0, r8, r6
 80040d8:	4288      	cmp	r0, r1
 80040da:	bfc8      	it	gt
 80040dc:	eba1 0608 	subgt.w	r6, r1, r8
	if (gh->y+h > v) 	h = v - gh->y;
 80040e0:	eb09 0107 	add.w	r1, r9, r7
	if (gh->x+w > v) 	w = v - gh->x;
 80040e4:	bfc8      	it	gt
 80040e6:	b236      	sxthgt	r6, r6
	if (gh->y+h > v) 	h = v - gh->y;
 80040e8:	4291      	cmp	r1, r2
 80040ea:	bfc4      	itt	gt
 80040ec:	eba2 0709 	subgt.w	r7, r2, r9
 80040f0:	b23f      	sxthgt	r7, r7
 80040f2:	2e03      	cmp	r6, #3
 80040f4:	bfb8      	it	lt
 80040f6:	2603      	movlt	r6, #3
 80040f8:	2f03      	cmp	r7, #3
 80040fa:	bfb8      	it	lt
 80040fc:	2703      	movlt	r7, #3
	if (gh->width == w && gh->height == h)
 80040fe:	42b3      	cmp	r3, r6
 8004100:	46bb      	mov	fp, r7
 8004102:	d022      	beq.n	800414a <WM_Add+0x146>
	if ((gh->flags & GWIN_FLG_SYSVISIBLE)) {
 8004104:	69aa      	ldr	r2, [r5, #24]
 8004106:	0591      	lsls	r1, r2, #22
 8004108:	d526      	bpl.n	8004158 <WM_Add+0x154>
		if (w >= gh->width && h >= gh->height) {
 800410a:	42b3      	cmp	r3, r6
 800410c:	dc04      	bgt.n	8004118 <WM_Add+0x114>
 800410e:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
 8004112:	455b      	cmp	r3, fp
 8004114:	f340 80bd 	ble.w	8004292 <WM_Add+0x28e>
			if ((gh->flags & GWIN_FLG_VISIBLE)) {
 8004118:	05d7      	lsls	r7, r2, #23
				RedrawPending |= DOREDRAW_INVISIBLES;
 800411a:	4c62      	ldr	r4, [pc, #392]	; (80042a4 <WM_Add+0x2a0>)
			if ((gh->flags & GWIN_FLG_VISIBLE)) {
 800411c:	d46d      	bmi.n	80041fa <WM_Add+0x1f6>
	if (!RedrawPending)
 800411e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8004122:	b13b      	cbz	r3, 8004134 <WM_Add+0x130>
		gfxSemWait(&gwinsem, TIME_INFINITE);
 8004124:	f04f 31ff 	mov.w	r1, #4294967295
 8004128:	485f      	ldr	r0, [pc, #380]	; (80042a8 <WM_Add+0x2a4>)
 800412a:	f7fd fd55 	bl	8001bd8 <gfxSemWait>
 800412e:	2000      	movs	r0, #0
 8004130:	f7fd fa42 	bl	80015b8 <_gwinFlushRedraws.part.8>
			if (!(gh->flags & GWIN_FLG_VISIBLE)) {
 8004134:	69ab      	ldr	r3, [r5, #24]
			gh->width = w; gh->height = h;
 8004136:	822e      	strh	r6, [r5, #16]
			if (!(gh->flags & GWIN_FLG_VISIBLE)) {
 8004138:	f413 7880 	ands.w	r8, r3, #256	; 0x100
			gh->width = w; gh->height = h;
 800413c:	f8a5 b012 	strh.w	fp, [r5, #18]
			if (!(gh->flags & GWIN_FLG_VISIBLE)) {
 8004140:	f000 80b6 	beq.w	80042b0 <WM_Add+0x2ac>
}
 8004144:	20ff      	movs	r0, #255	; 0xff
 8004146:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (gh->width == w && gh->height == h)
 800414a:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
 800414e:	42bb      	cmp	r3, r7
 8004150:	d0f8      	beq.n	8004144 <WM_Add+0x140>
	if ((gh->flags & GWIN_FLG_SYSVISIBLE)) {
 8004152:	69aa      	ldr	r2, [r5, #24]
 8004154:	0591      	lsls	r1, r2, #22
 8004156:	d4dc      	bmi.n	8004112 <WM_Add+0x10e>
		gh->width = w; gh->height = h;
 8004158:	822e      	strh	r6, [r5, #16]
 800415a:	f8a5 b012 	strh.w	fp, [r5, #18]
}
 800415e:	20ff      	movs	r0, #255	; 0xff
 8004160:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (gh->width == w && gh->height == h)
 8004164:	2b03      	cmp	r3, #3
 8004166:	d00e      	beq.n	8004186 <WM_Add+0x182>
	if ((gh->flags & GWIN_FLG_SYSVISIBLE)) {
 8004168:	69a8      	ldr	r0, [r5, #24]
 800416a:	0580      	lsls	r0, r0, #22
	if (h < MIN_WIN_HEIGHT)	h = MIN_WIN_HEIGHT;
 800416c:	f04f 0603 	mov.w	r6, #3
	if ((gh->flags & GWIN_FLG_SYSVISIBLE)) {
 8004170:	d5a2      	bpl.n	80040b8 <WM_Add+0xb4>
			gh->width = w; gh->height = h;
 8004172:	822b      	strh	r3, [r5, #16]
 8004174:	826e      	strh	r6, [r5, #18]
			_gwinUpdate(gh);
 8004176:	4628      	mov	r0, r5
 8004178:	f7ff fe16 	bl	8003da8 <_gwinUpdate>
 800417c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 8004180:	e002      	b.n	8004188 <WM_Add+0x184>
	if (gh->width == w && gh->height == h)
 8004182:	2e03      	cmp	r6, #3
 8004184:	d195      	bne.n	80040b2 <WM_Add+0xae>
 8004186:	2300      	movs	r3, #0
	if (gh->x == x && gh->y == y)
 8004188:	4543      	cmp	r3, r8
 800418a:	d02a      	beq.n	80041e2 <WM_Add+0x1de>
	if ((gh->flags & GWIN_FLG_SYSVISIBLE)) {
 800418c:	69ab      	ldr	r3, [r5, #24]
 800418e:	059c      	lsls	r4, r3, #22
 8004190:	d407      	bmi.n	80041a2 <WM_Add+0x19e>
 8004192:	68ac      	ldr	r4, [r5, #8]
 8004194:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8004198:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 800419c:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
 80041a0:	e790      	b.n	80040c4 <WM_Add+0xc0>
			if ((gh->flags & GWIN_FLG_VISIBLE)) {
 80041a2:	05d8      	lsls	r0, r3, #23
				RedrawPending |= DOREDRAW_INVISIBLES;
 80041a4:	4c3f      	ldr	r4, [pc, #252]	; (80042a4 <WM_Add+0x2a0>)
			if ((gh->flags & GWIN_FLG_VISIBLE)) {
 80041a6:	f100 80c4 	bmi.w	8004332 <WM_Add+0x32e>
	if (!RedrawPending)
 80041aa:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80041ae:	b13b      	cbz	r3, 80041c0 <WM_Add+0x1bc>
		gfxSemWait(&gwinsem, TIME_INFINITE);
 80041b0:	f04f 31ff 	mov.w	r1, #4294967295
 80041b4:	483c      	ldr	r0, [pc, #240]	; (80042a8 <WM_Add+0x2a4>)
 80041b6:	f7fd fd0f 	bl	8001bd8 <gfxSemWait>
 80041ba:	2000      	movs	r0, #0
 80041bc:	f7fd f9fc 	bl	80015b8 <_gwinFlushRedraws.part.8>
			if (!(gh->flags & GWIN_FLG_VISIBLE)) {
 80041c0:	69ab      	ldr	r3, [r5, #24]
		u = gh->x; gh->x = x;
 80041c2:	f8a5 800c 	strh.w	r8, [r5, #12]
			if (!(gh->flags & GWIN_FLG_VISIBLE)) {
 80041c6:	f413 7280 	ands.w	r2, r3, #256	; 0x100
		v = gh->y; gh->y = y;
 80041ca:	f8a5 900e 	strh.w	r9, [r5, #14]
			if (!(gh->flags & GWIN_FLG_VISIBLE)) {
 80041ce:	f000 80f4 	beq.w	80043ba <WM_Add+0x3b6>
 80041d2:	68aa      	ldr	r2, [r5, #8]
 80041d4:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
 80041d8:	f9b2 1008 	ldrsh.w	r1, [r2, #8]
 80041dc:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80041e0:	e774      	b.n	80040cc <WM_Add+0xc8>
	if (gh->x == x && gh->y == y)
 80041e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80041e6:	454b      	cmp	r3, r9
 80041e8:	d1d0      	bne.n	800418c <WM_Add+0x188>
 80041ea:	68ac      	ldr	r4, [r5, #8]
 80041ec:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80041f0:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80041f4:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
 80041f8:	e768      	b.n	80040cc <WM_Add+0xc8>
				RedrawPending |= DOREDRAW_INVISIBLES;
 80041fa:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
	Qadd(&readyQ, me = _gfxCurrentThread);
 80041fe:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80042ac <WM_Add+0x2a8>
 8004202:	f8d4 9014 	ldr.w	r9, [r4, #20]
				gh->flags &= ~(GWIN_FLG_VISIBLE|GWIN_FLG_SYSVISIBLE);
 8004206:	f422 7340 	bic.w	r3, r2, #768	; 0x300
				gh->flags |= (GWIN_FLG_NEEDREDRAW|GWIN_FLG_BGREDRAW);
 800420a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
				RedrawPending |= DOREDRAW_INVISIBLES;
 800420e:	f041 0201 	orr.w	r2, r1, #1
				gh->flags |= (GWIN_FLG_NEEDREDRAW|GWIN_FLG_BGREDRAW);
 8004212:	61ab      	str	r3, [r5, #24]
				RedrawPending |= DOREDRAW_INVISIBLES;
 8004214:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
	t->next = 0;
 8004218:	f04f 0a00 	mov.w	sl, #0
	while (pmutex[0]) {
 800421c:	f1b9 0f00 	cmp.w	r9, #0
 8004220:	d01d      	beq.n	800425e <WM_Add+0x25a>
	if (!q->head)
 8004222:	6820      	ldr	r0, [r4, #0]
 8004224:	b130      	cbz	r0, 8004234 <WM_Add+0x230>
	q->head = t->next;
 8004226:	6807      	ldr	r7, [r0, #0]
 8004228:	6027      	str	r7, [r4, #0]
 800422a:	f002 fb65 	bl	80068f8 <free>
	if (!q->head)
 800422e:	4638      	mov	r0, r7
 8004230:	2f00      	cmp	r7, #0
 8004232:	d1f8      	bne.n	8004226 <WM_Add+0x222>
	if (!readyQ.head)
 8004234:	68a3      	ldr	r3, [r4, #8]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d0f0      	beq.n	800421c <WM_Add+0x218>
	Qadd(&readyQ, me = _gfxCurrentThread);
 800423a:	f8d8 1000 	ldr.w	r1, [r8]
		q->tail->next = t;
 800423e:	68e2      	ldr	r2, [r4, #12]
	t->next = 0;
 8004240:	f8c1 a000 	str.w	sl, [r1]
		q->tail->next = t;
 8004244:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 8004246:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 8004248:	60e1      	str	r1, [r4, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 800424a:	4608      	mov	r0, r1
	q->head = t->next;
 800424c:	60a2      	str	r2, [r4, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 800424e:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 8004250:	f8c8 3000 	str.w	r3, [r8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8004254:	f7fc fa62 	bl	800071c <_gfxTaskSwitch>
	while (pmutex[0]) {
 8004258:	f1b9 0f00 	cmp.w	r9, #0
 800425c:	d1e1      	bne.n	8004222 <WM_Add+0x21e>
	if (psem->cnt < psem->limit)
 800425e:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 8004262:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 8004266:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 800426a:	f043 0304 	orr.w	r3, r3, #4
	pmutex[0] = 1;
 800426e:	2001      	movs	r0, #1
	if (psem->cnt < psem->limit)
 8004270:	4291      	cmp	r1, r2
 8004272:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
		psem->cnt++;
 8004276:	bfc8      	it	gt
 8004278:	1812      	addgt	r2, r2, r0
	pmutex[0] = 0;
 800427a:	f04f 0300 	mov.w	r3, #0
	pmutex[0] = 1;
 800427e:	6160      	str	r0, [r4, #20]
		psem->cnt++;
 8004280:	bfc8      	it	gt
 8004282:	8222      	strhgt	r2, [r4, #16]
	pmutex[0] = 0;
 8004284:	6163      	str	r3, [r4, #20]
 8004286:	e74a      	b.n	800411e <WM_Add+0x11a>
	if (gh->x == x && gh->y == y)
 8004288:	f1b9 0f00 	cmp.w	r9, #0
 800428c:	d182      	bne.n	8004194 <WM_Add+0x190>
 800428e:	46c8      	mov	r8, r9
 8004290:	e7ac      	b.n	80041ec <WM_Add+0x1e8>
			_gwinUpdate(gh);
 8004292:	4628      	mov	r0, r5
			gh->width = w; gh->height = h;
 8004294:	822e      	strh	r6, [r5, #16]
 8004296:	f8a5 b012 	strh.w	fp, [r5, #18]
			_gwinUpdate(gh);
 800429a:	f7ff fd85 	bl	8003da8 <_gwinUpdate>
}
 800429e:	20ff      	movs	r0, #255	; 0xff
 80042a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042a4:	200000b8 	.word	0x200000b8
 80042a8:	200000d8 	.word	0x200000d8
 80042ac:	20000948 	.word	0x20000948
				RedrawPending |= DOREDRAW_VISIBLES;
 80042b0:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 80042b4:	6967      	ldr	r7, [r4, #20]
	Qadd(&readyQ, me = _gfxCurrentThread);
 80042b6:	4e67      	ldr	r6, [pc, #412]	; (8004454 <WM_Add+0x450>)
				gh->flags |= (GWIN_FLG_VISIBLE|GWIN_FLG_SYSVISIBLE|GWIN_FLG_NEEDREDRAW|GWIN_FLG_BGREDRAW);
 80042b8:	f443 4343 	orr.w	r3, r3, #49920	; 0xc300
				RedrawPending |= DOREDRAW_VISIBLES;
 80042bc:	f042 0202 	orr.w	r2, r2, #2
				gh->flags |= (GWIN_FLG_VISIBLE|GWIN_FLG_SYSVISIBLE|GWIN_FLG_NEEDREDRAW|GWIN_FLG_BGREDRAW);
 80042c0:	61ab      	str	r3, [r5, #24]
				RedrawPending |= DOREDRAW_VISIBLES;
 80042c2:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
	while (pmutex[0]) {
 80042c6:	b1d7      	cbz	r7, 80042fe <WM_Add+0x2fa>
	if (!q->head)
 80042c8:	6820      	ldr	r0, [r4, #0]
 80042ca:	b130      	cbz	r0, 80042da <WM_Add+0x2d6>
	q->head = t->next;
 80042cc:	6805      	ldr	r5, [r0, #0]
 80042ce:	6025      	str	r5, [r4, #0]
 80042d0:	f002 fb12 	bl	80068f8 <free>
	if (!q->head)
 80042d4:	4628      	mov	r0, r5
 80042d6:	2d00      	cmp	r5, #0
 80042d8:	d1f8      	bne.n	80042cc <WM_Add+0x2c8>
	if (!readyQ.head)
 80042da:	68a3      	ldr	r3, [r4, #8]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d0f2      	beq.n	80042c6 <WM_Add+0x2c2>
	Qadd(&readyQ, me = _gfxCurrentThread);
 80042e0:	6831      	ldr	r1, [r6, #0]
		q->tail->next = t;
 80042e2:	68e2      	ldr	r2, [r4, #12]
	t->next = 0;
 80042e4:	f8c1 8000 	str.w	r8, [r1]
		q->tail->next = t;
 80042e8:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 80042ea:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 80042ec:	60e1      	str	r1, [r4, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 80042ee:	4608      	mov	r0, r1
	q->head = t->next;
 80042f0:	60a2      	str	r2, [r4, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 80042f2:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 80042f4:	6033      	str	r3, [r6, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 80042f6:	f7fc fa11 	bl	800071c <_gfxTaskSwitch>
	while (pmutex[0]) {
 80042fa:	2f00      	cmp	r7, #0
 80042fc:	d1e4      	bne.n	80042c8 <WM_Add+0x2c4>
	if (psem->cnt < psem->limit)
 80042fe:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 8004302:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8004306:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 800430a:	4299      	cmp	r1, r3
	pmutex[0] = 1;
 800430c:	f04f 0001 	mov.w	r0, #1
		psem->cnt++;
 8004310:	bfc8      	it	gt
 8004312:	181b      	addgt	r3, r3, r0
 8004314:	f042 0204 	orr.w	r2, r2, #4
 8004318:	bfc8      	it	gt
 800431a:	8223      	strhgt	r3, [r4, #16]
	pmutex[0] = 0;
 800431c:	2300      	movs	r3, #0
	pmutex[0] = 1;
 800431e:	6160      	str	r0, [r4, #20]
 8004320:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
	pmutex[0] = 0;
 8004324:	6163      	str	r3, [r4, #20]
}
 8004326:	20ff      	movs	r0, #255	; 0xff
 8004328:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			pqueue->head = pqueue->tail = pitem;
 800432c:	62a0      	str	r0, [r4, #40]	; 0x28
 800432e:	6260      	str	r0, [r4, #36]	; 0x24
 8004330:	e677      	b.n	8004022 <WM_Add+0x1e>
				RedrawPending |= DOREDRAW_INVISIBLES;
 8004332:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8004336:	f8d4 a014 	ldr.w	sl, [r4, #20]
				gh->flags &= ~(GWIN_FLG_VISIBLE|GWIN_FLG_SYSVISIBLE);
 800433a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
				gh->flags |= (GWIN_FLG_NEEDREDRAW|GWIN_FLG_BGREDRAW);
 800433e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
				RedrawPending |= DOREDRAW_INVISIBLES;
 8004342:	f042 0201 	orr.w	r2, r2, #1
				gh->flags |= (GWIN_FLG_NEEDREDRAW|GWIN_FLG_BGREDRAW);
 8004346:	61ab      	str	r3, [r5, #24]
				RedrawPending |= DOREDRAW_INVISIBLES;
 8004348:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
	t->next = 0;
 800434c:	f04f 0b00 	mov.w	fp, #0
	while (pmutex[0]) {
 8004350:	f1ba 0f00 	cmp.w	sl, #0
 8004354:	d01b      	beq.n	800438e <WM_Add+0x38a>
	if (!q->head)
 8004356:	6820      	ldr	r0, [r4, #0]
 8004358:	b130      	cbz	r0, 8004368 <WM_Add+0x364>
	q->head = t->next;
 800435a:	6806      	ldr	r6, [r0, #0]
 800435c:	6026      	str	r6, [r4, #0]
 800435e:	f002 facb 	bl	80068f8 <free>
	if (!q->head)
 8004362:	4630      	mov	r0, r6
 8004364:	2e00      	cmp	r6, #0
 8004366:	d1f8      	bne.n	800435a <WM_Add+0x356>
	if (!readyQ.head)
 8004368:	68a3      	ldr	r3, [r4, #8]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d0f0      	beq.n	8004350 <WM_Add+0x34c>
	Qadd(&readyQ, me = _gfxCurrentThread);
 800436e:	4a39      	ldr	r2, [pc, #228]	; (8004454 <WM_Add+0x450>)
 8004370:	6811      	ldr	r1, [r2, #0]
		q->tail->next = t;
 8004372:	68e2      	ldr	r2, [r4, #12]
	t->next = 0;
 8004374:	f8c1 b000 	str.w	fp, [r1]
		q->tail->next = t;
 8004378:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	60a2      	str	r2, [r4, #8]
	_gfxCurrentThread = Qpop(&readyQ);
 800437e:	4a35      	ldr	r2, [pc, #212]	; (8004454 <WM_Add+0x450>)
		q->tail = t;
 8004380:	60e1      	str	r1, [r4, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8004382:	4608      	mov	r0, r1
 8004384:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 8004386:	6013      	str	r3, [r2, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8004388:	f7fc f9c8 	bl	800071c <_gfxTaskSwitch>
 800438c:	e7e0      	b.n	8004350 <WM_Add+0x34c>
 800438e:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
	if (psem->cnt < psem->limit)
 8004392:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 8004396:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 800439a:	f043 0304 	orr.w	r3, r3, #4
 800439e:	4291      	cmp	r1, r2
 80043a0:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
	pmutex[0] = 1;
 80043a4:	f04f 0301 	mov.w	r3, #1
 80043a8:	6163      	str	r3, [r4, #20]
		psem->cnt++;
 80043aa:	bfc8      	it	gt
 80043ac:	18d2      	addgt	r2, r2, r3
	pmutex[0] = 0;
 80043ae:	f04f 0300 	mov.w	r3, #0
		psem->cnt++;
 80043b2:	bfc8      	it	gt
 80043b4:	8222      	strhgt	r2, [r4, #16]
	pmutex[0] = 0;
 80043b6:	6163      	str	r3, [r4, #20]
 80043b8:	e6f7      	b.n	80041aa <WM_Add+0x1a6>
				RedrawPending |= DOREDRAW_VISIBLES;
 80043ba:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80043be:	f8d4 a014 	ldr.w	sl, [r4, #20]
	Qadd(&readyQ, me = _gfxCurrentThread);
 80043c2:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8004454 <WM_Add+0x450>
				gh->flags |= (GWIN_FLG_VISIBLE|GWIN_FLG_SYSVISIBLE|GWIN_FLG_NEEDREDRAW|GWIN_FLG_BGREDRAW);
 80043c6:	f443 4343 	orr.w	r3, r3, #49920	; 0xc300
				RedrawPending |= DOREDRAW_VISIBLES;
 80043ca:	f041 0102 	orr.w	r1, r1, #2
				gh->flags |= (GWIN_FLG_VISIBLE|GWIN_FLG_SYSVISIBLE|GWIN_FLG_NEEDREDRAW|GWIN_FLG_BGREDRAW);
 80043ce:	61ab      	str	r3, [r5, #24]
	t->next = 0;
 80043d0:	4691      	mov	r9, r2
				RedrawPending |= DOREDRAW_VISIBLES;
 80043d2:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
	while (pmutex[0]) {
 80043d6:	f1ba 0f00 	cmp.w	sl, #0
 80043da:	d01b      	beq.n	8004414 <WM_Add+0x410>
	if (!q->head)
 80043dc:	6820      	ldr	r0, [r4, #0]
 80043de:	b130      	cbz	r0, 80043ee <WM_Add+0x3ea>
	q->head = t->next;
 80043e0:	6806      	ldr	r6, [r0, #0]
 80043e2:	6026      	str	r6, [r4, #0]
 80043e4:	f002 fa88 	bl	80068f8 <free>
	if (!q->head)
 80043e8:	4630      	mov	r0, r6
 80043ea:	2e00      	cmp	r6, #0
 80043ec:	d1f8      	bne.n	80043e0 <WM_Add+0x3dc>
	if (!readyQ.head)
 80043ee:	68a3      	ldr	r3, [r4, #8]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d0f0      	beq.n	80043d6 <WM_Add+0x3d2>
	Qadd(&readyQ, me = _gfxCurrentThread);
 80043f4:	f8d8 1000 	ldr.w	r1, [r8]
		q->tail->next = t;
 80043f8:	68e2      	ldr	r2, [r4, #12]
	t->next = 0;
 80043fa:	f8c1 9000 	str.w	r9, [r1]
		q->tail->next = t;
 80043fe:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 8004400:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 8004402:	60e1      	str	r1, [r4, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8004404:	4608      	mov	r0, r1
	q->head = t->next;
 8004406:	60a2      	str	r2, [r4, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8004408:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 800440a:	f8c8 3000 	str.w	r3, [r8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 800440e:	f7fc f985 	bl	800071c <_gfxTaskSwitch>
 8004412:	e7e0      	b.n	80043d6 <WM_Add+0x3d2>
	if (psem->cnt < psem->limit)
 8004414:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 8004418:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 800441c:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 8004420:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8004424:	f9b5 900e 	ldrsh.w	r9, [r5, #14]
 8004428:	4299      	cmp	r1, r3
	pmutex[0] = 1;
 800442a:	f04f 0001 	mov.w	r0, #1
		psem->cnt++;
 800442e:	bfc4      	itt	gt
 8004430:	181b      	addgt	r3, r3, r0
 8004432:	8223      	strhgt	r3, [r4, #16]
 8004434:	68ab      	ldr	r3, [r5, #8]
	pmutex[0] = 1;
 8004436:	6160      	str	r0, [r4, #20]
 8004438:	f042 0204 	orr.w	r2, r2, #4
 800443c:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
 8004440:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8004444:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
	pmutex[0] = 0;
 8004448:	2300      	movs	r3, #0
 800444a:	6163      	str	r3, [r4, #20]
 800444c:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
 8004450:	e63c      	b.n	80040cc <WM_Add+0xc8>
 8004452:	bf00      	nop
 8004454:	20000948 	.word	0x20000948

08004458 <WM_Move>:
		u = gdispGGetWidth(gh->display);
 8004458:	6883      	ldr	r3, [r0, #8]
static void WM_Move(GHandle gh, coord_t x, coord_t y) {
 800445a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800445e:	4606      	mov	r6, r0
	if (x+gh->width > u)	x = u-gh->width;
 8004460:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
coord_t gdispGGetWidth(GDisplay *g)				{ return g->g.Width; }
 8004464:	f9b3 4008 	ldrsh.w	r4, [r3, #8]
coord_t gdispGGetHeight(GDisplay *g)			{ return g->g.Height; }
 8004468:	f9b3 e00a 	ldrsh.w	lr, [r3, #10]
 800446c:	180b      	adds	r3, r1, r0
 800446e:	42a3      	cmp	r3, r4
	if (y+gh->height > v)	y = v-gh->height;
 8004470:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
	if (x+gh->width > u)	x = u-gh->width;
 8004474:	fa1f fa84 	uxth.w	sl, r4
 8004478:	bfc8      	it	gt
 800447a:	ebaa 0100 	subgt.w	r1, sl, r0
	if (y+gh->height > v)	y = v-gh->height;
 800447e:	eb02 0503 	add.w	r5, r2, r3
	if (x+gh->width > u)	x = u-gh->width;
 8004482:	bfc8      	it	gt
 8004484:	b209      	sxthgt	r1, r1
	if (y+gh->height > v)	y = v-gh->height;
 8004486:	fa1f fc8e 	uxth.w	ip, lr
 800448a:	4575      	cmp	r5, lr
 800448c:	bfc8      	it	gt
 800448e:	ebac 0203 	subgt.w	r2, ip, r3
 8004492:	ea21 78e1 	bic.w	r8, r1, r1, asr #31
 8004496:	bfc8      	it	gt
 8004498:	b212      	sxthgt	r2, r2
 800449a:	ea22 79e2 	bic.w	r9, r2, r2, asr #31
	u -= x;
 800449e:	ebaa 0508 	sub.w	r5, sl, r8
 80044a2:	b22d      	sxth	r5, r5
	v -= y;
 80044a4:	ebac 0709 	sub.w	r7, ip, r9
 80044a8:	4285      	cmp	r5, r0
 80044aa:	b23f      	sxth	r7, r7
 80044ac:	bfa8      	it	ge
 80044ae:	4605      	movge	r5, r0
	if (gh->height < v)	v = gh->height;
 80044b0:	42bb      	cmp	r3, r7
static void WM_Move(GHandle gh, coord_t x, coord_t y) {
 80044b2:	b083      	sub	sp, #12
	if (y+gh->height > v)	y = v-gh->height;
 80044b4:	4619      	mov	r1, r3
	if (gh->height < v)	v = gh->height;
 80044b6:	f2c0 8088 	blt.w	80045ca <WM_Move+0x172>
	if (u != gh->width || v != gh->height)
 80044ba:	42a8      	cmp	r0, r5
 80044bc:	d101      	bne.n	80044c2 <WM_Move+0x6a>
 80044be:	42bb      	cmp	r3, r7
 80044c0:	d03b      	beq.n	800453a <WM_Move+0xe2>
 80044c2:	4639      	mov	r1, r7
	if (gh->x+w > v) 	w = v - gh->x;
 80044c4:	f9b6 200c 	ldrsh.w	r2, [r6, #12]
 80044c8:	eb02 0b05 	add.w	fp, r2, r5
 80044cc:	455c      	cmp	r4, fp
	if (gh->y+h > v) 	h = v - gh->y;
 80044ce:	f9b6 400e 	ldrsh.w	r4, [r6, #14]
	if (gh->x+w > v) 	w = v - gh->x;
 80044d2:	bfb8      	it	lt
 80044d4:	ebaa 0502 	sublt.w	r5, sl, r2
	if (gh->y+h > v) 	h = v - gh->y;
 80044d8:	4421      	add	r1, r4
	if (gh->x+w > v) 	w = v - gh->x;
 80044da:	bfb8      	it	lt
 80044dc:	b22d      	sxthlt	r5, r5
	if (gh->y+h > v) 	h = v - gh->y;
 80044de:	458e      	cmp	lr, r1
 80044e0:	bfbc      	itt	lt
 80044e2:	ebac 0704 	sublt.w	r7, ip, r4
 80044e6:	b23f      	sxthlt	r7, r7
 80044e8:	2d03      	cmp	r5, #3
 80044ea:	bfb8      	it	lt
 80044ec:	2503      	movlt	r5, #3
 80044ee:	2f03      	cmp	r7, #3
 80044f0:	bfb8      	it	lt
 80044f2:	2703      	movlt	r7, #3
	if (gh->width == w && gh->height == h)
 80044f4:	42a8      	cmp	r0, r5
 80044f6:	9701      	str	r7, [sp, #4]
 80044f8:	d06b      	beq.n	80045d2 <WM_Move+0x17a>
	if ((gh->flags & GWIN_FLG_SYSVISIBLE)) {
 80044fa:	69b1      	ldr	r1, [r6, #24]
 80044fc:	058f      	lsls	r7, r1, #22
 80044fe:	d56d      	bpl.n	80045dc <WM_Move+0x184>
		if (w >= gh->width && h >= gh->height) {
 8004500:	42a8      	cmp	r0, r5
 8004502:	dc03      	bgt.n	800450c <WM_Move+0xb4>
 8004504:	9a01      	ldr	r2, [sp, #4]
 8004506:	4293      	cmp	r3, r2
 8004508:	f340 80ef 	ble.w	80046ea <WM_Move+0x292>
			if ((gh->flags & GWIN_FLG_VISIBLE)) {
 800450c:	05cb      	lsls	r3, r1, #23
				RedrawPending |= DOREDRAW_INVISIBLES;
 800450e:	4cb3      	ldr	r4, [pc, #716]	; (80047dc <WM_Move+0x384>)
			if ((gh->flags & GWIN_FLG_VISIBLE)) {
 8004510:	d476      	bmi.n	8004600 <WM_Move+0x1a8>
	if (!RedrawPending)
 8004512:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8004516:	b13b      	cbz	r3, 8004528 <WM_Move+0xd0>
		gfxSemWait(&gwinsem, TIME_INFINITE);
 8004518:	f04f 31ff 	mov.w	r1, #4294967295
 800451c:	48b0      	ldr	r0, [pc, #704]	; (80047e0 <WM_Move+0x388>)
 800451e:	f7fd fb5b 	bl	8001bd8 <gfxSemWait>
 8004522:	2000      	movs	r0, #0
 8004524:	f7fd f848 	bl	80015b8 <_gwinFlushRedraws.part.8>
			if (!(gh->flags & GWIN_FLG_VISIBLE)) {
 8004528:	69b3      	ldr	r3, [r6, #24]
			gh->width = w; gh->height = h;
 800452a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800452e:	8235      	strh	r5, [r6, #16]
			if (!(gh->flags & GWIN_FLG_VISIBLE)) {
 8004530:	f413 7780 	ands.w	r7, r3, #256	; 0x100
			gh->width = w; gh->height = h;
 8004534:	8272      	strh	r2, [r6, #18]
			if (!(gh->flags & GWIN_FLG_VISIBLE)) {
 8004536:	f000 80ae 	beq.w	8004696 <WM_Move+0x23e>
 800453a:	f9b6 200c 	ldrsh.w	r2, [r6, #12]
	if (gh->x == x && gh->y == y)
 800453e:	4590      	cmp	r8, r2
 8004540:	d059      	beq.n	80045f6 <WM_Move+0x19e>
	if ((gh->flags & GWIN_FLG_SYSVISIBLE)) {
 8004542:	69b3      	ldr	r3, [r6, #24]
 8004544:	059f      	lsls	r7, r3, #22
 8004546:	d54f      	bpl.n	80045e8 <WM_Move+0x190>
			if ((gh->flags & GWIN_FLG_VISIBLE)) {
 8004548:	05dd      	lsls	r5, r3, #23
				RedrawPending |= DOREDRAW_INVISIBLES;
 800454a:	4ca4      	ldr	r4, [pc, #656]	; (80047dc <WM_Move+0x384>)
			if ((gh->flags & GWIN_FLG_VISIBLE)) {
 800454c:	f100 80ee 	bmi.w	800472c <WM_Move+0x2d4>
	if (!RedrawPending)
 8004550:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8004554:	b13b      	cbz	r3, 8004566 <WM_Move+0x10e>
		gfxSemWait(&gwinsem, TIME_INFINITE);
 8004556:	f04f 31ff 	mov.w	r1, #4294967295
 800455a:	48a1      	ldr	r0, [pc, #644]	; (80047e0 <WM_Move+0x388>)
 800455c:	f7fd fb3c 	bl	8001bd8 <gfxSemWait>
 8004560:	2000      	movs	r0, #0
 8004562:	f7fd f829 	bl	80015b8 <_gwinFlushRedraws.part.8>
			if (!(gh->flags & GWIN_FLG_VISIBLE)) {
 8004566:	69b3      	ldr	r3, [r6, #24]
		u = gh->x; gh->x = x;
 8004568:	f8a6 800c 	strh.w	r8, [r6, #12]
			if (!(gh->flags & GWIN_FLG_VISIBLE)) {
 800456c:	f413 7280 	ands.w	r2, r3, #256	; 0x100
		v = gh->y; gh->y = y;
 8004570:	f8a6 900e 	strh.w	r9, [r6, #14]
			if (!(gh->flags & GWIN_FLG_VISIBLE)) {
 8004574:	d13c      	bne.n	80045f0 <WM_Move+0x198>
				RedrawPending |= DOREDRAW_VISIBLES;
 8004576:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800457a:	f8d4 8014 	ldr.w	r8, [r4, #20]
	Qadd(&readyQ, me = _gfxCurrentThread);
 800457e:	4f99      	ldr	r7, [pc, #612]	; (80047e4 <WM_Move+0x38c>)
				gh->flags |= (GWIN_FLG_VISIBLE|GWIN_FLG_SYSVISIBLE|GWIN_FLG_NEEDREDRAW|GWIN_FLG_BGREDRAW);
 8004580:	f443 4343 	orr.w	r3, r3, #49920	; 0xc300
				RedrawPending |= DOREDRAW_VISIBLES;
 8004584:	f041 0102 	orr.w	r1, r1, #2
				gh->flags |= (GWIN_FLG_VISIBLE|GWIN_FLG_SYSVISIBLE|GWIN_FLG_NEEDREDRAW|GWIN_FLG_BGREDRAW);
 8004588:	61b3      	str	r3, [r6, #24]
				RedrawPending |= DOREDRAW_VISIBLES;
 800458a:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
	t->next = 0;
 800458e:	4616      	mov	r6, r2
	while (pmutex[0]) {
 8004590:	f1b8 0f00 	cmp.w	r8, #0
 8004594:	f000 810c 	beq.w	80047b0 <WM_Move+0x358>
	if (!q->head)
 8004598:	6820      	ldr	r0, [r4, #0]
 800459a:	b130      	cbz	r0, 80045aa <WM_Move+0x152>
	q->head = t->next;
 800459c:	6805      	ldr	r5, [r0, #0]
 800459e:	6025      	str	r5, [r4, #0]
 80045a0:	f002 f9aa 	bl	80068f8 <free>
	if (!q->head)
 80045a4:	4628      	mov	r0, r5
 80045a6:	2d00      	cmp	r5, #0
 80045a8:	d1f8      	bne.n	800459c <WM_Move+0x144>
	if (!readyQ.head)
 80045aa:	68a3      	ldr	r3, [r4, #8]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d0ef      	beq.n	8004590 <WM_Move+0x138>
	Qadd(&readyQ, me = _gfxCurrentThread);
 80045b0:	6839      	ldr	r1, [r7, #0]
		q->tail->next = t;
 80045b2:	68e2      	ldr	r2, [r4, #12]
	t->next = 0;
 80045b4:	600e      	str	r6, [r1, #0]
		q->tail->next = t;
 80045b6:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 80045b8:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 80045ba:	60e1      	str	r1, [r4, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 80045bc:	4608      	mov	r0, r1
	q->head = t->next;
 80045be:	60a2      	str	r2, [r4, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 80045c0:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 80045c2:	603b      	str	r3, [r7, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 80045c4:	f7fc f8aa 	bl	800071c <_gfxTaskSwitch>
 80045c8:	e7e2      	b.n	8004590 <WM_Move+0x138>
	if (u != gh->width || v != gh->height)
 80045ca:	42a8      	cmp	r0, r5
 80045cc:	d0b5      	beq.n	800453a <WM_Move+0xe2>
 80045ce:	461f      	mov	r7, r3
 80045d0:	e778      	b.n	80044c4 <WM_Move+0x6c>
	if (gh->width == w && gh->height == h)
 80045d2:	42bb      	cmp	r3, r7
 80045d4:	d0b3      	beq.n	800453e <WM_Move+0xe6>
	if ((gh->flags & GWIN_FLG_SYSVISIBLE)) {
 80045d6:	69b1      	ldr	r1, [r6, #24]
 80045d8:	0588      	lsls	r0, r1, #22
 80045da:	d493      	bmi.n	8004504 <WM_Move+0xac>
		gh->width = w; gh->height = h;
 80045dc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80045e0:	8235      	strh	r5, [r6, #16]
	if (gh->x == x && gh->y == y)
 80045e2:	4590      	cmp	r8, r2
		gh->width = w; gh->height = h;
 80045e4:	8273      	strh	r3, [r6, #18]
	if (gh->x == x && gh->y == y)
 80045e6:	d008      	beq.n	80045fa <WM_Move+0x1a2>
		u = gh->x; gh->x = x;
 80045e8:	f8a6 800c 	strh.w	r8, [r6, #12]
		v = gh->y; gh->y = y;
 80045ec:	f8a6 900e 	strh.w	r9, [r6, #14]
}
 80045f0:	b003      	add	sp, #12
 80045f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045f6:	f9b6 400e 	ldrsh.w	r4, [r6, #14]
	if (gh->x == x && gh->y == y)
 80045fa:	454c      	cmp	r4, r9
 80045fc:	d1a1      	bne.n	8004542 <WM_Move+0xea>
 80045fe:	e7f7      	b.n	80045f0 <WM_Move+0x198>
				RedrawPending |= DOREDRAW_INVISIBLES;
 8004600:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
	Qadd(&readyQ, me = _gfxCurrentThread);
 8004604:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 80047e4 <WM_Move+0x38c>
 8004608:	f8d4 b014 	ldr.w	fp, [r4, #20]
				gh->flags &= ~(GWIN_FLG_VISIBLE|GWIN_FLG_SYSVISIBLE);
 800460c:	f421 7340 	bic.w	r3, r1, #768	; 0x300
				gh->flags |= (GWIN_FLG_NEEDREDRAW|GWIN_FLG_BGREDRAW);
 8004610:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
				RedrawPending |= DOREDRAW_INVISIBLES;
 8004614:	f042 0201 	orr.w	r2, r2, #1
				gh->flags |= (GWIN_FLG_NEEDREDRAW|GWIN_FLG_BGREDRAW);
 8004618:	61b3      	str	r3, [r6, #24]
				RedrawPending |= DOREDRAW_INVISIBLES;
 800461a:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
	while (pmutex[0]) {
 800461e:	f1bb 0f00 	cmp.w	fp, #0
 8004622:	d01d      	beq.n	8004660 <WM_Move+0x208>
	if (!q->head)
 8004624:	6820      	ldr	r0, [r4, #0]
 8004626:	b130      	cbz	r0, 8004636 <WM_Move+0x1de>
	q->head = t->next;
 8004628:	6807      	ldr	r7, [r0, #0]
 800462a:	6027      	str	r7, [r4, #0]
 800462c:	f002 f964 	bl	80068f8 <free>
	if (!q->head)
 8004630:	4638      	mov	r0, r7
 8004632:	2f00      	cmp	r7, #0
 8004634:	d1f8      	bne.n	8004628 <WM_Move+0x1d0>
	if (!readyQ.head)
 8004636:	68a3      	ldr	r3, [r4, #8]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d0f0      	beq.n	800461e <WM_Move+0x1c6>
	Qadd(&readyQ, me = _gfxCurrentThread);
 800463c:	f8da 1000 	ldr.w	r1, [sl]
		q->tail->next = t;
 8004640:	68e2      	ldr	r2, [r4, #12]
		q->tail = t;
 8004642:	60e1      	str	r1, [r4, #12]
	t->next = 0;
 8004644:	2000      	movs	r0, #0
 8004646:	6008      	str	r0, [r1, #0]
		q->tail->next = t;
 8004648:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	60a2      	str	r2, [r4, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 800464e:	4608      	mov	r0, r1
 8004650:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 8004652:	f8ca 3000 	str.w	r3, [sl]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8004656:	f7fc f861 	bl	800071c <_gfxTaskSwitch>
	while (pmutex[0]) {
 800465a:	f1bb 0f00 	cmp.w	fp, #0
 800465e:	d1e1      	bne.n	8004624 <WM_Move+0x1cc>
 8004660:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
	if (psem->cnt < psem->limit)
 8004664:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 8004668:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 800466c:	f043 0304 	orr.w	r3, r3, #4
 8004670:	4291      	cmp	r1, r2
 8004672:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
	pmutex[0] = 1;
 8004676:	f04f 0301 	mov.w	r3, #1
 800467a:	6163      	str	r3, [r4, #20]
		psem->cnt++;
 800467c:	bfc8      	it	gt
 800467e:	18d2      	addgt	r2, r2, r3
	pmutex[0] = 0;
 8004680:	f04f 0300 	mov.w	r3, #0
 8004684:	6163      	str	r3, [r4, #20]
	if (!RedrawPending)
 8004686:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
		psem->cnt++;
 800468a:	bfc8      	it	gt
 800468c:	8222      	strhgt	r2, [r4, #16]
 800468e:	2b00      	cmp	r3, #0
 8004690:	f47f af42 	bne.w	8004518 <WM_Move+0xc0>
 8004694:	e748      	b.n	8004528 <WM_Move+0xd0>
				RedrawPending |= DOREDRAW_VISIBLES;
 8004696:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 800469a:	f8d4 a014 	ldr.w	sl, [r4, #20]
	Qadd(&readyQ, me = _gfxCurrentThread);
 800469e:	4d51      	ldr	r5, [pc, #324]	; (80047e4 <WM_Move+0x38c>)
				gh->flags |= (GWIN_FLG_VISIBLE|GWIN_FLG_SYSVISIBLE|GWIN_FLG_NEEDREDRAW|GWIN_FLG_BGREDRAW);
 80046a0:	f443 4343 	orr.w	r3, r3, #49920	; 0xc300
				RedrawPending |= DOREDRAW_VISIBLES;
 80046a4:	f042 0202 	orr.w	r2, r2, #2
				gh->flags |= (GWIN_FLG_VISIBLE|GWIN_FLG_SYSVISIBLE|GWIN_FLG_NEEDREDRAW|GWIN_FLG_BGREDRAW);
 80046a8:	61b3      	str	r3, [r6, #24]
	t->next = 0;
 80046aa:	46bb      	mov	fp, r7
				RedrawPending |= DOREDRAW_VISIBLES;
 80046ac:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
	while (pmutex[0]) {
 80046b0:	f1ba 0f00 	cmp.w	sl, #0
 80046b4:	d023      	beq.n	80046fe <WM_Move+0x2a6>
	if (!q->head)
 80046b6:	6820      	ldr	r0, [r4, #0]
 80046b8:	b130      	cbz	r0, 80046c8 <WM_Move+0x270>
	q->head = t->next;
 80046ba:	6807      	ldr	r7, [r0, #0]
 80046bc:	6027      	str	r7, [r4, #0]
 80046be:	f002 f91b 	bl	80068f8 <free>
	if (!q->head)
 80046c2:	4638      	mov	r0, r7
 80046c4:	2f00      	cmp	r7, #0
 80046c6:	d1f8      	bne.n	80046ba <WM_Move+0x262>
	if (!readyQ.head)
 80046c8:	68a3      	ldr	r3, [r4, #8]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d0f0      	beq.n	80046b0 <WM_Move+0x258>
	Qadd(&readyQ, me = _gfxCurrentThread);
 80046ce:	6829      	ldr	r1, [r5, #0]
		q->tail->next = t;
 80046d0:	68e2      	ldr	r2, [r4, #12]
	t->next = 0;
 80046d2:	f8c1 b000 	str.w	fp, [r1]
		q->tail->next = t;
 80046d6:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 80046d8:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 80046da:	60e1      	str	r1, [r4, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 80046dc:	4608      	mov	r0, r1
	q->head = t->next;
 80046de:	60a2      	str	r2, [r4, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 80046e0:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 80046e2:	602b      	str	r3, [r5, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 80046e4:	f7fc f81a 	bl	800071c <_gfxTaskSwitch>
 80046e8:	e7e2      	b.n	80046b0 <WM_Move+0x258>
			gh->width = w; gh->height = h;
 80046ea:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80046ee:	8235      	strh	r5, [r6, #16]
 80046f0:	8273      	strh	r3, [r6, #18]
			_gwinUpdate(gh);
 80046f2:	4630      	mov	r0, r6
 80046f4:	f7ff fb58 	bl	8003da8 <_gwinUpdate>
 80046f8:	f9b6 200c 	ldrsh.w	r2, [r6, #12]
 80046fc:	e71f      	b.n	800453e <WM_Move+0xe6>
	if (psem->cnt < psem->limit)
 80046fe:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 8004702:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8004706:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 800470a:	4299      	cmp	r1, r3
	pmutex[0] = 1;
 800470c:	f04f 0001 	mov.w	r0, #1
		psem->cnt++;
 8004710:	bfc8      	it	gt
 8004712:	181b      	addgt	r3, r3, r0
 8004714:	f042 0204 	orr.w	r2, r2, #4
 8004718:	bfc8      	it	gt
 800471a:	8223      	strhgt	r3, [r4, #16]
	pmutex[0] = 0;
 800471c:	2300      	movs	r3, #0
 800471e:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
	pmutex[0] = 1;
 8004722:	6160      	str	r0, [r4, #20]
 8004724:	f9b6 200c 	ldrsh.w	r2, [r6, #12]
	pmutex[0] = 0;
 8004728:	6163      	str	r3, [r4, #20]
 800472a:	e708      	b.n	800453e <WM_Move+0xe6>
				RedrawPending |= DOREDRAW_INVISIBLES;
 800472c:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
	Qadd(&readyQ, me = _gfxCurrentThread);
 8004730:	4d2c      	ldr	r5, [pc, #176]	; (80047e4 <WM_Move+0x38c>)
 8004732:	f8d4 b014 	ldr.w	fp, [r4, #20]
				gh->flags &= ~(GWIN_FLG_VISIBLE|GWIN_FLG_SYSVISIBLE);
 8004736:	f423 7340 	bic.w	r3, r3, #768	; 0x300
				gh->flags |= (GWIN_FLG_NEEDREDRAW|GWIN_FLG_BGREDRAW);
 800473a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
				RedrawPending |= DOREDRAW_INVISIBLES;
 800473e:	f042 0201 	orr.w	r2, r2, #1
				gh->flags |= (GWIN_FLG_NEEDREDRAW|GWIN_FLG_BGREDRAW);
 8004742:	61b3      	str	r3, [r6, #24]
				RedrawPending |= DOREDRAW_INVISIBLES;
 8004744:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
	t->next = 0;
 8004748:	f04f 0a00 	mov.w	sl, #0
	while (pmutex[0]) {
 800474c:	f1bb 0f00 	cmp.w	fp, #0
 8004750:	d019      	beq.n	8004786 <WM_Move+0x32e>
	if (!q->head)
 8004752:	6820      	ldr	r0, [r4, #0]
 8004754:	b130      	cbz	r0, 8004764 <WM_Move+0x30c>
	q->head = t->next;
 8004756:	6807      	ldr	r7, [r0, #0]
 8004758:	6027      	str	r7, [r4, #0]
 800475a:	f002 f8cd 	bl	80068f8 <free>
	if (!q->head)
 800475e:	4638      	mov	r0, r7
 8004760:	2f00      	cmp	r7, #0
 8004762:	d1f8      	bne.n	8004756 <WM_Move+0x2fe>
	if (!readyQ.head)
 8004764:	68a3      	ldr	r3, [r4, #8]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d0f0      	beq.n	800474c <WM_Move+0x2f4>
	Qadd(&readyQ, me = _gfxCurrentThread);
 800476a:	6829      	ldr	r1, [r5, #0]
		q->tail->next = t;
 800476c:	68e2      	ldr	r2, [r4, #12]
	t->next = 0;
 800476e:	f8c1 a000 	str.w	sl, [r1]
		q->tail->next = t;
 8004772:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 8004774:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 8004776:	60e1      	str	r1, [r4, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8004778:	4608      	mov	r0, r1
	q->head = t->next;
 800477a:	60a2      	str	r2, [r4, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 800477c:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 800477e:	602b      	str	r3, [r5, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8004780:	f7fb ffcc 	bl	800071c <_gfxTaskSwitch>
 8004784:	e7e2      	b.n	800474c <WM_Move+0x2f4>
	if (psem->cnt < psem->limit)
 8004786:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 800478a:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 800478e:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8004792:	f043 0304 	orr.w	r3, r3, #4
	pmutex[0] = 1;
 8004796:	2001      	movs	r0, #1
	if (psem->cnt < psem->limit)
 8004798:	4291      	cmp	r1, r2
 800479a:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
		psem->cnt++;
 800479e:	bfc8      	it	gt
 80047a0:	1812      	addgt	r2, r2, r0
	pmutex[0] = 0;
 80047a2:	f04f 0300 	mov.w	r3, #0
	pmutex[0] = 1;
 80047a6:	6160      	str	r0, [r4, #20]
		psem->cnt++;
 80047a8:	bfc8      	it	gt
 80047aa:	8222      	strhgt	r2, [r4, #16]
	pmutex[0] = 0;
 80047ac:	6163      	str	r3, [r4, #20]
 80047ae:	e6cf      	b.n	8004550 <WM_Move+0xf8>
	if (psem->cnt < psem->limit)
 80047b0:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 80047b4:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 80047b8:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 80047bc:	f043 0304 	orr.w	r3, r3, #4
	pmutex[0] = 1;
 80047c0:	2001      	movs	r0, #1
	if (psem->cnt < psem->limit)
 80047c2:	4291      	cmp	r1, r2
 80047c4:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
		psem->cnt++;
 80047c8:	bfc8      	it	gt
 80047ca:	1812      	addgt	r2, r2, r0
	pmutex[0] = 0;
 80047cc:	f04f 0300 	mov.w	r3, #0
	pmutex[0] = 1;
 80047d0:	6160      	str	r0, [r4, #20]
		psem->cnt++;
 80047d2:	bfc8      	it	gt
 80047d4:	8222      	strhgt	r2, [r4, #16]
	pmutex[0] = 0;
 80047d6:	6163      	str	r3, [r4, #20]
 80047d8:	e70a      	b.n	80045f0 <WM_Move+0x198>
 80047da:	bf00      	nop
 80047dc:	200000b8 	.word	0x200000b8
 80047e0:	200000d8 	.word	0x200000d8
 80047e4:	20000948 	.word	0x20000948

080047e8 <_gwinDrawEnd>:
void _gwinDrawEnd(GHandle gh) {
 80047e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		gdispGUnsetClip(gh->display);
 80047ec:	6886      	ldr	r6, [r0, #8]
 80047ee:	4d2f      	ldr	r5, [pc, #188]	; (80048ac <_gwinDrawEnd+0xc4>)
coord_t gdispGGetWidth(GDisplay *g)				{ return g->g.Width; }
 80047f0:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
coord_t gdispGGetHeight(GDisplay *g)			{ return g->g.Height; }
 80047f4:	f9b6 900a 	ldrsh.w	r9, [r6, #10]
	Qadd(&readyQ, me = _gfxCurrentThread);
 80047f8:	4f2d      	ldr	r7, [pc, #180]	; (80048b0 <_gwinDrawEnd+0xc8>)
	t->next = 0;
 80047fa:	f04f 0800 	mov.w	r8, #0
	while (pmutex[0]) {
 80047fe:	6a33      	ldr	r3, [r6, #32]
 8004800:	b1db      	cbz	r3, 800483a <_gwinDrawEnd+0x52>
	if (!q->head)
 8004802:	6828      	ldr	r0, [r5, #0]
 8004804:	b130      	cbz	r0, 8004814 <_gwinDrawEnd+0x2c>
	q->head = t->next;
 8004806:	6804      	ldr	r4, [r0, #0]
 8004808:	602c      	str	r4, [r5, #0]
 800480a:	f002 f875 	bl	80068f8 <free>
	if (!q->head)
 800480e:	4620      	mov	r0, r4
 8004810:	2c00      	cmp	r4, #0
 8004812:	d1f8      	bne.n	8004806 <_gwinDrawEnd+0x1e>
	if (!readyQ.head)
 8004814:	68ab      	ldr	r3, [r5, #8]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d0f1      	beq.n	80047fe <_gwinDrawEnd+0x16>
	Qadd(&readyQ, me = _gfxCurrentThread);
 800481a:	6839      	ldr	r1, [r7, #0]
		q->tail->next = t;
 800481c:	68ea      	ldr	r2, [r5, #12]
	t->next = 0;
 800481e:	f8c1 8000 	str.w	r8, [r1]
		q->tail->next = t;
 8004822:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 8004824:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 8004826:	60e9      	str	r1, [r5, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8004828:	4608      	mov	r0, r1
	q->head = t->next;
 800482a:	60aa      	str	r2, [r5, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 800482c:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 800482e:	603b      	str	r3, [r7, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8004830:	f7fb ff74 	bl	800071c <_gfxTaskSwitch>
	while (pmutex[0]) {
 8004834:	6a33      	ldr	r3, [r6, #32]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1e3      	bne.n	8004802 <_gwinDrawEnd+0x1a>
	pmutex[0] = 1;
 800483a:	2201      	movs	r2, #1
				if (cx <= 0 || cy <= 0 || x >= g->g.Width || y >= g->g.Height) { x = y = cx = cy = 0; }
 800483c:	f1ba 0f00 	cmp.w	sl, #0
 8004840:	6232      	str	r2, [r6, #32]
 8004842:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8004846:	f9b6 200a 	ldrsh.w	r2, [r6, #10]
 800484a:	dd04      	ble.n	8004856 <_gwinDrawEnd+0x6e>
 800484c:	f1b9 0f00 	cmp.w	r9, #0
 8004850:	dd01      	ble.n	8004856 <_gwinDrawEnd+0x6e>
 8004852:	2900      	cmp	r1, #0
 8004854:	dc1d      	bgt.n	8004892 <_gwinDrawEnd+0xaa>
 8004856:	f04f 0900 	mov.w	r9, #0
 800485a:	46ca      	mov	sl, r9
				g->clipx0 = x;
 800485c:	2300      	movs	r3, #0
				g->clipx1 = x+cx;	if (g->clipx1 > g->g.Width) g->clipx1 = g->g.Width;
 800485e:	4551      	cmp	r1, sl
				g->clipx0 = x;
 8004860:	6273      	str	r3, [r6, #36]	; 0x24
				g->clipx1 = x+cx;	if (g->clipx1 > g->g.Width) g->clipx1 = g->g.Width;
 8004862:	da1b      	bge.n	800489c <_gwinDrawEnd+0xb4>
 8004864:	8531      	strh	r1, [r6, #40]	; 0x28
				g->clipy1 = y+cy;	if (g->clipy1 > g->g.Height) g->clipy1 = g->g.Height;
 8004866:	4591      	cmp	r9, r2
	if (!RedrawPending)
 8004868:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800486c:	bfa8      	it	ge
 800486e:	4691      	movge	r9, r2
	pmutex[0] = 0;
 8004870:	2200      	movs	r2, #0
 8004872:	f8a6 902a 	strh.w	r9, [r6, #42]	; 0x2a
 8004876:	6232      	str	r2, [r6, #32]
 8004878:	b99b      	cbnz	r3, 80048a2 <_gwinDrawEnd+0xba>
	if (psem->cnt < psem->limit)
 800487a:	f9b5 3020 	ldrsh.w	r3, [r5, #32]
 800487e:	f9b5 2022 	ldrsh.w	r2, [r5, #34]	; 0x22
 8004882:	429a      	cmp	r2, r3
 8004884:	dd03      	ble.n	800488e <_gwinDrawEnd+0xa6>
		psem->cnt++;
 8004886:	3301      	adds	r3, #1
 8004888:	842b      	strh	r3, [r5, #32]
}
 800488a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800488e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (cx <= 0 || cy <= 0 || x >= g->g.Width || y >= g->g.Height) { x = y = cx = cy = 0; }
 8004892:	2a00      	cmp	r2, #0
 8004894:	dce2      	bgt.n	800485c <_gwinDrawEnd+0x74>
 8004896:	4699      	mov	r9, r3
				g->clipx0 = x;
 8004898:	6273      	str	r3, [r6, #36]	; 0x24
				if (cx <= 0 || cy <= 0 || x >= g->g.Width || y >= g->g.Height) { x = y = cx = cy = 0; }
 800489a:	469a      	mov	sl, r3
				g->clipx1 = x+cx;	if (g->clipx1 > g->g.Width) g->clipx1 = g->g.Width;
 800489c:	f8a6 a028 	strh.w	sl, [r6, #40]	; 0x28
 80048a0:	e7e1      	b.n	8004866 <_gwinDrawEnd+0x7e>
 80048a2:	2002      	movs	r0, #2
 80048a4:	f7fc fe88 	bl	80015b8 <_gwinFlushRedraws.part.8>
 80048a8:	e7e7      	b.n	800487a <_gwinDrawEnd+0x92>
 80048aa:	bf00      	nop
 80048ac:	200000b8 	.word	0x200000b8
 80048b0:	20000948 	.word	0x20000948

080048b4 <_gwinDrawStart>:
	if (!(gh->flags & GWIN_FLG_SYSVISIBLE))
 80048b4:	6983      	ldr	r3, [r0, #24]
 80048b6:	f413 7300 	ands.w	r3, r3, #512	; 0x200
 80048ba:	d101      	bne.n	80048c0 <_gwinDrawStart+0xc>
		return FALSE;
 80048bc:	4618      	mov	r0, r3
 80048be:	4770      	bx	lr
bool_t _gwinDrawStart(GHandle gh) {
 80048c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048c4:	4d20      	ldr	r5, [pc, #128]	; (8004948 <_gwinDrawStart+0x94>)
	Qadd(&readyQ, me = _gfxCurrentThread);
 80048c6:	4f21      	ldr	r7, [pc, #132]	; (800494c <_gwinDrawStart+0x98>)
 80048c8:	b082      	sub	sp, #8
 80048ca:	4606      	mov	r6, r0
	t->next = 0;
 80048cc:	f04f 0800 	mov.w	r8, #0
	while (psem->cnt <= 0) {
 80048d0:	f9b5 2020 	ldrsh.w	r2, [r5, #32]
 80048d4:	2a00      	cmp	r2, #0
 80048d6:	dc19      	bgt.n	800490c <_gwinDrawStart+0x58>
	if (!q->head)
 80048d8:	6828      	ldr	r0, [r5, #0]
 80048da:	b130      	cbz	r0, 80048ea <_gwinDrawStart+0x36>
	q->head = t->next;
 80048dc:	6804      	ldr	r4, [r0, #0]
 80048de:	602c      	str	r4, [r5, #0]
 80048e0:	f002 f80a 	bl	80068f8 <free>
	if (!q->head)
 80048e4:	4620      	mov	r0, r4
 80048e6:	2c00      	cmp	r4, #0
 80048e8:	d1f8      	bne.n	80048dc <_gwinDrawStart+0x28>
	if (!readyQ.head)
 80048ea:	68ab      	ldr	r3, [r5, #8]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d0ef      	beq.n	80048d0 <_gwinDrawStart+0x1c>
	Qadd(&readyQ, me = _gfxCurrentThread);
 80048f0:	6839      	ldr	r1, [r7, #0]
		q->tail->next = t;
 80048f2:	68ea      	ldr	r2, [r5, #12]
	t->next = 0;
 80048f4:	f8c1 8000 	str.w	r8, [r1]
		q->tail->next = t;
 80048f8:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 80048fa:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 80048fc:	60e9      	str	r1, [r5, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 80048fe:	4608      	mov	r0, r1
 8004900:	4619      	mov	r1, r3
	q->head = t->next;
 8004902:	60aa      	str	r2, [r5, #8]
	_gfxCurrentThread = Qpop(&readyQ);
 8004904:	603b      	str	r3, [r7, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8004906:	f7fb ff09 	bl	800071c <_gfxTaskSwitch>
 800490a:	e7e1      	b.n	80048d0 <_gwinDrawStart+0x1c>
	if (!(gh->flags & GWIN_FLG_SYSVISIBLE)) {
 800490c:	69b3      	ldr	r3, [r6, #24]
	psem->cnt--;
 800490e:	3a01      	subs	r2, #1
 8004910:	f413 7400 	ands.w	r4, r3, #512	; 0x200
 8004914:	842a      	strh	r2, [r5, #32]
 8004916:	d00f      	beq.n	8004938 <_gwinDrawStart+0x84>
		gdispGSetClip(gh->display, gh->x, gh->y, gh->width, gh->height);
 8004918:	f9b6 4012 	ldrsh.w	r4, [r6, #18]
 800491c:	68b0      	ldr	r0, [r6, #8]
 800491e:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
 8004922:	f9b6 200e 	ldrsh.w	r2, [r6, #14]
 8004926:	f9b6 100c 	ldrsh.w	r1, [r6, #12]
 800492a:	9400      	str	r4, [sp, #0]
 800492c:	f7fe fa9c 	bl	8002e68 <gdispGSetClip>
 8004930:	20ff      	movs	r0, #255	; 0xff
}
 8004932:	b002      	add	sp, #8
 8004934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_gwinDrawEnd(gh);
 8004938:	4630      	mov	r0, r6
 800493a:	f7ff ff55 	bl	80047e8 <_gwinDrawEnd>
		return FALSE;
 800493e:	4620      	mov	r0, r4
}
 8004940:	b002      	add	sp, #8
 8004942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004946:	bf00      	nop
 8004948:	200000b8 	.word	0x200000b8
 800494c:	20000948 	.word	0x20000948

08004950 <gwinDrawPixel>:
	if (!(gh->flags & GWIN_FLG_SYSVISIBLE))
 8004950:	6983      	ldr	r3, [r0, #24]
 8004952:	059b      	lsls	r3, r3, #22
 8004954:	d400      	bmi.n	8004958 <gwinDrawPixel+0x8>
 8004956:	4770      	bx	lr
	}
	if (gh->vmt->AfterClear)
		gh->vmt->AfterClear(gh);
}

void gwinDrawPixel(GHandle gh, coord_t x, coord_t y) {
 8004958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800495c:	b085      	sub	sp, #20
 800495e:	4c4b      	ldr	r4, [pc, #300]	; (8004a8c <gwinDrawPixel+0x13c>)
	Qadd(&readyQ, me = _gfxCurrentThread);
 8004960:	4f4b      	ldr	r7, [pc, #300]	; (8004a90 <gwinDrawPixel+0x140>)
 8004962:	9003      	str	r0, [sp, #12]
 8004964:	4691      	mov	r9, r2
 8004966:	4688      	mov	r8, r1
	t->next = 0;
 8004968:	f04f 0a00 	mov.w	sl, #0
	while (psem->cnt <= 0) {
 800496c:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
 8004970:	2b00      	cmp	r3, #0
 8004972:	dc19      	bgt.n	80049a8 <gwinDrawPixel+0x58>
	if (!q->head)
 8004974:	6820      	ldr	r0, [r4, #0]
 8004976:	b130      	cbz	r0, 8004986 <gwinDrawPixel+0x36>
	q->head = t->next;
 8004978:	6805      	ldr	r5, [r0, #0]
 800497a:	6025      	str	r5, [r4, #0]
 800497c:	f001 ffbc 	bl	80068f8 <free>
	if (!q->head)
 8004980:	4628      	mov	r0, r5
 8004982:	2d00      	cmp	r5, #0
 8004984:	d1f8      	bne.n	8004978 <gwinDrawPixel+0x28>
	if (!readyQ.head)
 8004986:	68a3      	ldr	r3, [r4, #8]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d0ef      	beq.n	800496c <gwinDrawPixel+0x1c>
	Qadd(&readyQ, me = _gfxCurrentThread);
 800498c:	6839      	ldr	r1, [r7, #0]
		q->tail->next = t;
 800498e:	68e2      	ldr	r2, [r4, #12]
	t->next = 0;
 8004990:	f8c1 a000 	str.w	sl, [r1]
		q->tail->next = t;
 8004994:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 8004996:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 8004998:	60e1      	str	r1, [r4, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 800499a:	4608      	mov	r0, r1
 800499c:	4619      	mov	r1, r3
	q->head = t->next;
 800499e:	60a2      	str	r2, [r4, #8]
	_gfxCurrentThread = Qpop(&readyQ);
 80049a0:	603b      	str	r3, [r7, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 80049a2:	f7fb febb 	bl	800071c <_gfxTaskSwitch>
 80049a6:	e7e1      	b.n	800496c <gwinDrawPixel+0x1c>
	if (!(gh->flags & GWIN_FLG_SYSVISIBLE)) {
 80049a8:	9a03      	ldr	r2, [sp, #12]
 80049aa:	6992      	ldr	r2, [r2, #24]
	psem->cnt--;
 80049ac:	3b01      	subs	r3, #1
 80049ae:	8423      	strh	r3, [r4, #32]
 80049b0:	0593      	lsls	r3, r2, #22
 80049b2:	d565      	bpl.n	8004a80 <gwinDrawPixel+0x130>
		gdispGSetClip(gh->display, gh->x, gh->y, gh->width, gh->height);
 80049b4:	9e03      	ldr	r6, [sp, #12]
	Qadd(&readyQ, me = _gfxCurrentThread);
 80049b6:	4f36      	ldr	r7, [pc, #216]	; (8004a90 <gwinDrawPixel+0x140>)
 80049b8:	f9b6 5012 	ldrsh.w	r5, [r6, #18]
 80049bc:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
 80049c0:	f9b6 200e 	ldrsh.w	r2, [r6, #14]
 80049c4:	f9b6 100c 	ldrsh.w	r1, [r6, #12]
 80049c8:	68b0      	ldr	r0, [r6, #8]
 80049ca:	9500      	str	r5, [sp, #0]
 80049cc:	f7fe fa4c 	bl	8002e68 <gdispGSetClip>
	if (!_gwinDrawStart(gh)) return;
	gdispGDrawPixel(gh->display, gh->x+x, gh->y+y, gh->color);
 80049d0:	89b2      	ldrh	r2, [r6, #12]
 80049d2:	89f3      	ldrh	r3, [r6, #14]
 80049d4:	68b5      	ldr	r5, [r6, #8]
 80049d6:	f8b6 b014 	ldrh.w	fp, [r6, #20]
 80049da:	4490      	add	r8, r2
 80049dc:	4499      	add	r9, r3
 80049de:	fa0f f888 	sxth.w	r8, r8
 80049e2:	fa0f f989 	sxth.w	r9, r9
	t->next = 0;
 80049e6:	f04f 0a00 	mov.w	sl, #0
	while (pmutex[0]) {
 80049ea:	6a2b      	ldr	r3, [r5, #32]
 80049ec:	b1db      	cbz	r3, 8004a26 <gwinDrawPixel+0xd6>
	if (!q->head)
 80049ee:	6820      	ldr	r0, [r4, #0]
 80049f0:	b130      	cbz	r0, 8004a00 <gwinDrawPixel+0xb0>
	q->head = t->next;
 80049f2:	6806      	ldr	r6, [r0, #0]
 80049f4:	6026      	str	r6, [r4, #0]
 80049f6:	f001 ff7f 	bl	80068f8 <free>
	if (!q->head)
 80049fa:	4630      	mov	r0, r6
 80049fc:	2e00      	cmp	r6, #0
 80049fe:	d1f8      	bne.n	80049f2 <gwinDrawPixel+0xa2>
	if (!readyQ.head)
 8004a00:	68a3      	ldr	r3, [r4, #8]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d0f1      	beq.n	80049ea <gwinDrawPixel+0x9a>
	Qadd(&readyQ, me = _gfxCurrentThread);
 8004a06:	6839      	ldr	r1, [r7, #0]
		q->tail->next = t;
 8004a08:	68e2      	ldr	r2, [r4, #12]
	t->next = 0;
 8004a0a:	f8c1 a000 	str.w	sl, [r1]
		q->tail->next = t;
 8004a0e:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 8004a10:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 8004a12:	60e1      	str	r1, [r4, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8004a14:	4608      	mov	r0, r1
 8004a16:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 8004a18:	603b      	str	r3, [r7, #0]
	q->head = t->next;
 8004a1a:	60a2      	str	r2, [r4, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8004a1c:	f7fb fe7e 	bl	800071c <_gfxTaskSwitch>
	while (pmutex[0]) {
 8004a20:	6a2b      	ldr	r3, [r5, #32]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1e3      	bne.n	80049ee <gwinDrawPixel+0x9e>
			if (g->p.x < g->clipx0 || g->p.x >= g->clipx1 || g->p.y < g->clipy0 || g->p.y >= g->clipy1)
 8004a26:	f9b5 3024 	ldrsh.w	r3, [r5, #36]	; 0x24
	g->p.x		= x;
 8004a2a:	f8a5 802c 	strh.w	r8, [r5, #44]	; 0x2c
	pmutex[0] = 1;
 8004a2e:	2201      	movs	r2, #1
			if (g->p.x < g->clipx0 || g->p.x >= g->clipx1 || g->p.y < g->clipy0 || g->p.y >= g->clipy1)
 8004a30:	4543      	cmp	r3, r8
	g->p.y		= y;
 8004a32:	f8a5 902e 	strh.w	r9, [r5, #46]	; 0x2e
	g->p.color	= color;
 8004a36:	f8a5 b03c 	strh.w	fp, [r5, #60]	; 0x3c
 8004a3a:	622a      	str	r2, [r5, #32]
			if (g->p.x < g->clipx0 || g->p.x >= g->clipx1 || g->p.y < g->clipy0 || g->p.y >= g->clipy1)
 8004a3c:	dc03      	bgt.n	8004a46 <gwinDrawPixel+0xf6>
 8004a3e:	f9b5 3028 	ldrsh.w	r3, [r5, #40]	; 0x28
 8004a42:	4543      	cmp	r3, r8
 8004a44:	dc07      	bgt.n	8004a56 <gwinDrawPixel+0x106>
	_gwinDrawEnd(gh);
 8004a46:	9803      	ldr	r0, [sp, #12]
	pmutex[0] = 0;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	622b      	str	r3, [r5, #32]
}
 8004a4c:	b005      	add	sp, #20
 8004a4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_gwinDrawEnd(gh);
 8004a52:	f7ff bec9 	b.w	80047e8 <_gwinDrawEnd>
 8004a56:	f9b5 3026 	ldrsh.w	r3, [r5, #38]	; 0x26
 8004a5a:	454b      	cmp	r3, r9
 8004a5c:	dcf3      	bgt.n	8004a46 <gwinDrawPixel+0xf6>
 8004a5e:	f9b5 302a 	ldrsh.w	r3, [r5, #42]	; 0x2a
 8004a62:	454b      	cmp	r3, r9
 8004a64:	ddef      	ble.n	8004a46 <gwinDrawPixel+0xf6>
			g->p.cx = g->p.cy = 1;
 8004a66:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8004a6a:	632b      	str	r3, [r5, #48]	; 0x30
			gdisp_lld_write_start(g);
 8004a6c:	4628      	mov	r0, r5
 8004a6e:	f7fb fe15 	bl	800069c <gdisp_lld_write_start>
			gdisp_lld_write_color(g);
 8004a72:	4628      	mov	r0, r5
 8004a74:	f7fb fcae 	bl	80003d4 <gdisp_lld_write_color>
			gdisp_lld_write_stop(g);
 8004a78:	4628      	mov	r0, r5
 8004a7a:	f7fb fe0d 	bl	8000698 <gdisp_lld_write_stop>
 8004a7e:	e7e2      	b.n	8004a46 <gwinDrawPixel+0xf6>
		_gwinDrawEnd(gh);
 8004a80:	9803      	ldr	r0, [sp, #12]
}
 8004a82:	b005      	add	sp, #20
 8004a84:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_gwinDrawEnd(gh);
 8004a88:	f7ff beae 	b.w	80047e8 <_gwinDrawEnd>
 8004a8c:	200000b8 	.word	0x200000b8
 8004a90:	20000948 	.word	0x20000948

08004a94 <gwinFillArea>:
	if (!_gwinDrawStart(gh)) return;
	gdispGDrawBox(gh->display, gh->x+x, gh->y+y, cx, cy, gh->color);
	_gwinDrawEnd(gh);
}

void gwinFillArea(GHandle gh, coord_t x, coord_t y, coord_t cx, coord_t cy) {
 8004a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!(gh->flags & GWIN_FLG_SYSVISIBLE))
 8004a98:	6984      	ldr	r4, [r0, #24]
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	05a4      	lsls	r4, r4, #22
 8004a9e:	f9bd a038 	ldrsh.w	sl, [sp, #56]	; 0x38
 8004aa2:	d402      	bmi.n	8004aaa <gwinFillArea+0x16>
	if (!_gwinDrawStart(gh)) return;
	gdispGFillArea(gh->display, gh->x+x, gh->y+y, cx, cy, gh->color);
	_gwinDrawEnd(gh);
}
 8004aa4:	b005      	add	sp, #20
 8004aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aaa:	4c28      	ldr	r4, [pc, #160]	; (8004b4c <gwinFillArea+0xb8>)
	Qadd(&readyQ, me = _gfxCurrentThread);
 8004aac:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 8004b50 <gwinFillArea+0xbc>
 8004ab0:	9103      	str	r1, [sp, #12]
 8004ab2:	4698      	mov	r8, r3
 8004ab4:	4617      	mov	r7, r2
 8004ab6:	4605      	mov	r5, r0
	t->next = 0;
 8004ab8:	f04f 0b00 	mov.w	fp, #0
	while (psem->cnt <= 0) {
 8004abc:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	dc1b      	bgt.n	8004afc <gwinFillArea+0x68>
	if (!q->head)
 8004ac4:	6820      	ldr	r0, [r4, #0]
 8004ac6:	b130      	cbz	r0, 8004ad6 <gwinFillArea+0x42>
	q->head = t->next;
 8004ac8:	6806      	ldr	r6, [r0, #0]
 8004aca:	6026      	str	r6, [r4, #0]
 8004acc:	f001 ff14 	bl	80068f8 <free>
	if (!q->head)
 8004ad0:	4630      	mov	r0, r6
 8004ad2:	2e00      	cmp	r6, #0
 8004ad4:	d1f8      	bne.n	8004ac8 <gwinFillArea+0x34>
	if (!readyQ.head)
 8004ad6:	68a3      	ldr	r3, [r4, #8]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d0ef      	beq.n	8004abc <gwinFillArea+0x28>
	Qadd(&readyQ, me = _gfxCurrentThread);
 8004adc:	f8d9 1000 	ldr.w	r1, [r9]
		q->tail->next = t;
 8004ae0:	68e2      	ldr	r2, [r4, #12]
	t->next = 0;
 8004ae2:	f8c1 b000 	str.w	fp, [r1]
		q->tail->next = t;
 8004ae6:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 8004ae8:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 8004aea:	60e1      	str	r1, [r4, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8004aec:	4608      	mov	r0, r1
	q->head = t->next;
 8004aee:	60a2      	str	r2, [r4, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8004af0:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 8004af2:	f8c9 3000 	str.w	r3, [r9]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8004af6:	f7fb fe11 	bl	800071c <_gfxTaskSwitch>
 8004afa:	e7df      	b.n	8004abc <gwinFillArea+0x28>
	if (!(gh->flags & GWIN_FLG_SYSVISIBLE)) {
 8004afc:	69aa      	ldr	r2, [r5, #24]
	psem->cnt--;
 8004afe:	3b01      	subs	r3, #1
 8004b00:	8423      	strh	r3, [r4, #32]
 8004b02:	0593      	lsls	r3, r2, #22
 8004b04:	d51b      	bpl.n	8004b3e <gwinFillArea+0xaa>
		gdispGSetClip(gh->display, gh->x, gh->y, gh->width, gh->height);
 8004b06:	f9b5 4012 	ldrsh.w	r4, [r5, #18]
 8004b0a:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
 8004b0e:	f9b5 200e 	ldrsh.w	r2, [r5, #14]
 8004b12:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
 8004b16:	68a8      	ldr	r0, [r5, #8]
 8004b18:	9400      	str	r4, [sp, #0]
 8004b1a:	f7fe f9a5 	bl	8002e68 <gdispGSetClip>
	gdispGFillArea(gh->display, gh->x+x, gh->y+y, cx, cy, gh->color);
 8004b1e:	89a9      	ldrh	r1, [r5, #12]
 8004b20:	9b03      	ldr	r3, [sp, #12]
 8004b22:	89ea      	ldrh	r2, [r5, #14]
 8004b24:	8aac      	ldrh	r4, [r5, #20]
 8004b26:	68a8      	ldr	r0, [r5, #8]
 8004b28:	f8cd a000 	str.w	sl, [sp]
 8004b2c:	440b      	add	r3, r1
 8004b2e:	4619      	mov	r1, r3
 8004b30:	443a      	add	r2, r7
 8004b32:	4643      	mov	r3, r8
 8004b34:	b212      	sxth	r2, r2
 8004b36:	b209      	sxth	r1, r1
 8004b38:	9401      	str	r4, [sp, #4]
 8004b3a:	f7fd ffcb 	bl	8002ad4 <gdispGFillArea>
	_gwinDrawEnd(gh);
 8004b3e:	4628      	mov	r0, r5
}
 8004b40:	b005      	add	sp, #20
 8004b42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_gwinDrawEnd(gh);
 8004b46:	f7ff be4f 	b.w	80047e8 <_gwinDrawEnd>
 8004b4a:	bf00      	nop
 8004b4c:	200000b8 	.word	0x200000b8
 8004b50:	20000948 	.word	0x20000948

08004b54 <gwinBlitArea>:

void gwinBlitArea(GHandle gh, coord_t x, coord_t y, coord_t cx, coord_t cy, coord_t srcx, coord_t srcy, coord_t srccx, const pixel_t *buffer) {
 8004b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b58:	b08b      	sub	sp, #44	; 0x2c
 8004b5a:	4682      	mov	sl, r0
 8004b5c:	4689      	mov	r9, r1
	if (!(gh->flags & GWIN_FLG_SYSVISIBLE))
 8004b5e:	6981      	ldr	r1, [r0, #24]
 8004b60:	f9bd 0050 	ldrsh.w	r0, [sp, #80]	; 0x50
 8004b64:	9003      	str	r0, [sp, #12]
 8004b66:	f9bd 0054 	ldrsh.w	r0, [sp, #84]	; 0x54
 8004b6a:	9004      	str	r0, [sp, #16]
 8004b6c:	f9bd 0058 	ldrsh.w	r0, [sp, #88]	; 0x58
 8004b70:	9005      	str	r0, [sp, #20]
 8004b72:	f9bd 005c 	ldrsh.w	r0, [sp, #92]	; 0x5c
 8004b76:	9006      	str	r0, [sp, #24]
 8004b78:	0589      	lsls	r1, r1, #22
 8004b7a:	9818      	ldr	r0, [sp, #96]	; 0x60
 8004b7c:	9007      	str	r0, [sp, #28]
 8004b7e:	9302      	str	r3, [sp, #8]
 8004b80:	d402      	bmi.n	8004b88 <gwinBlitArea+0x34>
	if (!_gwinDrawStart(gh)) return;
	gdispGBlitArea(gh->display, gh->x+x, gh->y+y, cx, cy, srcx, srcy, srccx, buffer);
	_gwinDrawEnd(gh);
}
 8004b82:	b00b      	add	sp, #44	; 0x2c
 8004b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b88:	4d7f      	ldr	r5, [pc, #508]	; (8004d88 <gwinBlitArea+0x234>)
	Qadd(&readyQ, me = _gfxCurrentThread);
 8004b8a:	4c80      	ldr	r4, [pc, #512]	; (8004d8c <gwinBlitArea+0x238>)
 8004b8c:	4617      	mov	r7, r2
	t->next = 0;
 8004b8e:	f04f 0800 	mov.w	r8, #0
	while (psem->cnt <= 0) {
 8004b92:	f9b5 3020 	ldrsh.w	r3, [r5, #32]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	dc19      	bgt.n	8004bce <gwinBlitArea+0x7a>
	if (!q->head)
 8004b9a:	6828      	ldr	r0, [r5, #0]
 8004b9c:	b130      	cbz	r0, 8004bac <gwinBlitArea+0x58>
	q->head = t->next;
 8004b9e:	6806      	ldr	r6, [r0, #0]
 8004ba0:	602e      	str	r6, [r5, #0]
 8004ba2:	f001 fea9 	bl	80068f8 <free>
	if (!q->head)
 8004ba6:	4630      	mov	r0, r6
 8004ba8:	2e00      	cmp	r6, #0
 8004baa:	d1f8      	bne.n	8004b9e <gwinBlitArea+0x4a>
	if (!readyQ.head)
 8004bac:	68aa      	ldr	r2, [r5, #8]
 8004bae:	2a00      	cmp	r2, #0
 8004bb0:	d0ef      	beq.n	8004b92 <gwinBlitArea+0x3e>
	Qadd(&readyQ, me = _gfxCurrentThread);
 8004bb2:	6821      	ldr	r1, [r4, #0]
		q->tail->next = t;
 8004bb4:	68eb      	ldr	r3, [r5, #12]
	t->next = 0;
 8004bb6:	f8c1 8000 	str.w	r8, [r1]
		q->tail->next = t;
 8004bba:	6019      	str	r1, [r3, #0]
	q->head = t->next;
 8004bbc:	6813      	ldr	r3, [r2, #0]
		q->tail = t;
 8004bbe:	60e9      	str	r1, [r5, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8004bc0:	4608      	mov	r0, r1
	q->head = t->next;
 8004bc2:	60ab      	str	r3, [r5, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8004bc4:	4611      	mov	r1, r2
	_gfxCurrentThread = Qpop(&readyQ);
 8004bc6:	6022      	str	r2, [r4, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8004bc8:	f7fb fda8 	bl	800071c <_gfxTaskSwitch>
 8004bcc:	e7e1      	b.n	8004b92 <gwinBlitArea+0x3e>
	if (!(gh->flags & GWIN_FLG_SYSVISIBLE)) {
 8004bce:	f8da 2018 	ldr.w	r2, [sl, #24]
	psem->cnt--;
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	842b      	strh	r3, [r5, #32]
 8004bd6:	0593      	lsls	r3, r2, #22
 8004bd8:	f140 80d0 	bpl.w	8004d7c <gwinBlitArea+0x228>
		gdispGSetClip(gh->display, gh->x, gh->y, gh->width, gh->height);
 8004bdc:	f9ba 4012 	ldrsh.w	r4, [sl, #18]
 8004be0:	f9ba 3010 	ldrsh.w	r3, [sl, #16]
 8004be4:	f9ba 200e 	ldrsh.w	r2, [sl, #14]
 8004be8:	f9ba 100c 	ldrsh.w	r1, [sl, #12]
 8004bec:	f8da 0008 	ldr.w	r0, [sl, #8]
 8004bf0:	9400      	str	r4, [sp, #0]
 8004bf2:	f7fe f939 	bl	8002e68 <gdispGSetClip>
	gdispGBlitArea(gh->display, gh->x+x, gh->y+y, cx, cy, srcx, srcy, srccx, buffer);
 8004bf6:	f8ba 200c 	ldrh.w	r2, [sl, #12]
 8004bfa:	f8ba 300e 	ldrh.w	r3, [sl, #14]
 8004bfe:	f8da 4008 	ldr.w	r4, [sl, #8]
	Qadd(&readyQ, me = _gfxCurrentThread);
 8004c02:	f8df 8188 	ldr.w	r8, [pc, #392]	; 8004d8c <gwinBlitArea+0x238>
 8004c06:	4491      	add	r9, r2
 8004c08:	441f      	add	r7, r3
 8004c0a:	b2ba      	uxth	r2, r7
 8004c0c:	fa1f f389 	uxth.w	r3, r9
 8004c10:	9308      	str	r3, [sp, #32]
 8004c12:	9209      	str	r2, [sp, #36]	; 0x24
 8004c14:	fa0f f983 	sxth.w	r9, r3
 8004c18:	b217      	sxth	r7, r2
	t->next = 0;
 8004c1a:	f04f 0b00 	mov.w	fp, #0
	while (pmutex[0]) {
 8004c1e:	6a23      	ldr	r3, [r4, #32]
 8004c20:	b1eb      	cbz	r3, 8004c5e <gwinBlitArea+0x10a>
	if (!q->head)
 8004c22:	6828      	ldr	r0, [r5, #0]
 8004c24:	b130      	cbz	r0, 8004c34 <gwinBlitArea+0xe0>
	q->head = t->next;
 8004c26:	6806      	ldr	r6, [r0, #0]
 8004c28:	602e      	str	r6, [r5, #0]
 8004c2a:	f001 fe65 	bl	80068f8 <free>
	if (!q->head)
 8004c2e:	4630      	mov	r0, r6
 8004c30:	2e00      	cmp	r6, #0
 8004c32:	d1f8      	bne.n	8004c26 <gwinBlitArea+0xd2>
	if (!readyQ.head)
 8004c34:	68ab      	ldr	r3, [r5, #8]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d0f1      	beq.n	8004c1e <gwinBlitArea+0xca>
	Qadd(&readyQ, me = _gfxCurrentThread);
 8004c3a:	f8d8 1000 	ldr.w	r1, [r8]
		q->tail->next = t;
 8004c3e:	68ea      	ldr	r2, [r5, #12]
	t->next = 0;
 8004c40:	f8c1 b000 	str.w	fp, [r1]
		q->tail->next = t;
 8004c44:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 8004c46:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 8004c48:	60e9      	str	r1, [r5, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8004c4a:	4608      	mov	r0, r1
	q->head = t->next;
 8004c4c:	60aa      	str	r2, [r5, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8004c4e:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 8004c50:	f8c8 3000 	str.w	r3, [r8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8004c54:	f7fb fd62 	bl	800071c <_gfxTaskSwitch>
	while (pmutex[0]) {
 8004c58:	6a23      	ldr	r3, [r4, #32]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1e1      	bne.n	8004c22 <gwinBlitArea+0xce>
			if (x < g->clipx0) { cx -= g->clipx0 - x; srcx += g->clipx0 - x; x = g->clipx0; }
 8004c5e:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
	pmutex[0] = 1;
 8004c62:	2201      	movs	r2, #1
 8004c64:	4599      	cmp	r9, r3
 8004c66:	6222      	str	r2, [r4, #32]
 8004c68:	da0d      	bge.n	8004c86 <gwinBlitArea+0x132>
 8004c6a:	9a02      	ldr	r2, [sp, #8]
 8004c6c:	9808      	ldr	r0, [sp, #32]
 8004c6e:	4616      	mov	r6, r2
 8004c70:	9a04      	ldr	r2, [sp, #16]
 8004c72:	b299      	uxth	r1, r3
 8004c74:	440a      	add	r2, r1
 8004c76:	4406      	add	r6, r0
 8004c78:	1a12      	subs	r2, r2, r0
 8004c7a:	b212      	sxth	r2, r2
 8004c7c:	1a76      	subs	r6, r6, r1
 8004c7e:	9204      	str	r2, [sp, #16]
 8004c80:	b232      	sxth	r2, r6
 8004c82:	9202      	str	r2, [sp, #8]
 8004c84:	4699      	mov	r9, r3
			if (y < g->clipy0) { cy -= g->clipy0 - y; srcy += g->clipy0 - x; y = g->clipy0; }
 8004c86:	f9b4 2026 	ldrsh.w	r2, [r4, #38]	; 0x26
 8004c8a:	4297      	cmp	r7, r2
 8004c8c:	da0d      	bge.n	8004caa <gwinBlitArea+0x156>
 8004c8e:	9903      	ldr	r1, [sp, #12]
 8004c90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c92:	440b      	add	r3, r1
 8004c94:	9905      	ldr	r1, [sp, #20]
 8004c96:	b290      	uxth	r0, r2
 8004c98:	4401      	add	r1, r0
 8004c9a:	eba1 0109 	sub.w	r1, r1, r9
 8004c9e:	1a1b      	subs	r3, r3, r0
 8004ca0:	b209      	sxth	r1, r1
 8004ca2:	b21b      	sxth	r3, r3
 8004ca4:	9105      	str	r1, [sp, #20]
 8004ca6:	9303      	str	r3, [sp, #12]
 8004ca8:	4617      	mov	r7, r2
			if (x+cx > g->clipx1)	cx = g->clipx1 - x;
 8004caa:	9a02      	ldr	r2, [sp, #8]
 8004cac:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 8004cb0:	444a      	add	r2, r9
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	dd03      	ble.n	8004cbe <gwinBlitArea+0x16a>
 8004cb6:	eba3 0309 	sub.w	r3, r3, r9
 8004cba:	b21b      	sxth	r3, r3
 8004cbc:	9302      	str	r3, [sp, #8]
			if (y+cy > g->clipy1)	cy = g->clipy1 - y;
 8004cbe:	9a03      	ldr	r2, [sp, #12]
 8004cc0:	f9b4 302a 	ldrsh.w	r3, [r4, #42]	; 0x2a
 8004cc4:	18ba      	adds	r2, r7, r2
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	dd02      	ble.n	8004cd0 <gwinBlitArea+0x17c>
 8004cca:	1bdb      	subs	r3, r3, r7
 8004ccc:	b21b      	sxth	r3, r3
 8004cce:	9303      	str	r3, [sp, #12]
			if (srcx+cx > srccx) cx = srccx - srcx;
 8004cd0:	9a04      	ldr	r2, [sp, #16]
 8004cd2:	9902      	ldr	r1, [sp, #8]
 8004cd4:	9806      	ldr	r0, [sp, #24]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	440b      	add	r3, r1
 8004cda:	4283      	cmp	r3, r0
 8004cdc:	dd02      	ble.n	8004ce4 <gwinBlitArea+0x190>
 8004cde:	1a86      	subs	r6, r0, r2
 8004ce0:	b233      	sxth	r3, r6
 8004ce2:	9302      	str	r3, [sp, #8]
			if (cx <= 0 || cy <= 0) { MUTEX_EXIT(g); return; }
 8004ce4:	9b02      	ldr	r3, [sp, #8]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	dd46      	ble.n	8004d78 <gwinBlitArea+0x224>
 8004cea:	9b03      	ldr	r3, [sp, #12]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	dd43      	ble.n	8004d78 <gwinBlitArea+0x224>
			g->p.x = x;
 8004cf0:	9802      	ldr	r0, [sp, #8]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	461d      	mov	r5, r3
 8004cf6:	f360 020f 	bfi	r2, r0, #0, #16
			srcx = x + cx;
 8004cfa:	b283      	uxth	r3, r0
			buffer += srcy*srccx+srcx;
 8004cfc:	9805      	ldr	r0, [sp, #20]
			g->p.x = x;
 8004cfe:	2100      	movs	r1, #0
 8004d00:	f365 421f 	bfi	r2, r5, #16, #16
			buffer += srcy*srccx+srcx;
 8004d04:	4686      	mov	lr, r0
			srcy = y + cy;
 8004d06:	197e      	adds	r6, r7, r5
			buffer += srcy*srccx+srcx;
 8004d08:	9804      	ldr	r0, [sp, #16]
 8004d0a:	9d06      	ldr	r5, [sp, #24]
			g->p.x = x;
 8004d0c:	6322      	str	r2, [r4, #48]	; 0x30
 8004d0e:	f369 010f 	bfi	r1, r9, #0, #16
 8004d12:	f367 411f 	bfi	r1, r7, #16, #16
			buffer += srcy*srccx+srcx;
 8004d16:	9a07      	ldr	r2, [sp, #28]
			g->p.x = x;
 8004d18:	62e1      	str	r1, [r4, #44]	; 0x2c
			buffer += srcy*srccx+srcx;
 8004d1a:	fb05 0b0e 	mla	fp, r5, lr, r0
			srccx -= cx;
 8004d1e:	eba5 0803 	sub.w	r8, r5, r3
			srcy = y + cy;
 8004d22:	b236      	sxth	r6, r6
			srcx = x + cx;
 8004d24:	444b      	add	r3, r9
			gdisp_lld_write_start(g);
 8004d26:	4620      	mov	r0, r4
			buffer += srcy*srccx+srcx;
 8004d28:	eb02 0b4b 	add.w	fp, r2, fp, lsl #1
			srccx -= cx;
 8004d2c:	fa0f f888 	sxth.w	r8, r8
			srcx = x + cx;
 8004d30:	b21d      	sxth	r5, r3
			gdisp_lld_write_start(g);
 8004d32:	f7fb fcb3 	bl	800069c <gdisp_lld_write_start>
			for(g->p.y = y; g->p.y < srcy; g->p.y++, buffer += srccx) {
 8004d36:	42b7      	cmp	r7, r6
 8004d38:	85e7      	strh	r7, [r4, #46]	; 0x2e
 8004d3a:	bfb8      	it	lt
 8004d3c:	ea4f 0848 	movlt.w	r8, r8, lsl #1
 8004d40:	da17      	bge.n	8004d72 <gwinBlitArea+0x21e>
				for(g->p.x = x; g->p.x < srcx; g->p.x++) {
 8004d42:	45a9      	cmp	r9, r5
 8004d44:	f8a4 902c 	strh.w	r9, [r4, #44]	; 0x2c
 8004d48:	da0d      	bge.n	8004d66 <gwinBlitArea+0x212>
					g->p.color = *buffer++;
 8004d4a:	f83b 3b02 	ldrh.w	r3, [fp], #2
 8004d4e:	87a3      	strh	r3, [r4, #60]	; 0x3c
					gdisp_lld_write_color(g);
 8004d50:	4620      	mov	r0, r4
 8004d52:	f7fb fb3f 	bl	80003d4 <gdisp_lld_write_color>
				for(g->p.x = x; g->p.x < srcx; g->p.x++) {
 8004d56:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8004d58:	3301      	adds	r3, #1
 8004d5a:	b21b      	sxth	r3, r3
 8004d5c:	429d      	cmp	r5, r3
 8004d5e:	85a3      	strh	r3, [r4, #44]	; 0x2c
 8004d60:	dcf3      	bgt.n	8004d4a <gwinBlitArea+0x1f6>
 8004d62:	f9b4 702e 	ldrsh.w	r7, [r4, #46]	; 0x2e
			for(g->p.y = y; g->p.y < srcy; g->p.y++, buffer += srccx) {
 8004d66:	3701      	adds	r7, #1
 8004d68:	b23f      	sxth	r7, r7
 8004d6a:	42be      	cmp	r6, r7
 8004d6c:	85e7      	strh	r7, [r4, #46]	; 0x2e
 8004d6e:	44c3      	add	fp, r8
 8004d70:	dce7      	bgt.n	8004d42 <gwinBlitArea+0x1ee>
			gdisp_lld_write_stop(g);
 8004d72:	4620      	mov	r0, r4
 8004d74:	f7fb fc90 	bl	8000698 <gdisp_lld_write_stop>
	pmutex[0] = 0;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	6223      	str	r3, [r4, #32]
		_gwinDrawEnd(gh);
 8004d7c:	4650      	mov	r0, sl
}
 8004d7e:	b00b      	add	sp, #44	; 0x2c
 8004d80:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d84:	f7ff bd30 	b.w	80047e8 <_gwinDrawEnd>
 8004d88:	200000b8 	.word	0x200000b8
 8004d8c:	20000948 	.word	0x20000948

08004d90 <gwinDrawBox>:
void gwinDrawBox(GHandle gh, coord_t x, coord_t y, coord_t cx, coord_t cy) {
 8004d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!(gh->flags & GWIN_FLG_SYSVISIBLE))
 8004d94:	6984      	ldr	r4, [r0, #24]
 8004d96:	b085      	sub	sp, #20
 8004d98:	05a4      	lsls	r4, r4, #22
 8004d9a:	f9bd 9038 	ldrsh.w	r9, [sp, #56]	; 0x38
 8004d9e:	d402      	bmi.n	8004da6 <gwinDrawBox+0x16>
}
 8004da0:	b005      	add	sp, #20
 8004da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004da6:	4c2a      	ldr	r4, [pc, #168]	; (8004e50 <gwinDrawBox+0xc0>)
	Qadd(&readyQ, me = _gfxCurrentThread);
 8004da8:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8004e54 <gwinDrawBox+0xc4>
 8004dac:	9103      	str	r1, [sp, #12]
 8004dae:	461e      	mov	r6, r3
 8004db0:	4690      	mov	r8, r2
 8004db2:	4605      	mov	r5, r0
	t->next = 0;
 8004db4:	f04f 0b00 	mov.w	fp, #0
	while (psem->cnt <= 0) {
 8004db8:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	dc1b      	bgt.n	8004df8 <gwinDrawBox+0x68>
	if (!q->head)
 8004dc0:	6820      	ldr	r0, [r4, #0]
 8004dc2:	b130      	cbz	r0, 8004dd2 <gwinDrawBox+0x42>
	q->head = t->next;
 8004dc4:	6807      	ldr	r7, [r0, #0]
 8004dc6:	6027      	str	r7, [r4, #0]
 8004dc8:	f001 fd96 	bl	80068f8 <free>
	if (!q->head)
 8004dcc:	4638      	mov	r0, r7
 8004dce:	2f00      	cmp	r7, #0
 8004dd0:	d1f8      	bne.n	8004dc4 <gwinDrawBox+0x34>
	if (!readyQ.head)
 8004dd2:	68a3      	ldr	r3, [r4, #8]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d0ef      	beq.n	8004db8 <gwinDrawBox+0x28>
	Qadd(&readyQ, me = _gfxCurrentThread);
 8004dd8:	f8da 1000 	ldr.w	r1, [sl]
		q->tail->next = t;
 8004ddc:	68e2      	ldr	r2, [r4, #12]
	t->next = 0;
 8004dde:	f8c1 b000 	str.w	fp, [r1]
		q->tail->next = t;
 8004de2:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 8004de4:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 8004de6:	60e1      	str	r1, [r4, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8004de8:	4608      	mov	r0, r1
	q->head = t->next;
 8004dea:	60a2      	str	r2, [r4, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8004dec:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 8004dee:	f8ca 3000 	str.w	r3, [sl]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8004df2:	f7fb fc93 	bl	800071c <_gfxTaskSwitch>
 8004df6:	e7df      	b.n	8004db8 <gwinDrawBox+0x28>
	if (!(gh->flags & GWIN_FLG_SYSVISIBLE)) {
 8004df8:	69aa      	ldr	r2, [r5, #24]
	psem->cnt--;
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	8423      	strh	r3, [r4, #32]
 8004dfe:	0593      	lsls	r3, r2, #22
 8004e00:	d520      	bpl.n	8004e44 <gwinDrawBox+0xb4>
		gdispGSetClip(gh->display, gh->x, gh->y, gh->width, gh->height);
 8004e02:	f9b5 4012 	ldrsh.w	r4, [r5, #18]
 8004e06:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
 8004e0a:	f9b5 200e 	ldrsh.w	r2, [r5, #14]
 8004e0e:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
 8004e12:	68a8      	ldr	r0, [r5, #8]
 8004e14:	9400      	str	r4, [sp, #0]
 8004e16:	f7fe f827 	bl	8002e68 <gdispGSetClip>
	if (cx <= 0 || cy <= 0) return;
 8004e1a:	2e00      	cmp	r6, #0
 8004e1c:	dd12      	ble.n	8004e44 <gwinDrawBox+0xb4>
 8004e1e:	f1b9 0f00 	cmp.w	r9, #0
 8004e22:	dd0f      	ble.n	8004e44 <gwinDrawBox+0xb4>
	gdispGDrawBox(gh->display, gh->x+x, gh->y+y, cx, cy, gh->color);
 8004e24:	89a9      	ldrh	r1, [r5, #12]
 8004e26:	9b03      	ldr	r3, [sp, #12]
 8004e28:	89ea      	ldrh	r2, [r5, #14]
 8004e2a:	68a8      	ldr	r0, [r5, #8]
 8004e2c:	f8cd 9000 	str.w	r9, [sp]
 8004e30:	440b      	add	r3, r1
 8004e32:	4619      	mov	r1, r3
 8004e34:	4442      	add	r2, r8
 8004e36:	8aab      	ldrh	r3, [r5, #20]
 8004e38:	9301      	str	r3, [sp, #4]
 8004e3a:	b212      	sxth	r2, r2
 8004e3c:	4633      	mov	r3, r6
 8004e3e:	b209      	sxth	r1, r1
 8004e40:	f7fb febc 	bl	8000bbc <gdispGDrawBox.part.6>
		_gwinDrawEnd(gh);
 8004e44:	4628      	mov	r0, r5
}
 8004e46:	b005      	add	sp, #20
 8004e48:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e4c:	f7ff bccc 	b.w	80047e8 <_gwinDrawEnd>
 8004e50:	200000b8 	.word	0x200000b8
 8004e54:	20000948 	.word	0x20000948

08004e58 <gwinClear>:
void gwinClear(GHandle gh) {
 8004e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!(gh->flags & GWIN_FLG_SYSVISIBLE))
 8004e5c:	6983      	ldr	r3, [r0, #24]
 8004e5e:	059a      	lsls	r2, r3, #22
 8004e60:	b082      	sub	sp, #8
 8004e62:	4606      	mov	r6, r0
 8004e64:	d408      	bmi.n	8004e78 <gwinClear+0x20>
	if (gh->vmt->AfterClear)
 8004e66:	6873      	ldr	r3, [r6, #4]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d04c      	beq.n	8004f08 <gwinClear+0xb0>
		gh->vmt->AfterClear(gh);
 8004e6e:	4630      	mov	r0, r6
}
 8004e70:	b002      	add	sp, #8
 8004e72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		gh->vmt->AfterClear(gh);
 8004e76:	4718      	bx	r3
 8004e78:	4d25      	ldr	r5, [pc, #148]	; (8004f10 <gwinClear+0xb8>)
	Qadd(&readyQ, me = _gfxCurrentThread);
 8004e7a:	4f26      	ldr	r7, [pc, #152]	; (8004f14 <gwinClear+0xbc>)
	t->next = 0;
 8004e7c:	f04f 0800 	mov.w	r8, #0
	while (psem->cnt <= 0) {
 8004e80:	f9b5 3020 	ldrsh.w	r3, [r5, #32]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	dc19      	bgt.n	8004ebc <gwinClear+0x64>
	if (!q->head)
 8004e88:	6828      	ldr	r0, [r5, #0]
 8004e8a:	b130      	cbz	r0, 8004e9a <gwinClear+0x42>
	q->head = t->next;
 8004e8c:	6804      	ldr	r4, [r0, #0]
 8004e8e:	602c      	str	r4, [r5, #0]
 8004e90:	f001 fd32 	bl	80068f8 <free>
	if (!q->head)
 8004e94:	4620      	mov	r0, r4
 8004e96:	2c00      	cmp	r4, #0
 8004e98:	d1f8      	bne.n	8004e8c <gwinClear+0x34>
	if (!readyQ.head)
 8004e9a:	68ab      	ldr	r3, [r5, #8]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d0ef      	beq.n	8004e80 <gwinClear+0x28>
	Qadd(&readyQ, me = _gfxCurrentThread);
 8004ea0:	6839      	ldr	r1, [r7, #0]
		q->tail->next = t;
 8004ea2:	68ea      	ldr	r2, [r5, #12]
	t->next = 0;
 8004ea4:	f8c1 8000 	str.w	r8, [r1]
		q->tail->next = t;
 8004ea8:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 8004eaa:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 8004eac:	60e9      	str	r1, [r5, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8004eae:	4608      	mov	r0, r1
	q->head = t->next;
 8004eb0:	60aa      	str	r2, [r5, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8004eb2:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 8004eb4:	603b      	str	r3, [r7, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8004eb6:	f7fb fc31 	bl	800071c <_gfxTaskSwitch>
 8004eba:	e7e1      	b.n	8004e80 <gwinClear+0x28>
	if (!(gh->flags & GWIN_FLG_SYSVISIBLE)) {
 8004ebc:	69b2      	ldr	r2, [r6, #24]
	psem->cnt--;
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	842b      	strh	r3, [r5, #32]
 8004ec2:	0593      	lsls	r3, r2, #22
 8004ec4:	d519      	bpl.n	8004efa <gwinClear+0xa2>
		gdispGSetClip(gh->display, gh->x, gh->y, gh->width, gh->height);
 8004ec6:	f9b6 4012 	ldrsh.w	r4, [r6, #18]
 8004eca:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
 8004ece:	f9b6 200e 	ldrsh.w	r2, [r6, #14]
 8004ed2:	f9b6 100c 	ldrsh.w	r1, [r6, #12]
 8004ed6:	68b0      	ldr	r0, [r6, #8]
 8004ed8:	9400      	str	r4, [sp, #0]
 8004eda:	f7fd ffc5 	bl	8002e68 <gdispGSetClip>
		gdispGFillArea(gh->display, gh->x, gh->y, gh->width, gh->height, gh->bgcolor);
 8004ede:	8af5      	ldrh	r5, [r6, #22]
 8004ee0:	f9b6 4012 	ldrsh.w	r4, [r6, #18]
 8004ee4:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
 8004ee8:	f9b6 200e 	ldrsh.w	r2, [r6, #14]
 8004eec:	f9b6 100c 	ldrsh.w	r1, [r6, #12]
 8004ef0:	68b0      	ldr	r0, [r6, #8]
 8004ef2:	e88d 0030 	stmia.w	sp, {r4, r5}
 8004ef6:	f7fd fded 	bl	8002ad4 <gdispGFillArea>
		_gwinDrawEnd(gh);
 8004efa:	4630      	mov	r0, r6
 8004efc:	f7ff fc74 	bl	80047e8 <_gwinDrawEnd>
	if (gh->vmt->AfterClear)
 8004f00:	6873      	ldr	r3, [r6, #4]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d1b2      	bne.n	8004e6e <gwinClear+0x16>
}
 8004f08:	b002      	add	sp, #8
 8004f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f0e:	bf00      	nop
 8004f10:	200000b8 	.word	0x200000b8
 8004f14:	20000948 	.word	0x20000948

08004f18 <gwinDrawLine>:
void gwinDrawLine(GHandle gh, coord_t x0, coord_t y0, coord_t x1, coord_t y1) {
 8004f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!(gh->flags & GWIN_FLG_SYSVISIBLE))
 8004f1c:	6984      	ldr	r4, [r0, #24]
 8004f1e:	b087      	sub	sp, #28
 8004f20:	05a4      	lsls	r4, r4, #22
 8004f22:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
 8004f26:	d402      	bmi.n	8004f2e <gwinDrawLine+0x16>
}
 8004f28:	b007      	add	sp, #28
 8004f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f2e:	4c41      	ldr	r4, [pc, #260]	; (8005034 <gwinDrawLine+0x11c>)
	Qadd(&readyQ, me = _gfxCurrentThread);
 8004f30:	4d41      	ldr	r5, [pc, #260]	; (8005038 <gwinDrawLine+0x120>)
 8004f32:	9002      	str	r0, [sp, #8]
 8004f34:	469a      	mov	sl, r3
 8004f36:	4693      	mov	fp, r2
 8004f38:	4688      	mov	r8, r1
	t->next = 0;
 8004f3a:	2600      	movs	r6, #0
	while (psem->cnt <= 0) {
 8004f3c:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	dc18      	bgt.n	8004f76 <gwinDrawLine+0x5e>
	if (!q->head)
 8004f44:	6820      	ldr	r0, [r4, #0]
 8004f46:	b130      	cbz	r0, 8004f56 <gwinDrawLine+0x3e>
	q->head = t->next;
 8004f48:	6807      	ldr	r7, [r0, #0]
 8004f4a:	6027      	str	r7, [r4, #0]
 8004f4c:	f001 fcd4 	bl	80068f8 <free>
	if (!q->head)
 8004f50:	4638      	mov	r0, r7
 8004f52:	2f00      	cmp	r7, #0
 8004f54:	d1f8      	bne.n	8004f48 <gwinDrawLine+0x30>
	if (!readyQ.head)
 8004f56:	68a3      	ldr	r3, [r4, #8]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d0ef      	beq.n	8004f3c <gwinDrawLine+0x24>
	Qadd(&readyQ, me = _gfxCurrentThread);
 8004f5c:	6829      	ldr	r1, [r5, #0]
		q->tail->next = t;
 8004f5e:	68e2      	ldr	r2, [r4, #12]
	t->next = 0;
 8004f60:	600e      	str	r6, [r1, #0]
		q->tail->next = t;
 8004f62:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 8004f64:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 8004f66:	60e1      	str	r1, [r4, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8004f68:	4608      	mov	r0, r1
	q->head = t->next;
 8004f6a:	60a2      	str	r2, [r4, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8004f6c:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 8004f6e:	602b      	str	r3, [r5, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8004f70:	f7fb fbd4 	bl	800071c <_gfxTaskSwitch>
 8004f74:	e7e2      	b.n	8004f3c <gwinDrawLine+0x24>
	if (!(gh->flags & GWIN_FLG_SYSVISIBLE)) {
 8004f76:	9a02      	ldr	r2, [sp, #8]
 8004f78:	6992      	ldr	r2, [r2, #24]
	psem->cnt--;
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	8423      	strh	r3, [r4, #32]
 8004f7e:	0593      	lsls	r3, r2, #22
 8004f80:	d552      	bpl.n	8005028 <gwinDrawLine+0x110>
		gdispGSetClip(gh->display, gh->x, gh->y, gh->width, gh->height);
 8004f82:	9e02      	ldr	r6, [sp, #8]
 8004f84:	f9b6 5012 	ldrsh.w	r5, [r6, #18]
 8004f88:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
 8004f8c:	f9b6 200e 	ldrsh.w	r2, [r6, #14]
 8004f90:	f9b6 100c 	ldrsh.w	r1, [r6, #12]
 8004f94:	68b0      	ldr	r0, [r6, #8]
 8004f96:	9500      	str	r5, [sp, #0]
 8004f98:	f7fd ff66 	bl	8002e68 <gdispGSetClip>
	gdispGDrawLine(gh->display, gh->x+x0, gh->y+y0, gh->x+x1, gh->y+y1, gh->color);
 8004f9c:	89f3      	ldrh	r3, [r6, #14]
 8004f9e:	89b2      	ldrh	r2, [r6, #12]
 8004fa0:	8ab1      	ldrh	r1, [r6, #20]
 8004fa2:	68b5      	ldr	r5, [r6, #8]
	Qadd(&readyQ, me = _gfxCurrentThread);
 8004fa4:	4e24      	ldr	r6, [pc, #144]	; (8005038 <gwinDrawLine+0x120>)
 8004fa6:	9104      	str	r1, [sp, #16]
 8004fa8:	449b      	add	fp, r3
 8004faa:	444b      	add	r3, r9
 8004fac:	4490      	add	r8, r2
 8004fae:	4492      	add	sl, r2
 8004fb0:	b21b      	sxth	r3, r3
 8004fb2:	fa0f f988 	sxth.w	r9, r8
 8004fb6:	fa0f fa8a 	sxth.w	sl, sl
 8004fba:	fa0f fb8b 	sxth.w	fp, fp
 8004fbe:	9303      	str	r3, [sp, #12]
	t->next = 0;
 8004fc0:	f04f 0800 	mov.w	r8, #0
	while (pmutex[0]) {
 8004fc4:	6a2b      	ldr	r3, [r5, #32]
 8004fc6:	b1db      	cbz	r3, 8005000 <gwinDrawLine+0xe8>
	if (!q->head)
 8004fc8:	6820      	ldr	r0, [r4, #0]
 8004fca:	b130      	cbz	r0, 8004fda <gwinDrawLine+0xc2>
	q->head = t->next;
 8004fcc:	6807      	ldr	r7, [r0, #0]
 8004fce:	6027      	str	r7, [r4, #0]
 8004fd0:	f001 fc92 	bl	80068f8 <free>
	if (!q->head)
 8004fd4:	4638      	mov	r0, r7
 8004fd6:	2f00      	cmp	r7, #0
 8004fd8:	d1f8      	bne.n	8004fcc <gwinDrawLine+0xb4>
	if (!readyQ.head)
 8004fda:	68a3      	ldr	r3, [r4, #8]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d0f1      	beq.n	8004fc4 <gwinDrawLine+0xac>
	Qadd(&readyQ, me = _gfxCurrentThread);
 8004fe0:	6831      	ldr	r1, [r6, #0]
		q->tail->next = t;
 8004fe2:	68e2      	ldr	r2, [r4, #12]
	t->next = 0;
 8004fe4:	f8c1 8000 	str.w	r8, [r1]
		q->tail->next = t;
 8004fe8:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 8004fea:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 8004fec:	60e1      	str	r1, [r4, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8004fee:	4608      	mov	r0, r1
	q->head = t->next;
 8004ff0:	60a2      	str	r2, [r4, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8004ff2:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 8004ff4:	6033      	str	r3, [r6, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8004ff6:	f7fb fb91 	bl	800071c <_gfxTaskSwitch>
	while (pmutex[0]) {
 8004ffa:	6a2b      	ldr	r3, [r5, #32]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1e3      	bne.n	8004fc8 <gwinDrawLine+0xb0>
 8005000:	9305      	str	r3, [sp, #20]
	g->p.y1 = y1;
 8005002:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8005006:	86eb      	strh	r3, [r5, #54]	; 0x36
	pmutex[0] = 1;
 8005008:	2201      	movs	r2, #1
	g->p.color = color;
 800500a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800500e:	87ab      	strh	r3, [r5, #60]	; 0x3c
	g->p.x = x0;
 8005010:	f8a5 902c 	strh.w	r9, [r5, #44]	; 0x2c
	g->p.y = y0;
 8005014:	f8a5 b02e 	strh.w	fp, [r5, #46]	; 0x2e
	g->p.x1 = x1;
 8005018:	f8a5 a034 	strh.w	sl, [r5, #52]	; 0x34
 800501c:	622a      	str	r2, [r5, #32]
	line_clip(g);
 800501e:	4628      	mov	r0, r5
 8005020:	f7fb fb8e 	bl	8000740 <line_clip>
	pmutex[0] = 0;
 8005024:	9b05      	ldr	r3, [sp, #20]
 8005026:	622b      	str	r3, [r5, #32]
	_gwinDrawEnd(gh);
 8005028:	9802      	ldr	r0, [sp, #8]
}
 800502a:	b007      	add	sp, #28
 800502c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_gwinDrawEnd(gh);
 8005030:	f7ff bbda 	b.w	80047e8 <_gwinDrawEnd>
 8005034:	200000b8 	.word	0x200000b8
 8005038:	20000948 	.word	0x20000948

0800503c <_gwinWMAdd>:
bool_t _gwinWMAdd(GHandle gh, const GWindowInit *pInit) {
 800503c:	b508      	push	{r3, lr}
	if (!_GWINwm->vmt->Add(gh, pInit))
 800503e:	4b05      	ldr	r3, [pc, #20]	; (8005054 <_gwinWMAdd+0x18>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	4798      	blx	r3
}
 8005048:	2800      	cmp	r0, #0
 800504a:	bf14      	ite	ne
 800504c:	20ff      	movne	r0, #255	; 0xff
 800504e:	2000      	moveq	r0, #0
 8005050:	bd08      	pop	{r3, pc}
 8005052:	bf00      	nop
 8005054:	20000944 	.word	0x20000944

08005058 <gwinSetWindowManager>:
void gwinSetWindowManager(struct GWindowManager *gwm) {
 8005058:	b570      	push	{r4, r5, r6, lr}
	if (_GWINwm != gwm) {
 800505a:	4d09      	ldr	r5, [pc, #36]	; (8005080 <gwinSetWindowManager+0x28>)
		gwm = (GWindowManager *)&GNullWindowManager;
 800505c:	4c09      	ldr	r4, [pc, #36]	; (8005084 <gwinSetWindowManager+0x2c>)
	if (_GWINwm != gwm) {
 800505e:	682b      	ldr	r3, [r5, #0]
		gwm = (GWindowManager *)&GNullWindowManager;
 8005060:	2800      	cmp	r0, #0
 8005062:	bf18      	it	ne
 8005064:	4604      	movne	r4, r0
	if (_GWINwm != gwm) {
 8005066:	429c      	cmp	r4, r3
 8005068:	d008      	beq.n	800507c <gwinSetWindowManager+0x24>
		_GWINwm->vmt->DeInit();
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	4798      	blx	r3
		_GWINwm->vmt->Init();
 8005070:	6823      	ldr	r3, [r4, #0]
		_GWINwm = gwm;
 8005072:	602c      	str	r4, [r5, #0]
		_GWINwm->vmt->Init();
 8005074:	681b      	ldr	r3, [r3, #0]
}
 8005076:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		_GWINwm->vmt->Init();
 800507a:	4718      	bx	r3
 800507c:	bd70      	pop	{r4, r5, r6, pc}
 800507e:	bf00      	nop
 8005080:	20000944 	.word	0x20000944
 8005084:	08007d80 	.word	0x08007d80

08005088 <gwinRedraw>:
void gwinRedraw(GHandle gh) {
 8005088:	b508      	push	{r3, lr}
	if (!(gh->flags & GWIN_FLG_SYSVISIBLE))
 800508a:	6983      	ldr	r3, [r0, #24]
 800508c:	059a      	lsls	r2, r3, #22
 800508e:	d400      	bmi.n	8005092 <gwinRedraw+0xa>
 8005090:	bd08      	pop	{r3, pc}
	RedrawPending |= DOREDRAW_VISIBLES;
 8005092:	4a0c      	ldr	r2, [pc, #48]	; (80050c4 <gwinRedraw+0x3c>)
 8005094:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
 8005098:	f041 0102 	orr.w	r1, r1, #2
 800509c:	f882 102c 	strb.w	r1, [r2, #44]	; 0x2c
	if (!RedrawPending)
 80050a0:	f892 102c 	ldrb.w	r1, [r2, #44]	; 0x2c
	gh->flags |= GWIN_FLG_NEEDREDRAW;
 80050a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050a8:	6183      	str	r3, [r0, #24]
	if (!RedrawPending)
 80050aa:	2900      	cmp	r1, #0
 80050ac:	d0f0      	beq.n	8005090 <gwinRedraw+0x8>
		gfxSemWait(&gwinsem, TIME_INFINITE);
 80050ae:	f102 0020 	add.w	r0, r2, #32
 80050b2:	f04f 31ff 	mov.w	r1, #4294967295
 80050b6:	f7fc fd8f 	bl	8001bd8 <gfxSemWait>
 80050ba:	2000      	movs	r0, #0
}
 80050bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80050c0:	f7fc ba7a 	b.w	80015b8 <_gwinFlushRedraws.part.8>
 80050c4:	200000b8 	.word	0x200000b8

080050c8 <gwinSetVisible>:
	void gwinSetVisible(GHandle gh, bool_t visible) {
 80050c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			if (!(gh->flags & GWIN_FLG_VISIBLE)) {
 80050cc:	6983      	ldr	r3, [r0, #24]
		if (visible) {
 80050ce:	b121      	cbz	r1, 80050da <gwinSetVisible+0x12>
			if (!(gh->flags & GWIN_FLG_VISIBLE)) {
 80050d0:	f413 7780 	ands.w	r7, r3, #256	; 0x100
 80050d4:	d045      	beq.n	8005162 <gwinSetVisible+0x9a>
 80050d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((gh->flags & GWIN_FLG_VISIBLE)) {
 80050da:	05da      	lsls	r2, r3, #23
 80050dc:	d5fb      	bpl.n	80050d6 <gwinSetVisible+0xe>
				RedrawPending |= DOREDRAW_INVISIBLES;
 80050de:	4d41      	ldr	r5, [pc, #260]	; (80051e4 <gwinSetVisible+0x11c>)
	Qadd(&readyQ, me = _gfxCurrentThread);
 80050e0:	4f41      	ldr	r7, [pc, #260]	; (80051e8 <gwinSetVisible+0x120>)
 80050e2:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
 80050e6:	f8d5 8014 	ldr.w	r8, [r5, #20]
				gh->flags &= ~(GWIN_FLG_VISIBLE|GWIN_FLG_SYSVISIBLE);
 80050ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
				gh->flags |= (GWIN_FLG_NEEDREDRAW|GWIN_FLG_BGREDRAW);
 80050ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
				RedrawPending |= DOREDRAW_INVISIBLES;
 80050f2:	f042 0201 	orr.w	r2, r2, #1
				gh->flags |= (GWIN_FLG_NEEDREDRAW|GWIN_FLG_BGREDRAW);
 80050f6:	6183      	str	r3, [r0, #24]
	t->next = 0;
 80050f8:	460e      	mov	r6, r1
				RedrawPending |= DOREDRAW_INVISIBLES;
 80050fa:	f885 202c 	strb.w	r2, [r5, #44]	; 0x2c
	while (pmutex[0]) {
 80050fe:	f1b8 0f00 	cmp.w	r8, #0
 8005102:	d01a      	beq.n	800513a <gwinSetVisible+0x72>
	if (!q->head)
 8005104:	6828      	ldr	r0, [r5, #0]
 8005106:	b130      	cbz	r0, 8005116 <gwinSetVisible+0x4e>
	q->head = t->next;
 8005108:	6804      	ldr	r4, [r0, #0]
 800510a:	602c      	str	r4, [r5, #0]
 800510c:	f001 fbf4 	bl	80068f8 <free>
	if (!q->head)
 8005110:	4620      	mov	r0, r4
 8005112:	2c00      	cmp	r4, #0
 8005114:	d1f8      	bne.n	8005108 <gwinSetVisible+0x40>
	if (!readyQ.head)
 8005116:	68ab      	ldr	r3, [r5, #8]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d0f0      	beq.n	80050fe <gwinSetVisible+0x36>
	Qadd(&readyQ, me = _gfxCurrentThread);
 800511c:	6839      	ldr	r1, [r7, #0]
		q->tail->next = t;
 800511e:	68ea      	ldr	r2, [r5, #12]
	t->next = 0;
 8005120:	600e      	str	r6, [r1, #0]
		q->tail->next = t;
 8005122:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 8005124:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 8005126:	60e9      	str	r1, [r5, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8005128:	4608      	mov	r0, r1
	q->head = t->next;
 800512a:	60aa      	str	r2, [r5, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 800512c:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 800512e:	603b      	str	r3, [r7, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8005130:	f7fb faf4 	bl	800071c <_gfxTaskSwitch>
	while (pmutex[0]) {
 8005134:	f1b8 0f00 	cmp.w	r8, #0
 8005138:	d1e4      	bne.n	8005104 <gwinSetVisible+0x3c>
 800513a:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
	if (psem->cnt < psem->limit)
 800513e:	f9b5 2010 	ldrsh.w	r2, [r5, #16]
 8005142:	f9b5 1012 	ldrsh.w	r1, [r5, #18]
 8005146:	f043 0304 	orr.w	r3, r3, #4
	pmutex[0] = 1;
 800514a:	2001      	movs	r0, #1
	if (psem->cnt < psem->limit)
 800514c:	4291      	cmp	r1, r2
 800514e:	f8a5 3040 	strh.w	r3, [r5, #64]	; 0x40
	pmutex[0] = 1;
 8005152:	6168      	str	r0, [r5, #20]
	if (psem->cnt < psem->limit)
 8005154:	dd01      	ble.n	800515a <gwinSetVisible+0x92>
		psem->cnt++;
 8005156:	4402      	add	r2, r0
 8005158:	822a      	strh	r2, [r5, #16]
	pmutex[0] = 0;
 800515a:	2300      	movs	r3, #0
 800515c:	616b      	str	r3, [r5, #20]
 800515e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				RedrawPending |= DOREDRAW_VISIBLES;
 8005162:	4d20      	ldr	r5, [pc, #128]	; (80051e4 <gwinSetVisible+0x11c>)
	Qadd(&readyQ, me = _gfxCurrentThread);
 8005164:	4e20      	ldr	r6, [pc, #128]	; (80051e8 <gwinSetVisible+0x120>)
 8005166:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
 800516a:	f8d5 8014 	ldr.w	r8, [r5, #20]
				gh->flags |= (GWIN_FLG_VISIBLE|GWIN_FLG_SYSVISIBLE|GWIN_FLG_NEEDREDRAW|GWIN_FLG_BGREDRAW);
 800516e:	f443 4343 	orr.w	r3, r3, #49920	; 0xc300
				RedrawPending |= DOREDRAW_VISIBLES;
 8005172:	f042 0202 	orr.w	r2, r2, #2
				gh->flags |= (GWIN_FLG_VISIBLE|GWIN_FLG_SYSVISIBLE|GWIN_FLG_NEEDREDRAW|GWIN_FLG_BGREDRAW);
 8005176:	6183      	str	r3, [r0, #24]
				RedrawPending |= DOREDRAW_VISIBLES;
 8005178:	f885 202c 	strb.w	r2, [r5, #44]	; 0x2c
	while (pmutex[0]) {
 800517c:	f1b8 0f00 	cmp.w	r8, #0
 8005180:	d01a      	beq.n	80051b8 <gwinSetVisible+0xf0>
	if (!q->head)
 8005182:	6828      	ldr	r0, [r5, #0]
 8005184:	b130      	cbz	r0, 8005194 <gwinSetVisible+0xcc>
	q->head = t->next;
 8005186:	6804      	ldr	r4, [r0, #0]
 8005188:	602c      	str	r4, [r5, #0]
 800518a:	f001 fbb5 	bl	80068f8 <free>
	if (!q->head)
 800518e:	4620      	mov	r0, r4
 8005190:	2c00      	cmp	r4, #0
 8005192:	d1f8      	bne.n	8005186 <gwinSetVisible+0xbe>
	if (!readyQ.head)
 8005194:	68ab      	ldr	r3, [r5, #8]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d0f0      	beq.n	800517c <gwinSetVisible+0xb4>
	Qadd(&readyQ, me = _gfxCurrentThread);
 800519a:	6831      	ldr	r1, [r6, #0]
		q->tail->next = t;
 800519c:	68ea      	ldr	r2, [r5, #12]
	t->next = 0;
 800519e:	600f      	str	r7, [r1, #0]
		q->tail->next = t;
 80051a0:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 80051a2:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 80051a4:	60e9      	str	r1, [r5, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 80051a6:	4608      	mov	r0, r1
	q->head = t->next;
 80051a8:	60aa      	str	r2, [r5, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 80051aa:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 80051ac:	6033      	str	r3, [r6, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 80051ae:	f7fb fab5 	bl	800071c <_gfxTaskSwitch>
	while (pmutex[0]) {
 80051b2:	f1b8 0f00 	cmp.w	r8, #0
 80051b6:	d1e4      	bne.n	8005182 <gwinSetVisible+0xba>
	if (psem->cnt < psem->limit)
 80051b8:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
 80051bc:	f9b5 1012 	ldrsh.w	r1, [r5, #18]
 80051c0:	f8b5 2040 	ldrh.w	r2, [r5, #64]	; 0x40
 80051c4:	4299      	cmp	r1, r3
	pmutex[0] = 1;
 80051c6:	f04f 0001 	mov.w	r0, #1
		psem->cnt++;
 80051ca:	bfc8      	it	gt
 80051cc:	181b      	addgt	r3, r3, r0
 80051ce:	f042 0204 	orr.w	r2, r2, #4
 80051d2:	bfc8      	it	gt
 80051d4:	822b      	strhgt	r3, [r5, #16]
	pmutex[0] = 0;
 80051d6:	2300      	movs	r3, #0
	pmutex[0] = 1;
 80051d8:	6168      	str	r0, [r5, #20]
 80051da:	f8a5 2040 	strh.w	r2, [r5, #64]	; 0x40
	pmutex[0] = 0;
 80051de:	616b      	str	r3, [r5, #20]
 80051e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051e4:	200000b8 	.word	0x200000b8
 80051e8:	20000948 	.word	0x20000948

080051ec <gwinSetEnabled>:
	void gwinSetEnabled(GHandle gh, bool_t enabled) {
 80051ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			if (!(gh->flags & GWIN_FLG_ENABLED)) {
 80051f0:	6983      	ldr	r3, [r0, #24]
		if (enabled) {
 80051f2:	b121      	cbz	r1, 80051fe <gwinSetEnabled+0x12>
			if (!(gh->flags & GWIN_FLG_ENABLED)) {
 80051f4:	f413 6680 	ands.w	r6, r3, #1024	; 0x400
 80051f8:	d00a      	beq.n	8005210 <gwinSetEnabled+0x24>
 80051fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((gh->flags & GWIN_FLG_ENABLED)) {
 80051fe:	055a      	lsls	r2, r3, #21
 8005200:	d5fb      	bpl.n	80051fa <gwinSetEnabled+0xe>
				gh->flags &= ~(GWIN_FLG_ENABLED|GWIN_FLG_SYSENABLED);
 8005202:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
	if (!(gh->flags & GWIN_FLG_SYSVISIBLE))
 8005206:	059b      	lsls	r3, r3, #22
 8005208:	d409      	bmi.n	800521e <gwinSetEnabled+0x32>
				gh->flags &= ~(GWIN_FLG_ENABLED|GWIN_FLG_SYSENABLED);
 800520a:	6182      	str	r2, [r0, #24]
 800520c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!(gh->flags & GWIN_FLG_SYSVISIBLE))
 8005210:	0599      	lsls	r1, r3, #22
 8005212:	d442      	bmi.n	800529a <gwinSetEnabled+0xae>
				gh->flags |= (GWIN_FLG_ENABLED|GWIN_FLG_SYSENABLED);
 8005214:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8005218:	6183      	str	r3, [r0, #24]
 800521a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	RedrawPending |= DOREDRAW_VISIBLES;
 800521e:	4d3c      	ldr	r5, [pc, #240]	; (8005310 <gwinSetEnabled+0x124>)
	Qadd(&readyQ, me = _gfxCurrentThread);
 8005220:	4f3c      	ldr	r7, [pc, #240]	; (8005314 <gwinSetEnabled+0x128>)
 8005222:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8005226:	f8d5 8014 	ldr.w	r8, [r5, #20]
	gh->flags |= GWIN_FLG_NEEDREDRAW;
 800522a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
	RedrawPending |= DOREDRAW_VISIBLES;
 800522e:	f043 0302 	orr.w	r3, r3, #2
	gh->flags |= GWIN_FLG_NEEDREDRAW;
 8005232:	6182      	str	r2, [r0, #24]
	t->next = 0;
 8005234:	460e      	mov	r6, r1
	RedrawPending |= DOREDRAW_VISIBLES;
 8005236:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
	while (pmutex[0]) {
 800523a:	f1b8 0f00 	cmp.w	r8, #0
 800523e:	d018      	beq.n	8005272 <gwinSetEnabled+0x86>
	if (!q->head)
 8005240:	6828      	ldr	r0, [r5, #0]
 8005242:	b130      	cbz	r0, 8005252 <gwinSetEnabled+0x66>
	q->head = t->next;
 8005244:	6804      	ldr	r4, [r0, #0]
 8005246:	602c      	str	r4, [r5, #0]
 8005248:	f001 fb56 	bl	80068f8 <free>
	if (!q->head)
 800524c:	4620      	mov	r0, r4
 800524e:	2c00      	cmp	r4, #0
 8005250:	d1f8      	bne.n	8005244 <gwinSetEnabled+0x58>
	if (!readyQ.head)
 8005252:	68ab      	ldr	r3, [r5, #8]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d0f0      	beq.n	800523a <gwinSetEnabled+0x4e>
	Qadd(&readyQ, me = _gfxCurrentThread);
 8005258:	6839      	ldr	r1, [r7, #0]
		q->tail->next = t;
 800525a:	68ea      	ldr	r2, [r5, #12]
	t->next = 0;
 800525c:	600e      	str	r6, [r1, #0]
		q->tail->next = t;
 800525e:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 8005260:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 8005262:	60e9      	str	r1, [r5, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8005264:	4608      	mov	r0, r1
	q->head = t->next;
 8005266:	60aa      	str	r2, [r5, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8005268:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 800526a:	603b      	str	r3, [r7, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 800526c:	f7fb fa56 	bl	800071c <_gfxTaskSwitch>
 8005270:	e7e3      	b.n	800523a <gwinSetEnabled+0x4e>
 8005272:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
	if (psem->cnt < psem->limit)
 8005276:	f9b5 2010 	ldrsh.w	r2, [r5, #16]
 800527a:	f9b5 1012 	ldrsh.w	r1, [r5, #18]
 800527e:	f043 0304 	orr.w	r3, r3, #4
	pmutex[0] = 1;
 8005282:	2001      	movs	r0, #1
	if (psem->cnt < psem->limit)
 8005284:	4291      	cmp	r1, r2
 8005286:	f8a5 3040 	strh.w	r3, [r5, #64]	; 0x40
	pmutex[0] = 1;
 800528a:	6168      	str	r0, [r5, #20]
	if (psem->cnt < psem->limit)
 800528c:	dd01      	ble.n	8005292 <gwinSetEnabled+0xa6>
		psem->cnt++;
 800528e:	4402      	add	r2, r0
 8005290:	822a      	strh	r2, [r5, #16]
	pmutex[0] = 0;
 8005292:	2300      	movs	r3, #0
 8005294:	616b      	str	r3, [r5, #20]
 8005296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800529a:	4d1d      	ldr	r5, [pc, #116]	; (8005310 <gwinSetEnabled+0x124>)
	Qadd(&readyQ, me = _gfxCurrentThread);
 800529c:	4f1d      	ldr	r7, [pc, #116]	; (8005314 <gwinSetEnabled+0x128>)
 800529e:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
 80052a2:	f8d5 8014 	ldr.w	r8, [r5, #20]
	gh->flags |= GWIN_FLG_NEEDREDRAW;
 80052a6:	f443 4398 	orr.w	r3, r3, #19456	; 0x4c00
	RedrawPending |= DOREDRAW_VISIBLES;
 80052aa:	f042 0202 	orr.w	r2, r2, #2
	gh->flags |= GWIN_FLG_NEEDREDRAW;
 80052ae:	6183      	str	r3, [r0, #24]
	RedrawPending |= DOREDRAW_VISIBLES;
 80052b0:	f885 202c 	strb.w	r2, [r5, #44]	; 0x2c
	while (pmutex[0]) {
 80052b4:	f1b8 0f00 	cmp.w	r8, #0
 80052b8:	d018      	beq.n	80052ec <gwinSetEnabled+0x100>
	if (!q->head)
 80052ba:	6828      	ldr	r0, [r5, #0]
 80052bc:	b130      	cbz	r0, 80052cc <gwinSetEnabled+0xe0>
	q->head = t->next;
 80052be:	6804      	ldr	r4, [r0, #0]
 80052c0:	602c      	str	r4, [r5, #0]
 80052c2:	f001 fb19 	bl	80068f8 <free>
	if (!q->head)
 80052c6:	4620      	mov	r0, r4
 80052c8:	2c00      	cmp	r4, #0
 80052ca:	d1f8      	bne.n	80052be <gwinSetEnabled+0xd2>
	if (!readyQ.head)
 80052cc:	68ab      	ldr	r3, [r5, #8]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d0f0      	beq.n	80052b4 <gwinSetEnabled+0xc8>
	Qadd(&readyQ, me = _gfxCurrentThread);
 80052d2:	6839      	ldr	r1, [r7, #0]
		q->tail->next = t;
 80052d4:	68ea      	ldr	r2, [r5, #12]
	t->next = 0;
 80052d6:	600e      	str	r6, [r1, #0]
		q->tail->next = t;
 80052d8:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 80052da:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 80052dc:	60e9      	str	r1, [r5, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 80052de:	4608      	mov	r0, r1
	q->head = t->next;
 80052e0:	60aa      	str	r2, [r5, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 80052e2:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 80052e4:	603b      	str	r3, [r7, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 80052e6:	f7fb fa19 	bl	800071c <_gfxTaskSwitch>
 80052ea:	e7e3      	b.n	80052b4 <gwinSetEnabled+0xc8>
	if (psem->cnt < psem->limit)
 80052ec:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
 80052f0:	f9b5 1012 	ldrsh.w	r1, [r5, #18]
 80052f4:	f8b5 2040 	ldrh.w	r2, [r5, #64]	; 0x40
	pmutex[0] = 1;
 80052f8:	2001      	movs	r0, #1
	if (psem->cnt < psem->limit)
 80052fa:	4299      	cmp	r1, r3
 80052fc:	f042 0204 	orr.w	r2, r2, #4
		psem->cnt++;
 8005300:	bfc8      	it	gt
 8005302:	181b      	addgt	r3, r3, r0
 8005304:	f8a5 2040 	strh.w	r2, [r5, #64]	; 0x40
	pmutex[0] = 1;
 8005308:	6168      	str	r0, [r5, #20]
		psem->cnt++;
 800530a:	bfc8      	it	gt
 800530c:	822b      	strhgt	r3, [r5, #16]
 800530e:	e7c0      	b.n	8005292 <gwinSetEnabled+0xa6>
 8005310:	200000b8 	.word	0x200000b8
 8005314:	20000948 	.word	0x20000948

08005318 <gwinMove>:
	_GWINwm->vmt->Move(gh, x, y);
 8005318:	4b02      	ldr	r3, [pc, #8]	; (8005324 <gwinMove+0xc>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	4718      	bx	r3
 8005322:	bf00      	nop
 8005324:	20000944 	.word	0x20000944

08005328 <gwinResize>:
	_GWINwm->vmt->Size(gh, width, height);
 8005328:	4b02      	ldr	r3, [pc, #8]	; (8005334 <gwinResize+0xc>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	695b      	ldr	r3, [r3, #20]
 8005330:	4718      	bx	r3
 8005332:	bf00      	nop
 8005334:	20000944 	.word	0x20000944

08005338 <gwinSetMinMax>:
	_GWINwm->vmt->MinMax(gh, minmax);
 8005338:	4b02      	ldr	r3, [pc, #8]	; (8005344 <gwinSetMinMax+0xc>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	4718      	bx	r3
 8005342:	bf00      	nop
 8005344:	20000944 	.word	0x20000944

08005348 <gwinRaise>:
	_GWINwm->vmt->Raise(gh);
 8005348:	4b02      	ldr	r3, [pc, #8]	; (8005354 <gwinRaise+0xc>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	69db      	ldr	r3, [r3, #28]
 8005350:	4718      	bx	r3
 8005352:	bf00      	nop
 8005354:	20000944 	.word	0x20000944

08005358 <gwinGetMinMax>:
	if (gh->flags & GWIN_FLG_MINIMIZED)
 8005358:	6980      	ldr	r0, [r0, #24]
 800535a:	02c3      	lsls	r3, r0, #11
		return GWIN_MINIMIZE;
 800535c:	bf54      	ite	pl
 800535e:	f3c0 5040 	ubfxpl	r0, r0, #21, #1
 8005362:	2002      	movmi	r0, #2
}
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop

08005368 <gwinRedrawDisplay>:
void gwinRedrawDisplay(GDisplay *g, bool_t preserve) {
 8005368:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return gh ? (GHandle)gfxQueueASyncNext(&gh->wmq) : (GHandle)gfxQueueASyncPeek(&_GWINList);
 800536c:	4c2d      	ldr	r4, [pc, #180]	; (8005424 <gwinRedrawDisplay+0xbc>)
 800536e:	6a65      	ldr	r5, [r4, #36]	; 0x24
	for(gh = gwinGetNextWindow(0); gh; gh = gwinGetNextWindow(gh)) {
 8005370:	2d00      	cmp	r5, #0
 8005372:	d054      	beq.n	800541e <gwinRedrawDisplay+0xb6>
	Qadd(&readyQ, me = _gfxCurrentThread);
 8005374:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 8005428 <gwinRedrawDisplay+0xc0>
 8005378:	468a      	mov	sl, r1
 800537a:	4606      	mov	r6, r0
	t->next = 0;
 800537c:	f04f 0900 	mov.w	r9, #0
		if (g && gh->display != g)
 8005380:	b13e      	cbz	r6, 8005392 <gwinRedrawDisplay+0x2a>
 8005382:	68ab      	ldr	r3, [r5, #8]
 8005384:	429e      	cmp	r6, r3
 8005386:	d004      	beq.n	8005392 <gwinRedrawDisplay+0x2a>
	return gh ? (GHandle)gfxQueueASyncNext(&gh->wmq) : (GHandle)gfxQueueASyncPeek(&_GWINList);
 8005388:	682d      	ldr	r5, [r5, #0]
	for(gh = gwinGetNextWindow(0); gh; gh = gwinGetNextWindow(gh)) {
 800538a:	2d00      	cmp	r5, #0
 800538c:	d1f8      	bne.n	8005380 <gwinRedrawDisplay+0x18>
 800538e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(gh->flags & GWIN_FLG_SYSVISIBLE))
 8005392:	69ab      	ldr	r3, [r5, #24]
 8005394:	059a      	lsls	r2, r3, #22
 8005396:	d5f7      	bpl.n	8005388 <gwinRedrawDisplay+0x20>
		if (!preserve)
 8005398:	f1ba 0f00 	cmp.w	sl, #0
 800539c:	d101      	bne.n	80053a2 <gwinRedrawDisplay+0x3a>
			gh->flags |= GWIN_FLG_BGREDRAW;
 800539e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
	RedrawPending |= DOREDRAW_VISIBLES;
 80053a2:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 80053a6:	f8d4 8014 	ldr.w	r8, [r4, #20]
	gh->flags |= GWIN_FLG_NEEDREDRAW;
 80053aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
	RedrawPending |= DOREDRAW_VISIBLES;
 80053ae:	f042 0202 	orr.w	r2, r2, #2
	gh->flags |= GWIN_FLG_NEEDREDRAW;
 80053b2:	61ab      	str	r3, [r5, #24]
	RedrawPending |= DOREDRAW_VISIBLES;
 80053b4:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
	while (pmutex[0]) {
 80053b8:	f1b8 0f00 	cmp.w	r8, #0
 80053bc:	d01d      	beq.n	80053fa <gwinRedrawDisplay+0x92>
	if (!q->head)
 80053be:	6820      	ldr	r0, [r4, #0]
 80053c0:	b130      	cbz	r0, 80053d0 <gwinRedrawDisplay+0x68>
	q->head = t->next;
 80053c2:	6807      	ldr	r7, [r0, #0]
 80053c4:	6027      	str	r7, [r4, #0]
 80053c6:	f001 fa97 	bl	80068f8 <free>
	if (!q->head)
 80053ca:	4638      	mov	r0, r7
 80053cc:	2f00      	cmp	r7, #0
 80053ce:	d1f8      	bne.n	80053c2 <gwinRedrawDisplay+0x5a>
	if (!readyQ.head)
 80053d0:	68a3      	ldr	r3, [r4, #8]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d0f0      	beq.n	80053b8 <gwinRedrawDisplay+0x50>
	Qadd(&readyQ, me = _gfxCurrentThread);
 80053d6:	f8db 1000 	ldr.w	r1, [fp]
		q->tail->next = t;
 80053da:	68e2      	ldr	r2, [r4, #12]
	t->next = 0;
 80053dc:	f8c1 9000 	str.w	r9, [r1]
		q->tail->next = t;
 80053e0:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 80053e2:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 80053e4:	60e1      	str	r1, [r4, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 80053e6:	4608      	mov	r0, r1
	q->head = t->next;
 80053e8:	60a2      	str	r2, [r4, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 80053ea:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 80053ec:	f8cb 3000 	str.w	r3, [fp]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 80053f0:	f7fb f994 	bl	800071c <_gfxTaskSwitch>
	while (pmutex[0]) {
 80053f4:	f1b8 0f00 	cmp.w	r8, #0
 80053f8:	d1e1      	bne.n	80053be <gwinRedrawDisplay+0x56>
	if (psem->cnt < psem->limit)
 80053fa:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 80053fe:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8005402:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
	pmutex[0] = 0;
 8005406:	f8c4 9014 	str.w	r9, [r4, #20]
	if (psem->cnt < psem->limit)
 800540a:	4291      	cmp	r1, r2
 800540c:	f043 0304 	orr.w	r3, r3, #4
		psem->cnt++;
 8005410:	bfc8      	it	gt
 8005412:	3201      	addgt	r2, #1
 8005414:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 8005418:	bfc8      	it	gt
 800541a:	8222      	strhgt	r2, [r4, #16]
 800541c:	e7b4      	b.n	8005388 <gwinRedrawDisplay+0x20>
 800541e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005422:	bf00      	nop
 8005424:	200000b8 	.word	0x200000b8
 8005428:	20000948 	.word	0x20000948

0800542c <gwinGetNextWindow>:
	return gh ? (GHandle)gfxQueueASyncNext(&gh->wmq) : (GHandle)gfxQueueASyncPeek(&_GWINList);
 800542c:	b108      	cbz	r0, 8005432 <gwinGetNextWindow+0x6>
 800542e:	6800      	ldr	r0, [r0, #0]
 8005430:	4770      	bx	lr
 8005432:	4b01      	ldr	r3, [pc, #4]	; (8005438 <gwinGetNextWindow+0xc>)
 8005434:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
 8005436:	4770      	bx	lr
 8005438:	200000b8 	.word	0x200000b8

0800543c <gwinGGraphCreate>:

GHandle gwinGGraphCreate(GDisplay *g, GGraphObject *gg, const GWindowInit *pInit) {
 800543c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005440:	4680      	mov	r8, r0
 8005442:	4614      	mov	r4, r2
	if (!pgw) {
 8005444:	2900      	cmp	r1, #0
 8005446:	f000 80c6 	beq.w	80055d6 <gwinGGraphCreate+0x19a>
		pgw->flags = flags;
 800544a:	2300      	movs	r3, #0
 800544c:	460e      	mov	r6, r1
 800544e:	618b      	str	r3, [r1, #24]
	pgw->color = defaultFgColor;
 8005450:	4b7d      	ldr	r3, [pc, #500]	; (8005648 <gwinGGraphCreate+0x20c>)
	pgw->bgcolor = defaultBgColor;
 8005452:	4d7e      	ldr	r5, [pc, #504]	; (800564c <gwinGGraphCreate+0x210>)
	pgw->color = defaultFgColor;
 8005454:	881a      	ldrh	r2, [r3, #0]
	pgw->vmt = vmt;
 8005456:	4f7e      	ldr	r7, [pc, #504]	; (8005650 <gwinGGraphCreate+0x214>)
	pgw->bgcolor = defaultBgColor;
 8005458:	f8b5 3874 	ldrh.w	r3, [r5, #2164]	; 0x874
	pgw->display = g;
 800545c:	f8c6 8008 	str.w	r8, [r6, #8]
		memset(pgw+1, 0, vmt->size - sizeof(GWindowObject));
 8005460:	f106 091c 	add.w	r9, r6, #28
	pgw->color = defaultFgColor;
 8005464:	82b2      	strh	r2, [r6, #20]
	pgw->bgcolor = defaultBgColor;
 8005466:	82f3      	strh	r3, [r6, #22]
		memset(pgw+1, 0, vmt->size - sizeof(GWindowObject));
 8005468:	2234      	movs	r2, #52	; 0x34
 800546a:	2100      	movs	r1, #0
	pgw->vmt = vmt;
 800546c:	6077      	str	r7, [r6, #4]
		memset(pgw+1, 0, vmt->size - sizeof(GWindowObject));
 800546e:	4648      	mov	r0, r9
 8005470:	f001 fa4a 	bl	8006908 <memset>
	if (!_GWINwm->vmt->Add(gh, pInit))
 8005474:	4b77      	ldr	r3, [pc, #476]	; (8005654 <gwinGGraphCreate+0x218>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4621      	mov	r1, r4
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	4630      	mov	r0, r6
 8005480:	4798      	blx	r3
 8005482:	4680      	mov	r8, r0
 8005484:	b930      	cbnz	r0, 8005494 <gwinGGraphCreate+0x58>
		if ((pgw->flags & GWIN_FLG_DYNAMIC))
 8005486:	69b3      	ldr	r3, [r6, #24]
 8005488:	04db      	lsls	r3, r3, #19
 800548a:	d45d      	bmi.n	8005548 <gwinGGraphCreate+0x10c>
	if (!(gg = (GGraphObject *)_gwindowCreate(g, &gg->g, pInit, &graphVMT, 0)))
		return 0;
 800548c:	2600      	movs	r6, #0
	gg->lastx = gg->lasty = 0;
	gwinGraphSetStyle((GHandle)gg, &GGraphDefaultStyle);
	gwinSetVisible((GHandle)gg, pInit->show);
	_gwinFlushRedraws(REDRAW_WAIT);
	return (GHandle)gg;
}
 800548e:	4630      	mov	r0, r6
 8005490:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

void gwinGraphSetStyle(GHandle gh, const GGraphStyle *pstyle) {
	#define gg	((GGraphObject *)gh)

	if (gh->vmt != &graphVMT)
 8005494:	6872      	ldr	r2, [r6, #4]
	gg->xorigin = gg->yorigin = 0;
 8005496:	2300      	movs	r3, #0
	if (gh->vmt != &graphVMT)
 8005498:	42ba      	cmp	r2, r7
	gg->xorigin = gg->yorigin = 0;
 800549a:	f8c6 3046 	str.w	r3, [r6, #70]	; 0x46
 800549e:	f8c6 304a 	str.w	r3, [r6, #74]	; 0x4a
	if (gh->vmt != &graphVMT)
 80054a2:	f000 80a3 	beq.w	80055ec <gwinGGraphCreate+0x1b0>
		if (visible) {
 80054a6:	7a27      	ldrb	r7, [r4, #8]
			if (!(gh->flags & GWIN_FLG_VISIBLE)) {
 80054a8:	69b3      	ldr	r3, [r6, #24]
		if (visible) {
 80054aa:	b97f      	cbnz	r7, 80054cc <gwinGGraphCreate+0x90>
			if ((gh->flags & GWIN_FLG_VISIBLE)) {
 80054ac:	05da      	lsls	r2, r3, #23
 80054ae:	d452      	bmi.n	8005556 <gwinGGraphCreate+0x11a>
	if (!RedrawPending)
 80054b0:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 80054b4:	b13b      	cbz	r3, 80054c6 <gwinGGraphCreate+0x8a>
		gfxSemWait(&gwinsem, TIME_INFINITE);
 80054b6:	f04f 31ff 	mov.w	r1, #4294967295
 80054ba:	4867      	ldr	r0, [pc, #412]	; (8005658 <gwinGGraphCreate+0x21c>)
 80054bc:	f7fc fb8c 	bl	8001bd8 <gfxSemWait>
 80054c0:	2000      	movs	r0, #0
 80054c2:	f7fc f879 	bl	80015b8 <_gwinFlushRedraws.part.8>
}
 80054c6:	4630      	mov	r0, r6
 80054c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (!(gh->flags & GWIN_FLG_VISIBLE)) {
 80054cc:	f413 7880 	ands.w	r8, r3, #256	; 0x100
 80054d0:	d1ee      	bne.n	80054b0 <gwinGGraphCreate+0x74>
				RedrawPending |= DOREDRAW_VISIBLES;
 80054d2:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
 80054d6:	f8d5 9014 	ldr.w	r9, [r5, #20]
	Qadd(&readyQ, me = _gfxCurrentThread);
 80054da:	4f60      	ldr	r7, [pc, #384]	; (800565c <gwinGGraphCreate+0x220>)
				gh->flags |= (GWIN_FLG_VISIBLE|GWIN_FLG_SYSVISIBLE|GWIN_FLG_NEEDREDRAW|GWIN_FLG_BGREDRAW);
 80054dc:	f443 4343 	orr.w	r3, r3, #49920	; 0xc300
				RedrawPending |= DOREDRAW_VISIBLES;
 80054e0:	f042 0202 	orr.w	r2, r2, #2
				gh->flags |= (GWIN_FLG_VISIBLE|GWIN_FLG_SYSVISIBLE|GWIN_FLG_NEEDREDRAW|GWIN_FLG_BGREDRAW);
 80054e4:	61b3      	str	r3, [r6, #24]
				RedrawPending |= DOREDRAW_VISIBLES;
 80054e6:	f885 202c 	strb.w	r2, [r5, #44]	; 0x2c
	while (pmutex[0]) {
 80054ea:	f1b9 0f00 	cmp.w	r9, #0
 80054ee:	d01b      	beq.n	8005528 <gwinGGraphCreate+0xec>
	if (!q->head)
 80054f0:	6828      	ldr	r0, [r5, #0]
 80054f2:	b130      	cbz	r0, 8005502 <gwinGGraphCreate+0xc6>
	q->head = t->next;
 80054f4:	6804      	ldr	r4, [r0, #0]
 80054f6:	602c      	str	r4, [r5, #0]
 80054f8:	f001 f9fe 	bl	80068f8 <free>
	if (!q->head)
 80054fc:	4620      	mov	r0, r4
 80054fe:	2c00      	cmp	r4, #0
 8005500:	d1f8      	bne.n	80054f4 <gwinGGraphCreate+0xb8>
	if (!readyQ.head)
 8005502:	68ab      	ldr	r3, [r5, #8]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d0f0      	beq.n	80054ea <gwinGGraphCreate+0xae>
	Qadd(&readyQ, me = _gfxCurrentThread);
 8005508:	6839      	ldr	r1, [r7, #0]
		q->tail->next = t;
 800550a:	68ea      	ldr	r2, [r5, #12]
	t->next = 0;
 800550c:	f8c1 8000 	str.w	r8, [r1]
		q->tail->next = t;
 8005510:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 8005512:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 8005514:	60e9      	str	r1, [r5, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 8005516:	4608      	mov	r0, r1
	q->head = t->next;
 8005518:	60aa      	str	r2, [r5, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 800551a:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 800551c:	603b      	str	r3, [r7, #0]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 800551e:	f7fb f8fd 	bl	800071c <_gfxTaskSwitch>
	while (pmutex[0]) {
 8005522:	f1b9 0f00 	cmp.w	r9, #0
 8005526:	d1e3      	bne.n	80054f0 <gwinGGraphCreate+0xb4>
	if (psem->cnt < psem->limit)
 8005528:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
 800552c:	f9b5 1012 	ldrsh.w	r1, [r5, #18]
 8005530:	f8b5 2040 	ldrh.w	r2, [r5, #64]	; 0x40
 8005534:	4299      	cmp	r1, r3
 8005536:	f042 0204 	orr.w	r2, r2, #4
		psem->cnt++;
 800553a:	bfc8      	it	gt
 800553c:	3301      	addgt	r3, #1
 800553e:	f8a5 2040 	strh.w	r2, [r5, #64]	; 0x40
 8005542:	bfc8      	it	gt
 8005544:	822b      	strhgt	r3, [r5, #16]
 8005546:	e043      	b.n	80055d0 <gwinGGraphCreate+0x194>
 8005548:	4630      	mov	r0, r6
		return 0;
 800554a:	4646      	mov	r6, r8
 800554c:	f001 f9d4 	bl	80068f8 <free>
}
 8005550:	4630      	mov	r0, r6
 8005552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				RedrawPending |= DOREDRAW_INVISIBLES;
 8005556:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
 800555a:	f8d5 9014 	ldr.w	r9, [r5, #20]
	Qadd(&readyQ, me = _gfxCurrentThread);
 800555e:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 800565c <gwinGGraphCreate+0x220>
				gh->flags &= ~(GWIN_FLG_VISIBLE|GWIN_FLG_SYSVISIBLE);
 8005562:	f423 7340 	bic.w	r3, r3, #768	; 0x300
				gh->flags |= (GWIN_FLG_NEEDREDRAW|GWIN_FLG_BGREDRAW);
 8005566:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
				RedrawPending |= DOREDRAW_INVISIBLES;
 800556a:	f042 0201 	orr.w	r2, r2, #1
				gh->flags |= (GWIN_FLG_NEEDREDRAW|GWIN_FLG_BGREDRAW);
 800556e:	61b3      	str	r3, [r6, #24]
				RedrawPending |= DOREDRAW_INVISIBLES;
 8005570:	f885 202c 	strb.w	r2, [r5, #44]	; 0x2c
	while (pmutex[0]) {
 8005574:	f1b9 0f00 	cmp.w	r9, #0
 8005578:	d01c      	beq.n	80055b4 <gwinGGraphCreate+0x178>
	if (!q->head)
 800557a:	6828      	ldr	r0, [r5, #0]
 800557c:	b130      	cbz	r0, 800558c <gwinGGraphCreate+0x150>
	q->head = t->next;
 800557e:	6804      	ldr	r4, [r0, #0]
 8005580:	602c      	str	r4, [r5, #0]
 8005582:	f001 f9b9 	bl	80068f8 <free>
	if (!q->head)
 8005586:	4620      	mov	r0, r4
 8005588:	2c00      	cmp	r4, #0
 800558a:	d1f8      	bne.n	800557e <gwinGGraphCreate+0x142>
	if (!readyQ.head)
 800558c:	68ab      	ldr	r3, [r5, #8]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d0f0      	beq.n	8005574 <gwinGGraphCreate+0x138>
	Qadd(&readyQ, me = _gfxCurrentThread);
 8005592:	f8d8 1000 	ldr.w	r1, [r8]
		q->tail->next = t;
 8005596:	68ea      	ldr	r2, [r5, #12]
	t->next = 0;
 8005598:	600f      	str	r7, [r1, #0]
		q->tail->next = t;
 800559a:	6011      	str	r1, [r2, #0]
	q->head = t->next;
 800559c:	681a      	ldr	r2, [r3, #0]
		q->tail = t;
 800559e:	60e9      	str	r1, [r5, #12]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 80055a0:	4608      	mov	r0, r1
	q->head = t->next;
 80055a2:	60aa      	str	r2, [r5, #8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 80055a4:	4619      	mov	r1, r3
	_gfxCurrentThread = Qpop(&readyQ);
 80055a6:	f8c8 3000 	str.w	r3, [r8]
	_gfxTaskSwitch(me, _gfxCurrentThread);
 80055aa:	f7fb f8b7 	bl	800071c <_gfxTaskSwitch>
	while (pmutex[0]) {
 80055ae:	f1b9 0f00 	cmp.w	r9, #0
 80055b2:	d1e2      	bne.n	800557a <gwinGGraphCreate+0x13e>
 80055b4:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
	if (psem->cnt < psem->limit)
 80055b8:	f9b5 2010 	ldrsh.w	r2, [r5, #16]
 80055bc:	f9b5 1012 	ldrsh.w	r1, [r5, #18]
 80055c0:	f043 0304 	orr.w	r3, r3, #4
 80055c4:	4291      	cmp	r1, r2
 80055c6:	f8a5 3040 	strh.w	r3, [r5, #64]	; 0x40
 80055ca:	dd01      	ble.n	80055d0 <gwinGGraphCreate+0x194>
		psem->cnt++;
 80055cc:	3201      	adds	r2, #1
 80055ce:	822a      	strh	r2, [r5, #16]
	pmutex[0] = 0;
 80055d0:	2300      	movs	r3, #0
 80055d2:	616b      	str	r3, [r5, #20]
 80055d4:	e76c      	b.n	80054b0 <gwinGGraphCreate+0x74>
		return malloc(sz);
 80055d6:	2050      	movs	r0, #80	; 0x50
 80055d8:	f001 f986 	bl	80068e8 <malloc>
		if (!(pgw = gfxAlloc(vmt->size)))
 80055dc:	2800      	cmp	r0, #0
 80055de:	f43f af55 	beq.w	800548c <gwinGGraphCreate+0x50>
		pgw->flags = flags|GWIN_FLG_DYNAMIC;
 80055e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055e6:	6183      	str	r3, [r0, #24]
 80055e8:	4606      	mov	r6, r0
 80055ea:	e731      	b.n	8005450 <gwinGGraphCreate+0x14>
		return;

	gg->style.point = pstyle->point;
 80055ec:	f102 0314 	add.w	r3, r2, #20
 80055f0:	e893 0003 	ldmia.w	r3, {r0, r1}
	gg->style.line = pstyle->line;
 80055f4:	4617      	mov	r7, r2
	gg->style.xaxis = pstyle->xaxis;
 80055f6:	f102 0320 	add.w	r3, r2, #32
	gg->style.point = pstyle->point;
 80055fa:	f8c9 0000 	str.w	r0, [r9]
 80055fe:	8431      	strh	r1, [r6, #32]
	gg->style.xaxis = pstyle->xaxis;
 8005600:	e893 0003 	ldmia.w	r3, {r0, r1}
	gg->style.line = pstyle->line;
 8005604:	f857 cf1a 	ldr.w	ip, [r7, #26]!
	gg->style.xaxis = pstyle->xaxis;
 8005608:	62b0      	str	r0, [r6, #40]	; 0x28
	gg->style.yaxis = pstyle->yaxis;
 800560a:	4613      	mov	r3, r2
	gg->style.xaxis = pstyle->xaxis;
 800560c:	85b1      	strh	r1, [r6, #44]	; 0x2c
	gg->style.xgrid = pstyle->xgrid;
 800560e:	f102 002c 	add.w	r0, r2, #44	; 0x2c
	gg->style.yaxis = pstyle->yaxis;
 8005612:	f853 ef26 	ldr.w	lr, [r3, #38]!
	gg->style.line = pstyle->line;
 8005616:	88b9      	ldrh	r1, [r7, #4]
 8005618:	84f1      	strh	r1, [r6, #38]	; 0x26
	gg->style.xgrid = pstyle->xgrid;
 800561a:	c803      	ldmia	r0, {r0, r1}
	gg->style.yaxis = pstyle->yaxis;
 800561c:	889b      	ldrh	r3, [r3, #4]
 800561e:	8673      	strh	r3, [r6, #50]	; 0x32
	gg->style.ygrid = pstyle->ygrid;
 8005620:	3234      	adds	r2, #52	; 0x34
	gg->style.xgrid = pstyle->xgrid;
 8005622:	f106 0334 	add.w	r3, r6, #52	; 0x34
	gg->style.line = pstyle->line;
 8005626:	f8c6 c022 	str.w	ip, [r6, #34]	; 0x22
	gg->style.yaxis = pstyle->yaxis;
 800562a:	f8c6 e02e 	str.w	lr, [r6, #46]	; 0x2e
	gg->style.xgrid = pstyle->xgrid;
 800562e:	e883 0003 	stmia.w	r3, {r0, r1}
	gg->style.ygrid = pstyle->ygrid;
 8005632:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005636:	f106 033c 	add.w	r3, r6, #60	; 0x3c
	gg->style.flags = pstyle->flags;
 800563a:	220f      	movs	r2, #15
	gg->style.ygrid = pstyle->ygrid;
 800563c:	e883 0003 	stmia.w	r3, {r0, r1}
	gg->style.flags = pstyle->flags;
 8005640:	f8a6 2044 	strh.w	r2, [r6, #68]	; 0x44
 8005644:	e72f      	b.n	80054a6 <gwinGGraphCreate+0x6a>
 8005646:	bf00      	nop
 8005648:	20000034 	.word	0x20000034
 800564c:	200000b8 	.word	0x200000b8
 8005650:	08007e18 	.word	0x08007e18
 8005654:	20000944 	.word	0x20000944
 8005658:	200000d8 	.word	0x200000d8
 800565c:	20000948 	.word	0x20000948

08005660 <gwinGraphSetStyle>:
void gwinGraphSetStyle(GHandle gh, const GGraphStyle *pstyle) {
 8005660:	4603      	mov	r3, r0
 8005662:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (gh->vmt != &graphVMT)
 8005664:	4819      	ldr	r0, [pc, #100]	; (80056cc <gwinGraphSetStyle+0x6c>)
 8005666:	685c      	ldr	r4, [r3, #4]
 8005668:	4284      	cmp	r4, r0
 800566a:	d000      	beq.n	800566e <gwinGraphSetStyle+0xe>
 800566c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	gg->style.line = pstyle->line;
 800566e:	460e      	mov	r6, r1
	gg->style.point = pstyle->point;
 8005670:	6808      	ldr	r0, [r1, #0]
 8005672:	61d8      	str	r0, [r3, #28]
 8005674:	460a      	mov	r2, r1
	gg->style.xaxis = pstyle->xaxis;
 8005676:	460d      	mov	r5, r1
	gg->style.line = pstyle->line;
 8005678:	f856 1f06 	ldr.w	r1, [r6, #6]!
	gg->style.xaxis = pstyle->xaxis;
 800567c:	f855 0f0c 	ldr.w	r0, [r5, #12]!
	gg->style.point = pstyle->point;
 8005680:	f8b2 c004 	ldrh.w	ip, [r2, #4]
	gg->style.line = pstyle->line;
 8005684:	f8c3 1022 	str.w	r1, [r3, #34]	; 0x22
	gg->style.xgrid = pstyle->xgrid;
 8005688:	4611      	mov	r1, r2
	gg->style.yaxis = pstyle->yaxis;
 800568a:	4614      	mov	r4, r2
	gg->style.line = pstyle->line;
 800568c:	f8b6 e004 	ldrh.w	lr, [r6, #4]
	gg->style.xaxis = pstyle->xaxis;
 8005690:	6298      	str	r0, [r3, #40]	; 0x28
	gg->style.xgrid = pstyle->xgrid;
 8005692:	f851 0f18 	ldr.w	r0, [r1, #24]!
	gg->style.xaxis = pstyle->xaxis;
 8005696:	88af      	ldrh	r7, [r5, #4]
	gg->style.yaxis = pstyle->yaxis;
 8005698:	f854 5f12 	ldr.w	r5, [r4, #18]!
	gg->style.xgrid = pstyle->xgrid;
 800569c:	6849      	ldr	r1, [r1, #4]
	gg->style.yaxis = pstyle->yaxis;
 800569e:	f8c3 502e 	str.w	r5, [r3, #46]	; 0x2e
	gg->style.ygrid = pstyle->ygrid;
 80056a2:	4615      	mov	r5, r2
	gg->style.yaxis = pstyle->yaxis;
 80056a4:	88a6      	ldrh	r6, [r4, #4]
 80056a6:	865e      	strh	r6, [r3, #50]	; 0x32
	gg->style.xgrid = pstyle->xgrid;
 80056a8:	f103 0434 	add.w	r4, r3, #52	; 0x34
	gg->style.point = pstyle->point;
 80056ac:	f8a3 c020 	strh.w	ip, [r3, #32]
	gg->style.line = pstyle->line;
 80056b0:	f8a3 e026 	strh.w	lr, [r3, #38]	; 0x26
	gg->style.xaxis = pstyle->xaxis;
 80056b4:	859f      	strh	r7, [r3, #44]	; 0x2c
	gg->style.xgrid = pstyle->xgrid;
 80056b6:	c403      	stmia	r4!, {r0, r1}
	gg->style.ygrid = pstyle->ygrid;
 80056b8:	f855 0f20 	ldr.w	r0, [r5, #32]!
	gg->style.flags = pstyle->flags;
 80056bc:	8d14      	ldrh	r4, [r2, #40]	; 0x28
	gg->style.ygrid = pstyle->ygrid;
 80056be:	6869      	ldr	r1, [r5, #4]
 80056c0:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80056c4:	c203      	stmia	r2!, {r0, r1}
	gg->style.flags = pstyle->flags;
 80056c6:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
 80056ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056cc:	08007e18 	.word	0x08007e18

080056d0 <gwinGraphSetOrigin>:

	#undef gg
}

void gwinGraphSetOrigin(GHandle gh, coord_t x, coord_t y) {
 80056d0:	b410      	push	{r4}
	#define gg	((GGraphObject *)gh)

	if (gh->vmt != &graphVMT)
 80056d2:	4b05      	ldr	r3, [pc, #20]	; (80056e8 <gwinGraphSetOrigin+0x18>)
 80056d4:	6844      	ldr	r4, [r0, #4]
 80056d6:	429c      	cmp	r4, r3
		return;

	gg->xorigin = x;
 80056d8:	bf04      	itt	eq
 80056da:	f8a0 1046 	strheq.w	r1, [r0, #70]	; 0x46
	gg->yorigin = y;
 80056de:	f8a0 2048 	strheq.w	r2, [r0, #72]	; 0x48

	#undef gg
}
 80056e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80056e6:	4770      	bx	lr
 80056e8:	08007e18 	.word	0x08007e18

080056ec <gwinGraphDrawAxis>:

void gwinGraphDrawAxis(GHandle gh) {
	#define gg	((GGraphObject *)gh)
	coord_t		i, xmin, ymin, xmax, ymax;

	if (gh->vmt != &graphVMT || !_gwinDrawStart(gh))
 80056ec:	4b97      	ldr	r3, [pc, #604]	; (800594c <gwinGraphDrawAxis+0x260>)
 80056ee:	6842      	ldr	r2, [r0, #4]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d000      	beq.n	80056f6 <gwinGraphDrawAxis+0xa>
 80056f4:	4770      	bx	lr
void gwinGraphDrawAxis(GHandle gh) {
 80056f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056fa:	b089      	sub	sp, #36	; 0x24
 80056fc:	4604      	mov	r4, r0
	if (gh->vmt != &graphVMT || !_gwinDrawStart(gh))
 80056fe:	f7ff f8d9 	bl	80048b4 <_gwinDrawStart>
 8005702:	2800      	cmp	r0, #0
 8005704:	f000 811e 	beq.w	8005944 <gwinGraphDrawAxis+0x258>
		return;

	xmin = -gg->xorigin;
	xmax = gh->width-gg->xorigin-1;
	ymin = -gg->yorigin;
 8005708:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
	xmin = -gg->xorigin;
 800570c:	f8b4 a046 	ldrh.w	sl, [r4, #70]	; 0x46
	xmax = gh->width-gg->xorigin-1;
 8005710:	8a22      	ldrh	r2, [r4, #16]
	ymin = -gg->yorigin;
 8005712:	9303      	str	r3, [sp, #12]
 8005714:	4618      	mov	r0, r3
	ymax = gh->height-gg->yorigin-1;
 8005716:	8a63      	ldrh	r3, [r4, #18]

	// x grid - this code assumes that the GGraphGridStyle is a superset of GGraphListStyle
	if (gg->style.xgrid.type != GGRAPH_LINE_NONE && gg->style.xgrid.spacing >= 2) {
 8005718:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
	xmax = gh->width-gg->xorigin-1;
 800571c:	eba2 020a 	sub.w	r2, r2, sl
	ymax = gh->height-gg->yorigin-1;
 8005720:	1a1b      	subs	r3, r3, r0
	xmax = gh->width-gg->xorigin-1;
 8005722:	b292      	uxth	r2, r2
	ymax = gh->height-gg->yorigin-1;
 8005724:	b29b      	uxth	r3, r3
	xmax = gh->width-gg->xorigin-1;
 8005726:	9206      	str	r2, [sp, #24]
	ymax = gh->height-gg->yorigin-1;
 8005728:	9307      	str	r3, [sp, #28]
	xmax = gh->width-gg->xorigin-1;
 800572a:	3a01      	subs	r2, #1
	ymax = gh->height-gg->yorigin-1;
 800572c:	3b01      	subs	r3, #1
	xmax = gh->width-gg->xorigin-1;
 800572e:	b292      	uxth	r2, r2
	ymax = gh->height-gg->yorigin-1;
 8005730:	b29b      	uxth	r3, r3
	xmin = -gg->xorigin;
 8005732:	f1ca 0700 	rsb	r7, sl, #0
	ymin = -gg->yorigin;
 8005736:	4246      	negs	r6, r0
	xmax = gh->width-gg->xorigin-1;
 8005738:	9204      	str	r2, [sp, #16]
	ymax = gh->height-gg->yorigin-1;
 800573a:	9305      	str	r3, [sp, #20]
	xmax = gh->width-gg->xorigin-1;
 800573c:	fa0f f982 	sxth.w	r9, r2
	ymax = gh->height-gg->yorigin-1;
 8005740:	fa0f f883 	sxth.w	r8, r3
	xmin = -gg->xorigin;
 8005744:	b23f      	sxth	r7, r7
	ymin = -gg->yorigin;
 8005746:	b236      	sxth	r6, r6
	if (gg->style.xgrid.type != GGRAPH_LINE_NONE && gg->style.xgrid.spacing >= 2) {
 8005748:	b391      	cbz	r1, 80057b0 <gwinGraphDrawAxis+0xc4>
 800574a:	f9b4 b03a 	ldrsh.w	fp, [r4, #58]	; 0x3a
 800574e:	f1bb 0f01 	cmp.w	fp, #1
 8005752:	dd2d      	ble.n	80057b0 <gwinGraphDrawAxis+0xc4>
		for(i = gg->style.xgrid.spacing; i <= xmax; i += gg->style.xgrid.spacing)
 8005754:	45d9      	cmp	r9, fp
 8005756:	bfb8      	it	lt
 8005758:	fa1f f38b 	uxthlt.w	r3, fp
 800575c:	db15      	blt.n	800578a <gwinGraphDrawAxis+0x9e>
 800575e:	f104 0534 	add.w	r5, r4, #52	; 0x34
 8005762:	462b      	mov	r3, r5
 8005764:	4645      	mov	r5, r8
 8005766:	46b8      	mov	r8, r7
 8005768:	461f      	mov	r7, r3
			lineto(gg, i, ymin, i, ymax, (GGraphLineStyle *)&gg->style.xgrid);
 800576a:	465b      	mov	r3, fp
 800576c:	4659      	mov	r1, fp
 800576e:	e88d 00a0 	stmia.w	sp, {r5, r7}
 8005772:	4632      	mov	r2, r6
 8005774:	4620      	mov	r0, r4
 8005776:	f7fb fcf7 	bl	8001168 <lineto>
		for(i = gg->style.xgrid.spacing; i <= xmax; i += gg->style.xgrid.spacing)
 800577a:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800577c:	449b      	add	fp, r3
 800577e:	fa0f fb8b 	sxth.w	fp, fp
 8005782:	45d9      	cmp	r9, fp
 8005784:	daf1      	bge.n	800576a <gwinGraphDrawAxis+0x7e>
 8005786:	4647      	mov	r7, r8
 8005788:	46a8      	mov	r8, r5
		for(i = -gg->style.xgrid.spacing; i >= xmin; i -= gg->style.xgrid.spacing)
 800578a:	425d      	negs	r5, r3
 800578c:	b22d      	sxth	r5, r5
 800578e:	42af      	cmp	r7, r5
 8005790:	dc0e      	bgt.n	80057b0 <gwinGraphDrawAxis+0xc4>
 8005792:	f104 0b34 	add.w	fp, r4, #52	; 0x34
			lineto(gg, i, ymin, i, ymax, (GGraphLineStyle *)&gg->style.xgrid);
 8005796:	462b      	mov	r3, r5
 8005798:	4629      	mov	r1, r5
 800579a:	e88d 0900 	stmia.w	sp, {r8, fp}
 800579e:	4632      	mov	r2, r6
 80057a0:	4620      	mov	r0, r4
 80057a2:	f7fb fce1 	bl	8001168 <lineto>
		for(i = -gg->style.xgrid.spacing; i >= xmin; i -= gg->style.xgrid.spacing)
 80057a6:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 80057a8:	1aed      	subs	r5, r5, r3
 80057aa:	b22d      	sxth	r5, r5
 80057ac:	42af      	cmp	r7, r5
 80057ae:	ddf2      	ble.n	8005796 <gwinGraphDrawAxis+0xaa>
	}

	// y grid - this code assumes that the GGraphGridStyle is a superset of GGraphListStyle
	if (gg->style.ygrid.type != GGRAPH_LINE_NONE && gg->style.ygrid.spacing >= 2) {
 80057b0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80057b4:	b37b      	cbz	r3, 8005816 <gwinGraphDrawAxis+0x12a>
 80057b6:	f9b4 5042 	ldrsh.w	r5, [r4, #66]	; 0x42
 80057ba:	2d01      	cmp	r5, #1
 80057bc:	dd2b      	ble.n	8005816 <gwinGraphDrawAxis+0x12a>
		for(i = gg->style.ygrid.spacing; i <= ymax; i += gg->style.ygrid.spacing)
 80057be:	45a8      	cmp	r8, r5
 80057c0:	bfb8      	it	lt
 80057c2:	b2ab      	uxthlt	r3, r5
 80057c4:	db13      	blt.n	80057ee <gwinGraphDrawAxis+0x102>
 80057c6:	f104 0b3c 	add.w	fp, r4, #60	; 0x3c
 80057ca:	465b      	mov	r3, fp
 80057cc:	46b3      	mov	fp, r6
 80057ce:	461e      	mov	r6, r3
			lineto(gg, xmin, i, xmax, i, (GGraphLineStyle *)&gg->style.ygrid);
 80057d0:	e88d 0060 	stmia.w	sp, {r5, r6}
 80057d4:	464b      	mov	r3, r9
 80057d6:	462a      	mov	r2, r5
 80057d8:	4639      	mov	r1, r7
 80057da:	4620      	mov	r0, r4
 80057dc:	f7fb fcc4 	bl	8001168 <lineto>
		for(i = gg->style.ygrid.spacing; i <= ymax; i += gg->style.ygrid.spacing)
 80057e0:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 80057e4:	441d      	add	r5, r3
 80057e6:	b22d      	sxth	r5, r5
 80057e8:	45a8      	cmp	r8, r5
 80057ea:	daf1      	bge.n	80057d0 <gwinGraphDrawAxis+0xe4>
 80057ec:	465e      	mov	r6, fp
		for(i = -gg->style.ygrid.spacing; i >= ymin; i -= gg->style.ygrid.spacing)
 80057ee:	425d      	negs	r5, r3
 80057f0:	b22d      	sxth	r5, r5
 80057f2:	42ae      	cmp	r6, r5
 80057f4:	dc0f      	bgt.n	8005816 <gwinGraphDrawAxis+0x12a>
 80057f6:	f104 0b3c 	add.w	fp, r4, #60	; 0x3c
			lineto(gg, xmin, i, xmax, i, (GGraphLineStyle *)&gg->style.ygrid);
 80057fa:	e88d 0820 	stmia.w	sp, {r5, fp}
 80057fe:	464b      	mov	r3, r9
 8005800:	462a      	mov	r2, r5
 8005802:	4639      	mov	r1, r7
 8005804:	4620      	mov	r0, r4
 8005806:	f7fb fcaf 	bl	8001168 <lineto>
		for(i = -gg->style.ygrid.spacing; i >= ymin; i -= gg->style.ygrid.spacing)
 800580a:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 800580e:	1aed      	subs	r5, r5, r3
 8005810:	b22d      	sxth	r5, r5
 8005812:	42ae      	cmp	r6, r5
 8005814:	ddf1      	ble.n	80057fa <gwinGraphDrawAxis+0x10e>
	}

	// x axis
	lineto(gg, xmin, 0, xmax, 0, &gg->style.xaxis);
 8005816:	2500      	movs	r5, #0
 8005818:	f104 0b28 	add.w	fp, r4, #40	; 0x28
 800581c:	464b      	mov	r3, r9
 800581e:	4620      	mov	r0, r4
 8005820:	e88d 0820 	stmia.w	sp, {r5, fp}
 8005824:	462a      	mov	r2, r5
 8005826:	4639      	mov	r1, r7
 8005828:	f7fb fc9e 	bl	8001168 <lineto>
	if ((gg->style.flags & GWIN_GRAPH_STYLE_XAXIS_NEGATIVE_ARROWS)) {
 800582c:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 8005830:	0798      	lsls	r0, r3, #30
 8005832:	d51f      	bpl.n	8005874 <gwinGraphDrawAxis+0x188>
		if (xmin > 0 || xmin < -(GGRAPH_ARROW_SIZE+1)) {
 8005834:	f1ca 0206 	rsb	r2, sl, #6
 8005838:	b292      	uxth	r2, r2
 800583a:	2a06      	cmp	r2, #6
 800583c:	d91a      	bls.n	8005874 <gwinGraphDrawAxis+0x188>
			lineto(gg, xmin, 0, xmin+GGRAPH_ARROW_SIZE, GGRAPH_ARROW_SIZE, &gg->style.xaxis);
 800583e:	f1ca 0a05 	rsb	sl, sl, #5
 8005842:	fa0f fa8a 	sxth.w	sl, sl
 8005846:	2205      	movs	r2, #5
 8005848:	4653      	mov	r3, sl
 800584a:	9200      	str	r2, [sp, #0]
 800584c:	4639      	mov	r1, r7
 800584e:	462a      	mov	r2, r5
 8005850:	4620      	mov	r0, r4
 8005852:	f8cd b004 	str.w	fp, [sp, #4]
 8005856:	f7fb fc87 	bl	8001168 <lineto>
			lineto(gg, xmin, 0, xmin+GGRAPH_ARROW_SIZE, -GGRAPH_ARROW_SIZE, &gg->style.xaxis);
 800585a:	f06f 0004 	mvn.w	r0, #4
 800585e:	4653      	mov	r3, sl
 8005860:	9000      	str	r0, [sp, #0]
 8005862:	f8cd b004 	str.w	fp, [sp, #4]
 8005866:	462a      	mov	r2, r5
 8005868:	4639      	mov	r1, r7
 800586a:	4620      	mov	r0, r4
 800586c:	f7fb fc7c 	bl	8001168 <lineto>
 8005870:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
		}
	}
	if ((gg->style.flags & GWIN_GRAPH_STYLE_XAXIS_POSITIVE_ARROWS)) {
 8005874:	07d9      	lsls	r1, r3, #31
 8005876:	d51a      	bpl.n	80058ae <gwinGraphDrawAxis+0x1c2>
		if (xmax < 0 || xmax > (GGRAPH_ARROW_SIZE+1)) {
 8005878:	9b04      	ldr	r3, [sp, #16]
 800587a:	2b06      	cmp	r3, #6
 800587c:	d917      	bls.n	80058ae <gwinGraphDrawAxis+0x1c2>
			lineto(gg, xmax, 0, xmax-GGRAPH_ARROW_SIZE, GGRAPH_ARROW_SIZE, &gg->style.xaxis);
 800587e:	9b06      	ldr	r3, [sp, #24]
 8005880:	f8cd b004 	str.w	fp, [sp, #4]
 8005884:	1f9d      	subs	r5, r3, #6
 8005886:	b22d      	sxth	r5, r5
 8005888:	2205      	movs	r2, #5
 800588a:	462b      	mov	r3, r5
 800588c:	9200      	str	r2, [sp, #0]
 800588e:	4649      	mov	r1, r9
 8005890:	2200      	movs	r2, #0
 8005892:	4620      	mov	r0, r4
 8005894:	f7fb fc68 	bl	8001168 <lineto>
			lineto(gg, xmax, 0, xmax-GGRAPH_ARROW_SIZE, -GGRAPH_ARROW_SIZE, &gg->style.xaxis);
 8005898:	f06f 0204 	mvn.w	r2, #4
 800589c:	9200      	str	r2, [sp, #0]
 800589e:	462b      	mov	r3, r5
 80058a0:	f8cd b004 	str.w	fp, [sp, #4]
 80058a4:	4649      	mov	r1, r9
 80058a6:	2200      	movs	r2, #0
 80058a8:	4620      	mov	r0, r4
 80058aa:	f7fb fc5d 	bl	8001168 <lineto>
		}
	}

	// y axis
	lineto(gg, 0, ymin, 0, ymax, &gg->style.yaxis);
 80058ae:	2300      	movs	r3, #0
 80058b0:	f104 072e 	add.w	r7, r4, #46	; 0x2e
 80058b4:	4619      	mov	r1, r3
 80058b6:	4632      	mov	r2, r6
 80058b8:	f8cd 8000 	str.w	r8, [sp]
 80058bc:	9701      	str	r7, [sp, #4]
 80058be:	4620      	mov	r0, r4
 80058c0:	f7fb fc52 	bl	8001168 <lineto>
	if ((gg->style.flags & GWIN_GRAPH_STYLE_YAXIS_NEGATIVE_ARROWS)) {
 80058c4:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 80058c8:	071a      	lsls	r2, r3, #28
 80058ca:	d51c      	bpl.n	8005906 <gwinGraphDrawAxis+0x21a>
		if (ymin > 0 || ymin < -(GGRAPH_ARROW_SIZE+1)) {
 80058cc:	9a03      	ldr	r2, [sp, #12]
 80058ce:	f1c2 0206 	rsb	r2, r2, #6
 80058d2:	b292      	uxth	r2, r2
 80058d4:	2a06      	cmp	r2, #6
 80058d6:	d916      	bls.n	8005906 <gwinGraphDrawAxis+0x21a>
			lineto(gg, 0, ymin, GGRAPH_ARROW_SIZE, ymin+GGRAPH_ARROW_SIZE, &gg->style.yaxis);
 80058d8:	9b03      	ldr	r3, [sp, #12]
 80058da:	f1c3 0505 	rsb	r5, r3, #5
 80058de:	b22d      	sxth	r5, r5
 80058e0:	2305      	movs	r3, #5
 80058e2:	4632      	mov	r2, r6
 80058e4:	2100      	movs	r1, #0
 80058e6:	4620      	mov	r0, r4
 80058e8:	e88d 00a0 	stmia.w	sp, {r5, r7}
 80058ec:	f7fb fc3c 	bl	8001168 <lineto>
			lineto(gg, 0, ymin, -GGRAPH_ARROW_SIZE, ymin+GGRAPH_ARROW_SIZE, &gg->style.yaxis);
 80058f0:	f06f 0304 	mvn.w	r3, #4
 80058f4:	e88d 00a0 	stmia.w	sp, {r5, r7}
 80058f8:	4632      	mov	r2, r6
 80058fa:	2100      	movs	r1, #0
 80058fc:	4620      	mov	r0, r4
 80058fe:	f7fb fc33 	bl	8001168 <lineto>
 8005902:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
		}
	}
	if ((gg->style.flags & GWIN_GRAPH_STYLE_YAXIS_POSITIVE_ARROWS)) {
 8005906:	075b      	lsls	r3, r3, #29
 8005908:	d516      	bpl.n	8005938 <gwinGraphDrawAxis+0x24c>
		if (ymax < 0 || ymax > (GGRAPH_ARROW_SIZE+1)) {
 800590a:	9b05      	ldr	r3, [sp, #20]
 800590c:	2b06      	cmp	r3, #6
 800590e:	d913      	bls.n	8005938 <gwinGraphDrawAxis+0x24c>
			lineto(gg, 0, ymax, GGRAPH_ARROW_SIZE, ymax-GGRAPH_ARROW_SIZE, &gg->style.yaxis);
 8005910:	9b07      	ldr	r3, [sp, #28]
 8005912:	1f9d      	subs	r5, r3, #6
 8005914:	b22d      	sxth	r5, r5
 8005916:	2305      	movs	r3, #5
 8005918:	4642      	mov	r2, r8
 800591a:	2100      	movs	r1, #0
 800591c:	4620      	mov	r0, r4
 800591e:	e88d 00a0 	stmia.w	sp, {r5, r7}
 8005922:	f7fb fc21 	bl	8001168 <lineto>
			lineto(gg, 0, ymax, -GGRAPH_ARROW_SIZE, ymax-GGRAPH_ARROW_SIZE, &gg->style.yaxis);
 8005926:	e88d 00a0 	stmia.w	sp, {r5, r7}
 800592a:	4642      	mov	r2, r8
 800592c:	f06f 0304 	mvn.w	r3, #4
 8005930:	2100      	movs	r1, #0
 8005932:	4620      	mov	r0, r4
 8005934:	f7fb fc18 	bl	8001168 <lineto>
		}
	}

	_gwinDrawEnd(gh);
 8005938:	4620      	mov	r0, r4
	#undef gg
}
 800593a:	b009      	add	sp, #36	; 0x24
 800593c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_gwinDrawEnd(gh);
 8005940:	f7fe bf52 	b.w	80047e8 <_gwinDrawEnd>
}
 8005944:	b009      	add	sp, #36	; 0x24
 8005946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800594a:	bf00      	nop
 800594c:	08007e18 	.word	0x08007e18

08005950 <gwinGraphStartSet>:

void gwinGraphStartSet(GHandle gh) {
	if (gh->vmt != &graphVMT)
 8005950:	4b04      	ldr	r3, [pc, #16]	; (8005964 <gwinGraphStartSet+0x14>)
 8005952:	6842      	ldr	r2, [r0, #4]
 8005954:	429a      	cmp	r2, r3
 8005956:	d000      	beq.n	800595a <gwinGraphStartSet+0xa>
 8005958:	4770      	bx	lr
		return;

	gh->flags &= ~GGRAPH_FLG_CONNECTPOINTS;
 800595a:	6983      	ldr	r3, [r0, #24]
 800595c:	f023 0301 	bic.w	r3, r3, #1
 8005960:	6183      	str	r3, [r0, #24]
 8005962:	4770      	bx	lr
 8005964:	08007e18 	.word	0x08007e18

08005968 <gwinGraphDrawPoint>:
}

void gwinGraphDrawPoint(GHandle gh, coord_t x, coord_t y) {
 8005968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	#define gg	((GGraphObject *)gh)

	if (gh->vmt != &graphVMT || !_gwinDrawStart(gh))
 800596c:	4d58      	ldr	r5, [pc, #352]	; (8005ad0 <gwinGraphDrawPoint+0x168>)
 800596e:	6846      	ldr	r6, [r0, #4]
 8005970:	42ae      	cmp	r6, r5
void gwinGraphDrawPoint(GHandle gh, coord_t x, coord_t y) {
 8005972:	b083      	sub	sp, #12
	if (gh->vmt != &graphVMT || !_gwinDrawStart(gh))
 8005974:	d002      	beq.n	800597c <gwinGraphDrawPoint+0x14>
	// Draw this point.
	pointto(gg, x, y, &gg->style.point);

	_gwinDrawEnd(gh);
	#undef gg
}
 8005976:	b003      	add	sp, #12
 8005978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800597c:	4604      	mov	r4, r0
 800597e:	4615      	mov	r5, r2
 8005980:	460e      	mov	r6, r1
	if (gh->vmt != &graphVMT || !_gwinDrawStart(gh))
 8005982:	f7fe ff97 	bl	80048b4 <_gwinDrawStart>
 8005986:	2800      	cmp	r0, #0
 8005988:	d0f5      	beq.n	8005976 <gwinGraphDrawPoint+0xe>
	if ((gh->flags & GGRAPH_FLG_CONNECTPOINTS)) {
 800598a:	69a3      	ldr	r3, [r4, #24]
 800598c:	07da      	lsls	r2, r3, #31
 800598e:	d43c      	bmi.n	8005a0a <gwinGraphDrawPoint+0xa2>
		gh->flags |= GGRAPH_FLG_CONNECTPOINTS;
 8005990:	f043 0301 	orr.w	r3, r3, #1
 8005994:	7f21      	ldrb	r1, [r4, #28]
 8005996:	61a3      	str	r3, [r4, #24]
	gg->lastx = x;
 8005998:	f8a4 604a 	strh.w	r6, [r4, #74]	; 0x4a
	gg->lasty = y;
 800599c:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	if (style->type == GGRAPH_POINT_NONE)
 80059a0:	b369      	cbz	r1, 80059fe <gwinGraphDrawPoint+0x96>
 80059a2:	f8b4 900c 	ldrh.w	r9, [r4, #12]
 80059a6:	f8b4 7046 	ldrh.w	r7, [r4, #70]	; 0x46
 80059aa:	89e0      	ldrh	r0, [r4, #14]
 80059ac:	f8b4 a012 	ldrh.w	sl, [r4, #18]
 80059b0:	f8b4 8048 	ldrh.w	r8, [r4, #72]	; 0x48
 80059b4:	f9b4 e01e 	ldrsh.w	lr, [r4, #30]
	y = gg->g.y + gg->g.height - 1 - gg->yorigin - y;
 80059b8:	4450      	add	r0, sl
 80059ba:	43ed      	mvns	r5, r5
 80059bc:	4405      	add	r5, r0
	x += gg->g.x + gg->xorigin;
 80059be:	444f      	add	r7, r9
	y = gg->g.y + gg->g.height - 1 - gg->yorigin - y;
 80059c0:	eba5 0508 	sub.w	r5, r5, r8
	x += gg->g.x + gg->xorigin;
 80059c4:	443e      	add	r6, r7
	y = gg->g.y + gg->g.height - 1 - gg->yorigin - y;
 80059c6:	b2ad      	uxth	r5, r5
	x += gg->g.x + gg->xorigin;
 80059c8:	b2b6      	uxth	r6, r6
	if (style->size <= 1) {
 80059ca:	f1be 0f01 	cmp.w	lr, #1
	y = gg->g.y + gg->g.height - 1 - gg->yorigin - y;
 80059ce:	b22a      	sxth	r2, r5
	x += gg->g.x + gg->xorigin;
 80059d0:	b233      	sxth	r3, r6
	if (style->size <= 1) {
 80059d2:	dd65      	ble.n	8005aa0 <gwinGraphDrawPoint+0x138>
	switch(style->type) {
 80059d4:	2902      	cmp	r1, #2
 80059d6:	d163      	bne.n	8005aa0 <gwinGraphDrawPoint+0x138>
		gdispGDrawBox(gg->g.display, x-style->size, y-style->size, 2*style->size, 2*style->size, style->color);
 80059d8:	fa1f fe8e 	uxth.w	lr, lr
 80059dc:	ea4f 034e 	mov.w	r3, lr, lsl #1
 80059e0:	b21b      	sxth	r3, r3
	if (cx <= 0 || cy <= 0) return;
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	dd0b      	ble.n	80059fe <gwinGraphDrawPoint+0x96>
 80059e6:	8c27      	ldrh	r7, [r4, #32]
 80059e8:	68a0      	ldr	r0, [r4, #8]
 80059ea:	9300      	str	r3, [sp, #0]
 80059ec:	eba5 020e 	sub.w	r2, r5, lr
 80059f0:	eba6 010e 	sub.w	r1, r6, lr
 80059f4:	b212      	sxth	r2, r2
 80059f6:	b209      	sxth	r1, r1
 80059f8:	9701      	str	r7, [sp, #4]
 80059fa:	f7fb f8df 	bl	8000bbc <gdispGDrawBox.part.6>
	_gwinDrawEnd(gh);
 80059fe:	4620      	mov	r0, r4
}
 8005a00:	b003      	add	sp, #12
 8005a02:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_gwinDrawEnd(gh);
 8005a06:	f7fe beef 	b.w	80047e8 <_gwinDrawEnd>
		lineto(gg, gg->lastx, gg->lasty, x, y, &gg->style.line);
 8005a0a:	f104 0322 	add.w	r3, r4, #34	; 0x22
 8005a0e:	f9b4 104a 	ldrsh.w	r1, [r4, #74]	; 0x4a
 8005a12:	f9b4 204c 	ldrsh.w	r2, [r4, #76]	; 0x4c
 8005a16:	9301      	str	r3, [sp, #4]
 8005a18:	9500      	str	r5, [sp, #0]
 8005a1a:	4633      	mov	r3, r6
 8005a1c:	4620      	mov	r0, r4
 8005a1e:	f7fb fba3 	bl	8001168 <lineto>
	if (style->type == GGRAPH_POINT_NONE)
 8005a22:	7f21      	ldrb	r1, [r4, #28]
 8005a24:	2900      	cmp	r1, #0
 8005a26:	d041      	beq.n	8005aac <gwinGraphDrawPoint+0x144>
	y = gg->g.y + gg->g.height - 1 - gg->yorigin - y;
 8005a28:	89e0      	ldrh	r0, [r4, #14]
 8005a2a:	f8b4 a012 	ldrh.w	sl, [r4, #18]
 8005a2e:	f8b4 8048 	ldrh.w	r8, [r4, #72]	; 0x48
	x += gg->g.x + gg->xorigin;
 8005a32:	f8b4 900c 	ldrh.w	r9, [r4, #12]
 8005a36:	f8b4 7046 	ldrh.w	r7, [r4, #70]	; 0x46
	y = gg->g.y + gg->g.height - 1 - gg->yorigin - y;
 8005a3a:	f8b4 b04c 	ldrh.w	fp, [r4, #76]	; 0x4c
	x += gg->g.x + gg->xorigin;
 8005a3e:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
	if (style->size <= 1) {
 8005a42:	f9b4 e01e 	ldrsh.w	lr, [r4, #30]
	y = gg->g.y + gg->g.height - 1 - gg->yorigin - y;
 8005a46:	eb00 0c0a 	add.w	ip, r0, sl
 8005a4a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005a4e:	ebac 0c08 	sub.w	ip, ip, r8
	x += gg->g.x + gg->xorigin;
 8005a52:	eb09 0307 	add.w	r3, r9, r7
 8005a56:	4413      	add	r3, r2
	y = gg->g.y + gg->g.height - 1 - gg->yorigin - y;
 8005a58:	ebac 0c0b 	sub.w	ip, ip, fp
 8005a5c:	fa1f fc8c 	uxth.w	ip, ip
	x += gg->g.x + gg->xorigin;
 8005a60:	fa1f fb83 	uxth.w	fp, r3
	if (style->size <= 1) {
 8005a64:	f1be 0f01 	cmp.w	lr, #1
	y = gg->g.y + gg->g.height - 1 - gg->yorigin - y;
 8005a68:	fa0f f28c 	sxth.w	r2, ip
	x += gg->g.x + gg->xorigin;
 8005a6c:	fa0f f38b 	sxth.w	r3, fp
	if (style->size <= 1) {
 8005a70:	dd21      	ble.n	8005ab6 <gwinGraphDrawPoint+0x14e>
	switch(style->type) {
 8005a72:	2902      	cmp	r1, #2
 8005a74:	d11f      	bne.n	8005ab6 <gwinGraphDrawPoint+0x14e>
		gdispGDrawBox(gg->g.display, x-style->size, y-style->size, 2*style->size, 2*style->size, style->color);
 8005a76:	fa1f f28e 	uxth.w	r2, lr
 8005a7a:	0053      	lsls	r3, r2, #1
 8005a7c:	b21b      	sxth	r3, r3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	dd20      	ble.n	8005ac4 <gwinGraphDrawPoint+0x15c>
 8005a82:	8c27      	ldrh	r7, [r4, #32]
 8005a84:	68a0      	ldr	r0, [r4, #8]
 8005a86:	9300      	str	r3, [sp, #0]
 8005a88:	ebac 0c02 	sub.w	ip, ip, r2
 8005a8c:	ebab 0102 	sub.w	r1, fp, r2
 8005a90:	b209      	sxth	r1, r1
 8005a92:	fa0f f28c 	sxth.w	r2, ip
 8005a96:	9701      	str	r7, [sp, #4]
 8005a98:	f7fb f890 	bl	8000bbc <gdispGDrawBox.part.6>
 8005a9c:	7f21      	ldrb	r1, [r4, #28]
 8005a9e:	e77b      	b.n	8005998 <gwinGraphDrawPoint+0x30>
		gdispGDrawPixel(gg->g.display, x, y, style->color);
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	68a0      	ldr	r0, [r4, #8]
 8005aa4:	8c23      	ldrh	r3, [r4, #32]
 8005aa6:	f7fc ff37 	bl	8002918 <gdispGDrawPixel>
 8005aaa:	e7a8      	b.n	80059fe <gwinGraphDrawPoint+0x96>
	gg->lastx = x;
 8005aac:	f8a4 604a 	strh.w	r6, [r4, #74]	; 0x4a
	gg->lasty = y;
 8005ab0:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
 8005ab4:	e7a3      	b.n	80059fe <gwinGraphDrawPoint+0x96>
		gdispGDrawPixel(gg->g.display, x, y, style->color);
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	68a0      	ldr	r0, [r4, #8]
 8005aba:	8c23      	ldrh	r3, [r4, #32]
 8005abc:	f7fc ff2c 	bl	8002918 <gdispGDrawPixel>
 8005ac0:	7f21      	ldrb	r1, [r4, #28]
 8005ac2:	e769      	b.n	8005998 <gwinGraphDrawPoint+0x30>
	gg->lastx = x;
 8005ac4:	f8a4 604a 	strh.w	r6, [r4, #74]	; 0x4a
	gg->lasty = y;
 8005ac8:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
 8005acc:	e774      	b.n	80059b8 <gwinGraphDrawPoint+0x50>
 8005ace:	bf00      	nop
 8005ad0:	08007e18 	.word	0x08007e18

08005ad4 <gwinGraphDrawPoints>:

void gwinGraphDrawPoints(GHandle gh, const point *points, unsigned count) {
 8005ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	#define gg	((GGraphObject *)gh)
	unsigned		i;
	const point		*p;

	if (gh->vmt != &graphVMT || !_gwinDrawStart(gh))
 8005ad8:	4b5d      	ldr	r3, [pc, #372]	; (8005c50 <gwinGraphDrawPoints+0x17c>)
 8005ada:	6846      	ldr	r6, [r0, #4]
 8005adc:	429e      	cmp	r6, r3
void gwinGraphDrawPoints(GHandle gh, const point *points, unsigned count) {
 8005ade:	b082      	sub	sp, #8
	if (gh->vmt != &graphVMT || !_gwinDrawStart(gh))
 8005ae0:	d002      	beq.n	8005ae8 <gwinGraphDrawPoints+0x14>
	for(p = points, i = 0; i < count; p++, i++)
		pointto(gg, p->x, p->y, &gg->style.point);

	_gwinDrawEnd(gh);
	#undef gg
}
 8005ae2:	b002      	add	sp, #8
 8005ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ae8:	4604      	mov	r4, r0
 8005aea:	4617      	mov	r7, r2
 8005aec:	460d      	mov	r5, r1
	if (gh->vmt != &graphVMT || !_gwinDrawStart(gh))
 8005aee:	f7fe fee1 	bl	80048b4 <_gwinDrawStart>
 8005af2:	2800      	cmp	r0, #0
 8005af4:	d0f5      	beq.n	8005ae2 <gwinGraphDrawPoints+0xe>
	for(p = points, i = 0; i < count; p++, i++) {
 8005af6:	2f00      	cmp	r7, #0
 8005af8:	d058      	beq.n	8005bac <gwinGraphDrawPoints+0xd8>
 8005afa:	46a8      	mov	r8, r5
 8005afc:	2600      	movs	r6, #0
			lineto(gg, gg->lastx, gg->lasty, p->x, p->y, &gg->style.line);
 8005afe:	f104 0922 	add.w	r9, r4, #34	; 0x22
 8005b02:	e009      	b.n	8005b18 <gwinGraphDrawPoints+0x44>
			gh->flags |= GGRAPH_FLG_CONNECTPOINTS;
 8005b04:	f043 0301 	orr.w	r3, r3, #1
 8005b08:	61a3      	str	r3, [r4, #24]
	for(p = points, i = 0; i < count; p++, i++) {
 8005b0a:	3601      	adds	r6, #1
		gg->lastx = p->x;
 8005b0c:	f858 3b04 	ldr.w	r3, [r8], #4
 8005b10:	f8c4 304a 	str.w	r3, [r4, #74]	; 0x4a
	for(p = points, i = 0; i < count; p++, i++) {
 8005b14:	42b7      	cmp	r7, r6
 8005b16:	d04f      	beq.n	8005bb8 <gwinGraphDrawPoints+0xe4>
		if ((gh->flags & GGRAPH_FLG_CONNECTPOINTS)) {
 8005b18:	69a3      	ldr	r3, [r4, #24]
 8005b1a:	07da      	lsls	r2, r3, #31
 8005b1c:	d5f2      	bpl.n	8005b04 <gwinGraphDrawPoints+0x30>
			lineto(gg, gg->lastx, gg->lasty, p->x, p->y, &gg->style.line);
 8005b1e:	f9b8 0002 	ldrsh.w	r0, [r8, #2]
 8005b22:	f935 3026 	ldrsh.w	r3, [r5, r6, lsl #2]
 8005b26:	f9b4 204c 	ldrsh.w	r2, [r4, #76]	; 0x4c
 8005b2a:	f9b4 104a 	ldrsh.w	r1, [r4, #74]	; 0x4a
 8005b2e:	e88d 0201 	stmia.w	sp, {r0, r9}
 8005b32:	4620      	mov	r0, r4
 8005b34:	f7fb fb18 	bl	8001168 <lineto>
			if (i == 0)
 8005b38:	2e00      	cmp	r6, #0
 8005b3a:	d1e6      	bne.n	8005b0a <gwinGraphDrawPoints+0x36>
	if (style->type == GGRAPH_POINT_NONE)
 8005b3c:	f894 e01c 	ldrb.w	lr, [r4, #28]
				pointto(gg, gg->lastx, gg->lasty, &gg->style.point);
 8005b40:	f9b4 204a 	ldrsh.w	r2, [r4, #74]	; 0x4a
 8005b44:	f9b4 104c 	ldrsh.w	r1, [r4, #76]	; 0x4c
	if (style->type == GGRAPH_POINT_NONE)
 8005b48:	f1be 0f00 	cmp.w	lr, #0
 8005b4c:	d0dd      	beq.n	8005b0a <gwinGraphDrawPoints+0x36>
	y = gg->g.y + gg->g.height - 1 - gg->yorigin - y;
 8005b4e:	f8b4 c012 	ldrh.w	ip, [r4, #18]
 8005b52:	89e3      	ldrh	r3, [r4, #14]
 8005b54:	f8b4 a048 	ldrh.w	sl, [r4, #72]	; 0x48
	x += gg->g.x + gg->xorigin;
 8005b58:	89a0      	ldrh	r0, [r4, #12]
	y = gg->g.y + gg->g.height - 1 - gg->yorigin - y;
 8005b5a:	4463      	add	r3, ip
	x += gg->g.x + gg->xorigin;
 8005b5c:	f8b4 c046 	ldrh.w	ip, [r4, #70]	; 0x46
	y = gg->g.y + gg->g.height - 1 - gg->yorigin - y;
 8005b60:	3b01      	subs	r3, #1
	x += gg->g.x + gg->xorigin;
 8005b62:	4460      	add	r0, ip
	y = gg->g.y + gg->g.height - 1 - gg->yorigin - y;
 8005b64:	eba3 030a 	sub.w	r3, r3, sl
	if (style->size <= 1) {
 8005b68:	f9b4 c01e 	ldrsh.w	ip, [r4, #30]
	y = gg->g.y + gg->g.height - 1 - gg->yorigin - y;
 8005b6c:	1a5b      	subs	r3, r3, r1
	x += gg->g.x + gg->xorigin;
 8005b6e:	4410      	add	r0, r2
	y = gg->g.y + gg->g.height - 1 - gg->yorigin - y;
 8005b70:	b29b      	uxth	r3, r3
	x += gg->g.x + gg->xorigin;
 8005b72:	b280      	uxth	r0, r0
	if (style->size <= 1) {
 8005b74:	f1bc 0f01 	cmp.w	ip, #1
	y = gg->g.y + gg->g.height - 1 - gg->yorigin - y;
 8005b78:	b21a      	sxth	r2, r3
	x += gg->g.x + gg->xorigin;
 8005b7a:	b201      	sxth	r1, r0
	if (style->size <= 1) {
 8005b7c:	dd63      	ble.n	8005c46 <gwinGraphDrawPoints+0x172>
	switch(style->type) {
 8005b7e:	f1be 0f02 	cmp.w	lr, #2
 8005b82:	d160      	bne.n	8005c46 <gwinGraphDrawPoints+0x172>
		gdispGDrawBox(gg->g.display, x-style->size, y-style->size, 2*style->size, 2*style->size, style->color);
 8005b84:	fa1f f28c 	uxth.w	r2, ip
 8005b88:	ea4f 0e42 	mov.w	lr, r2, lsl #1
 8005b8c:	1a81      	subs	r1, r0, r2
 8005b8e:	1a9a      	subs	r2, r3, r2
 8005b90:	fa0f f38e 	sxth.w	r3, lr
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	b209      	sxth	r1, r1
 8005b98:	b212      	sxth	r2, r2
 8005b9a:	68a0      	ldr	r0, [r4, #8]
 8005b9c:	f8b4 e020 	ldrh.w	lr, [r4, #32]
 8005ba0:	ddb3      	ble.n	8005b0a <gwinGraphDrawPoints+0x36>
 8005ba2:	e88d 4008 	stmia.w	sp, {r3, lr}
 8005ba6:	f7fb f809 	bl	8000bbc <gdispGDrawBox.part.6>
 8005baa:	e7ae      	b.n	8005b0a <gwinGraphDrawPoints+0x36>
	_gwinDrawEnd(gh);
 8005bac:	4620      	mov	r0, r4
}
 8005bae:	b002      	add	sp, #8
 8005bb0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_gwinDrawEnd(gh);
 8005bb4:	f7fe be18 	b.w	80047e8 <_gwinDrawEnd>
 8005bb8:	3504      	adds	r5, #4
	for(p = points, i = 0; i < count; p++, i++) {
 8005bba:	2700      	movs	r7, #0
 8005bbc:	e015      	b.n	8005bea <gwinGraphDrawPoints+0x116>
		gdispGDrawBox(gg->g.display, x-style->size, y-style->size, 2*style->size, 2*style->size, style->color);
 8005bbe:	eba0 0208 	sub.w	r2, r0, r8
 8005bc2:	ebae 0108 	sub.w	r1, lr, r8
 8005bc6:	f1bc 0f00 	cmp.w	ip, #0
 8005bca:	4663      	mov	r3, ip
 8005bcc:	b212      	sxth	r2, r2
 8005bce:	b209      	sxth	r1, r1
 8005bd0:	dd06      	ble.n	8005be0 <gwinGraphDrawPoints+0x10c>
 8005bd2:	f8b4 e020 	ldrh.w	lr, [r4, #32]
 8005bd6:	68a0      	ldr	r0, [r4, #8]
 8005bd8:	e88d 5000 	stmia.w	sp, {ip, lr}
 8005bdc:	f7fa ffee 	bl	8000bbc <gdispGDrawBox.part.6>
	for(p = points, i = 0; i < count; p++, i++)
 8005be0:	3701      	adds	r7, #1
 8005be2:	42be      	cmp	r6, r7
 8005be4:	f105 0504 	add.w	r5, r5, #4
 8005be8:	d0e0      	beq.n	8005bac <gwinGraphDrawPoints+0xd8>
	if (style->type == GGRAPH_POINT_NONE)
 8005bea:	7f23      	ldrb	r3, [r4, #28]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d0f7      	beq.n	8005be0 <gwinGraphDrawPoints+0x10c>
	y = gg->g.y + gg->g.height - 1 - gg->yorigin - y;
 8005bf0:	8a61      	ldrh	r1, [r4, #18]
 8005bf2:	89e0      	ldrh	r0, [r4, #14]
 8005bf4:	f8b4 8048 	ldrh.w	r8, [r4, #72]	; 0x48
	x += gg->g.x + gg->xorigin;
 8005bf8:	f8b4 c046 	ldrh.w	ip, [r4, #70]	; 0x46
 8005bfc:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
	y = gg->g.y + gg->g.height - 1 - gg->yorigin - y;
 8005c00:	f835 2c02 	ldrh.w	r2, [r5, #-2]
	if (style->size <= 1) {
 8005c04:	f9b4 901e 	ldrsh.w	r9, [r4, #30]
	y = gg->g.y + gg->g.height - 1 - gg->yorigin - y;
 8005c08:	4408      	add	r0, r1
 8005c0a:	3801      	subs	r0, #1
	x += gg->g.x + gg->xorigin;
 8005c0c:	f835 1c04 	ldrh.w	r1, [r5, #-4]
	y = gg->g.y + gg->g.height - 1 - gg->yorigin - y;
 8005c10:	eba0 0008 	sub.w	r0, r0, r8
	x += gg->g.x + gg->xorigin;
 8005c14:	44e6      	add	lr, ip
	y = gg->g.y + gg->g.height - 1 - gg->yorigin - y;
 8005c16:	1a80      	subs	r0, r0, r2
	x += gg->g.x + gg->xorigin;
 8005c18:	448e      	add	lr, r1
		gdispGDrawBox(gg->g.display, x-style->size, y-style->size, 2*style->size, 2*style->size, style->color);
 8005c1a:	fa1f f889 	uxth.w	r8, r9
 8005c1e:	ea4f 0c48 	mov.w	ip, r8, lsl #1
	y = gg->g.y + gg->g.height - 1 - gg->yorigin - y;
 8005c22:	b280      	uxth	r0, r0
	x += gg->g.x + gg->xorigin;
 8005c24:	fa1f fe8e 	uxth.w	lr, lr
	if (style->size <= 1) {
 8005c28:	f1b9 0f01 	cmp.w	r9, #1
		gdispGDrawBox(gg->g.display, x-style->size, y-style->size, 2*style->size, 2*style->size, style->color);
 8005c2c:	fa0f fc8c 	sxth.w	ip, ip
	y = gg->g.y + gg->g.height - 1 - gg->yorigin - y;
 8005c30:	b202      	sxth	r2, r0
	x += gg->g.x + gg->xorigin;
 8005c32:	fa0f f18e 	sxth.w	r1, lr
	if (style->size <= 1) {
 8005c36:	dd01      	ble.n	8005c3c <gwinGraphDrawPoints+0x168>
	switch(style->type) {
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d0c0      	beq.n	8005bbe <gwinGraphDrawPoints+0xea>
		gdispGDrawPixel(gg->g.display, x, y, style->color);
 8005c3c:	8c23      	ldrh	r3, [r4, #32]
 8005c3e:	68a0      	ldr	r0, [r4, #8]
 8005c40:	f7fc fe6a 	bl	8002918 <gdispGDrawPixel>
 8005c44:	e7cc      	b.n	8005be0 <gwinGraphDrawPoints+0x10c>
 8005c46:	8c23      	ldrh	r3, [r4, #32]
 8005c48:	68a0      	ldr	r0, [r4, #8]
 8005c4a:	f7fc fe65 	bl	8002918 <gdispGDrawPixel>
 8005c4e:	e75c      	b.n	8005b0a <gwinGraphDrawPoints+0x36>
 8005c50:	08007e18 	.word	0x08007e18

08005c54 <_gmiscInit>:
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop

08005c58 <_gmiscDeinit>:
{

}

void _gmiscDeinit(void)
{
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop

08005c5c <fsin>:
		-0.275637, -0.258819, -0.241922, -0.224951, -0.207912, -0.190809, -0.173648, -0.156434,
		-0.139173, -0.121869, -0.104528, -0.087156, -0.069756, -0.052336, -0.034899, -0.017452
		};

	double fsin(int degrees) {
		if (degrees < 0)
 8005c5c:	2800      	cmp	r0, #0
 8005c5e:	db13      	blt.n	8005c88 <fsin+0x2c>
			degrees -= (degrees/360-1)*360;
		else if (degrees >= 360)
 8005c60:	f5b0 7fb4 	cmp.w	r0, #360	; 0x168
 8005c64:	db0a      	blt.n	8005c7c <fsin+0x20>
			degrees %= 360;
 8005c66:	4b11      	ldr	r3, [pc, #68]	; (8005cac <fsin+0x50>)
 8005c68:	fb83 2300 	smull	r2, r3, r3, r0
 8005c6c:	4403      	add	r3, r0
 8005c6e:	17c2      	asrs	r2, r0, #31
 8005c70:	ebc2 2323 	rsb	r3, r2, r3, asr #8
 8005c74:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8005c78:	fb02 0013 	mls	r0, r2, r3, r0
		return sintabledouble[degrees];
 8005c7c:	4b0c      	ldr	r3, [pc, #48]	; (8005cb0 <fsin+0x54>)
 8005c7e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
	}
 8005c82:	ed90 0b36 	vldr	d0, [r0, #216]	; 0xd8
 8005c86:	4770      	bx	lr
			degrees -= (degrees/360-1)*360;
 8005c88:	4b08      	ldr	r3, [pc, #32]	; (8005cac <fsin+0x50>)
 8005c8a:	490a      	ldr	r1, [pc, #40]	; (8005cb4 <fsin+0x58>)
 8005c8c:	fb83 2300 	smull	r2, r3, r3, r0
 8005c90:	43c2      	mvns	r2, r0
 8005c92:	4403      	add	r3, r0
 8005c94:	0fd2      	lsrs	r2, r2, #31
 8005c96:	ebc2 2323 	rsb	r3, r2, r3, asr #8
 8005c9a:	fb01 0003 	mla	r0, r1, r3, r0
		return sintabledouble[degrees];
 8005c9e:	4b04      	ldr	r3, [pc, #16]	; (8005cb0 <fsin+0x54>)
 8005ca0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
	}
 8005ca4:	ed90 0b36 	vldr	d0, [r0, #216]	; 0xd8
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	b60b60b7 	.word	0xb60b60b7
 8005cb0:	08007d80 	.word	0x08007d80
 8005cb4:	fffffe98 	.word	0xfffffe98

08005cb8 <fcos>:
		if (degrees < 0)
 8005cb8:	305a      	adds	r0, #90	; 0x5a
 8005cba:	d413      	bmi.n	8005ce4 <fcos+0x2c>
		else if (degrees >= 360)
 8005cbc:	f5b0 7fb4 	cmp.w	r0, #360	; 0x168
 8005cc0:	db0a      	blt.n	8005cd8 <fcos+0x20>
			degrees %= 360;
 8005cc2:	4b11      	ldr	r3, [pc, #68]	; (8005d08 <fcos+0x50>)
 8005cc4:	fb83 2300 	smull	r2, r3, r3, r0
 8005cc8:	4403      	add	r3, r0
 8005cca:	17c2      	asrs	r2, r0, #31
 8005ccc:	ebc2 2323 	rsb	r3, r2, r3, asr #8
 8005cd0:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8005cd4:	fb02 0013 	mls	r0, r2, r3, r0
		return sintabledouble[degrees];
 8005cd8:	4b0c      	ldr	r3, [pc, #48]	; (8005d0c <fcos+0x54>)
 8005cda:	eb03 00c0 	add.w	r0, r3, r0, lsl #3

	double fcos(int degrees) {
		return fsin(degrees+90);
	}
 8005cde:	ed90 0b36 	vldr	d0, [r0, #216]	; 0xd8
 8005ce2:	4770      	bx	lr
			degrees -= (degrees/360-1)*360;
 8005ce4:	4b08      	ldr	r3, [pc, #32]	; (8005d08 <fcos+0x50>)
 8005ce6:	490a      	ldr	r1, [pc, #40]	; (8005d10 <fcos+0x58>)
 8005ce8:	fb83 2300 	smull	r2, r3, r3, r0
 8005cec:	43c2      	mvns	r2, r0
 8005cee:	4403      	add	r3, r0
 8005cf0:	0fd2      	lsrs	r2, r2, #31
 8005cf2:	ebc2 2323 	rsb	r3, r2, r3, asr #8
 8005cf6:	fb01 0003 	mla	r0, r1, r3, r0
		return sintabledouble[degrees];
 8005cfa:	4b04      	ldr	r3, [pc, #16]	; (8005d0c <fcos+0x54>)
 8005cfc:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
	}
 8005d00:	ed90 0b36 	vldr	d0, [r0, #216]	; 0xd8
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	b60b60b7 	.word	0xb60b60b7
 8005d0c:	08007d80 	.word	0x08007d80
 8005d10:	fffffe98 	.word	0xfffffe98

08005d14 <__aeabi_drsub>:
 8005d14:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8005d18:	e002      	b.n	8005d20 <__adddf3>
 8005d1a:	bf00      	nop

08005d1c <__aeabi_dsub>:
 8005d1c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08005d20 <__adddf3>:
 8005d20:	b530      	push	{r4, r5, lr}
 8005d22:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8005d26:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8005d2a:	ea94 0f05 	teq	r4, r5
 8005d2e:	bf08      	it	eq
 8005d30:	ea90 0f02 	teqeq	r0, r2
 8005d34:	bf1f      	itttt	ne
 8005d36:	ea54 0c00 	orrsne.w	ip, r4, r0
 8005d3a:	ea55 0c02 	orrsne.w	ip, r5, r2
 8005d3e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8005d42:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005d46:	f000 80e2 	beq.w	8005f0e <__adddf3+0x1ee>
 8005d4a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8005d4e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8005d52:	bfb8      	it	lt
 8005d54:	426d      	neglt	r5, r5
 8005d56:	dd0c      	ble.n	8005d72 <__adddf3+0x52>
 8005d58:	442c      	add	r4, r5
 8005d5a:	ea80 0202 	eor.w	r2, r0, r2
 8005d5e:	ea81 0303 	eor.w	r3, r1, r3
 8005d62:	ea82 0000 	eor.w	r0, r2, r0
 8005d66:	ea83 0101 	eor.w	r1, r3, r1
 8005d6a:	ea80 0202 	eor.w	r2, r0, r2
 8005d6e:	ea81 0303 	eor.w	r3, r1, r3
 8005d72:	2d36      	cmp	r5, #54	; 0x36
 8005d74:	bf88      	it	hi
 8005d76:	bd30      	pophi	{r4, r5, pc}
 8005d78:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8005d7c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8005d80:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8005d84:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8005d88:	d002      	beq.n	8005d90 <__adddf3+0x70>
 8005d8a:	4240      	negs	r0, r0
 8005d8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005d90:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8005d94:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005d98:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8005d9c:	d002      	beq.n	8005da4 <__adddf3+0x84>
 8005d9e:	4252      	negs	r2, r2
 8005da0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8005da4:	ea94 0f05 	teq	r4, r5
 8005da8:	f000 80a7 	beq.w	8005efa <__adddf3+0x1da>
 8005dac:	f1a4 0401 	sub.w	r4, r4, #1
 8005db0:	f1d5 0e20 	rsbs	lr, r5, #32
 8005db4:	db0d      	blt.n	8005dd2 <__adddf3+0xb2>
 8005db6:	fa02 fc0e 	lsl.w	ip, r2, lr
 8005dba:	fa22 f205 	lsr.w	r2, r2, r5
 8005dbe:	1880      	adds	r0, r0, r2
 8005dc0:	f141 0100 	adc.w	r1, r1, #0
 8005dc4:	fa03 f20e 	lsl.w	r2, r3, lr
 8005dc8:	1880      	adds	r0, r0, r2
 8005dca:	fa43 f305 	asr.w	r3, r3, r5
 8005dce:	4159      	adcs	r1, r3
 8005dd0:	e00e      	b.n	8005df0 <__adddf3+0xd0>
 8005dd2:	f1a5 0520 	sub.w	r5, r5, #32
 8005dd6:	f10e 0e20 	add.w	lr, lr, #32
 8005dda:	2a01      	cmp	r2, #1
 8005ddc:	fa03 fc0e 	lsl.w	ip, r3, lr
 8005de0:	bf28      	it	cs
 8005de2:	f04c 0c02 	orrcs.w	ip, ip, #2
 8005de6:	fa43 f305 	asr.w	r3, r3, r5
 8005dea:	18c0      	adds	r0, r0, r3
 8005dec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8005df0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005df4:	d507      	bpl.n	8005e06 <__adddf3+0xe6>
 8005df6:	f04f 0e00 	mov.w	lr, #0
 8005dfa:	f1dc 0c00 	rsbs	ip, ip, #0
 8005dfe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8005e02:	eb6e 0101 	sbc.w	r1, lr, r1
 8005e06:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005e0a:	d31b      	bcc.n	8005e44 <__adddf3+0x124>
 8005e0c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8005e10:	d30c      	bcc.n	8005e2c <__adddf3+0x10c>
 8005e12:	0849      	lsrs	r1, r1, #1
 8005e14:	ea5f 0030 	movs.w	r0, r0, rrx
 8005e18:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8005e1c:	f104 0401 	add.w	r4, r4, #1
 8005e20:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8005e24:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8005e28:	f080 809a 	bcs.w	8005f60 <__adddf3+0x240>
 8005e2c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8005e30:	bf08      	it	eq
 8005e32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005e36:	f150 0000 	adcs.w	r0, r0, #0
 8005e3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005e3e:	ea41 0105 	orr.w	r1, r1, r5
 8005e42:	bd30      	pop	{r4, r5, pc}
 8005e44:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8005e48:	4140      	adcs	r0, r0
 8005e4a:	eb41 0101 	adc.w	r1, r1, r1
 8005e4e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8005e52:	f1a4 0401 	sub.w	r4, r4, #1
 8005e56:	d1e9      	bne.n	8005e2c <__adddf3+0x10c>
 8005e58:	f091 0f00 	teq	r1, #0
 8005e5c:	bf04      	itt	eq
 8005e5e:	4601      	moveq	r1, r0
 8005e60:	2000      	moveq	r0, #0
 8005e62:	fab1 f381 	clz	r3, r1
 8005e66:	bf08      	it	eq
 8005e68:	3320      	addeq	r3, #32
 8005e6a:	f1a3 030b 	sub.w	r3, r3, #11
 8005e6e:	f1b3 0220 	subs.w	r2, r3, #32
 8005e72:	da0c      	bge.n	8005e8e <__adddf3+0x16e>
 8005e74:	320c      	adds	r2, #12
 8005e76:	dd08      	ble.n	8005e8a <__adddf3+0x16a>
 8005e78:	f102 0c14 	add.w	ip, r2, #20
 8005e7c:	f1c2 020c 	rsb	r2, r2, #12
 8005e80:	fa01 f00c 	lsl.w	r0, r1, ip
 8005e84:	fa21 f102 	lsr.w	r1, r1, r2
 8005e88:	e00c      	b.n	8005ea4 <__adddf3+0x184>
 8005e8a:	f102 0214 	add.w	r2, r2, #20
 8005e8e:	bfd8      	it	le
 8005e90:	f1c2 0c20 	rsble	ip, r2, #32
 8005e94:	fa01 f102 	lsl.w	r1, r1, r2
 8005e98:	fa20 fc0c 	lsr.w	ip, r0, ip
 8005e9c:	bfdc      	itt	le
 8005e9e:	ea41 010c 	orrle.w	r1, r1, ip
 8005ea2:	4090      	lslle	r0, r2
 8005ea4:	1ae4      	subs	r4, r4, r3
 8005ea6:	bfa2      	ittt	ge
 8005ea8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8005eac:	4329      	orrge	r1, r5
 8005eae:	bd30      	popge	{r4, r5, pc}
 8005eb0:	ea6f 0404 	mvn.w	r4, r4
 8005eb4:	3c1f      	subs	r4, #31
 8005eb6:	da1c      	bge.n	8005ef2 <__adddf3+0x1d2>
 8005eb8:	340c      	adds	r4, #12
 8005eba:	dc0e      	bgt.n	8005eda <__adddf3+0x1ba>
 8005ebc:	f104 0414 	add.w	r4, r4, #20
 8005ec0:	f1c4 0220 	rsb	r2, r4, #32
 8005ec4:	fa20 f004 	lsr.w	r0, r0, r4
 8005ec8:	fa01 f302 	lsl.w	r3, r1, r2
 8005ecc:	ea40 0003 	orr.w	r0, r0, r3
 8005ed0:	fa21 f304 	lsr.w	r3, r1, r4
 8005ed4:	ea45 0103 	orr.w	r1, r5, r3
 8005ed8:	bd30      	pop	{r4, r5, pc}
 8005eda:	f1c4 040c 	rsb	r4, r4, #12
 8005ede:	f1c4 0220 	rsb	r2, r4, #32
 8005ee2:	fa20 f002 	lsr.w	r0, r0, r2
 8005ee6:	fa01 f304 	lsl.w	r3, r1, r4
 8005eea:	ea40 0003 	orr.w	r0, r0, r3
 8005eee:	4629      	mov	r1, r5
 8005ef0:	bd30      	pop	{r4, r5, pc}
 8005ef2:	fa21 f004 	lsr.w	r0, r1, r4
 8005ef6:	4629      	mov	r1, r5
 8005ef8:	bd30      	pop	{r4, r5, pc}
 8005efa:	f094 0f00 	teq	r4, #0
 8005efe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8005f02:	bf06      	itte	eq
 8005f04:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8005f08:	3401      	addeq	r4, #1
 8005f0a:	3d01      	subne	r5, #1
 8005f0c:	e74e      	b.n	8005dac <__adddf3+0x8c>
 8005f0e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8005f12:	bf18      	it	ne
 8005f14:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005f18:	d029      	beq.n	8005f6e <__adddf3+0x24e>
 8005f1a:	ea94 0f05 	teq	r4, r5
 8005f1e:	bf08      	it	eq
 8005f20:	ea90 0f02 	teqeq	r0, r2
 8005f24:	d005      	beq.n	8005f32 <__adddf3+0x212>
 8005f26:	ea54 0c00 	orrs.w	ip, r4, r0
 8005f2a:	bf04      	itt	eq
 8005f2c:	4619      	moveq	r1, r3
 8005f2e:	4610      	moveq	r0, r2
 8005f30:	bd30      	pop	{r4, r5, pc}
 8005f32:	ea91 0f03 	teq	r1, r3
 8005f36:	bf1e      	ittt	ne
 8005f38:	2100      	movne	r1, #0
 8005f3a:	2000      	movne	r0, #0
 8005f3c:	bd30      	popne	{r4, r5, pc}
 8005f3e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8005f42:	d105      	bne.n	8005f50 <__adddf3+0x230>
 8005f44:	0040      	lsls	r0, r0, #1
 8005f46:	4149      	adcs	r1, r1
 8005f48:	bf28      	it	cs
 8005f4a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8005f4e:	bd30      	pop	{r4, r5, pc}
 8005f50:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8005f54:	bf3c      	itt	cc
 8005f56:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8005f5a:	bd30      	popcc	{r4, r5, pc}
 8005f5c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8005f60:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8005f64:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005f68:	f04f 0000 	mov.w	r0, #0
 8005f6c:	bd30      	pop	{r4, r5, pc}
 8005f6e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8005f72:	bf1a      	itte	ne
 8005f74:	4619      	movne	r1, r3
 8005f76:	4610      	movne	r0, r2
 8005f78:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8005f7c:	bf1c      	itt	ne
 8005f7e:	460b      	movne	r3, r1
 8005f80:	4602      	movne	r2, r0
 8005f82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8005f86:	bf06      	itte	eq
 8005f88:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8005f8c:	ea91 0f03 	teqeq	r1, r3
 8005f90:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8005f94:	bd30      	pop	{r4, r5, pc}
 8005f96:	bf00      	nop

08005f98 <__aeabi_ui2d>:
 8005f98:	f090 0f00 	teq	r0, #0
 8005f9c:	bf04      	itt	eq
 8005f9e:	2100      	moveq	r1, #0
 8005fa0:	4770      	bxeq	lr
 8005fa2:	b530      	push	{r4, r5, lr}
 8005fa4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005fa8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8005fac:	f04f 0500 	mov.w	r5, #0
 8005fb0:	f04f 0100 	mov.w	r1, #0
 8005fb4:	e750      	b.n	8005e58 <__adddf3+0x138>
 8005fb6:	bf00      	nop

08005fb8 <__aeabi_i2d>:
 8005fb8:	f090 0f00 	teq	r0, #0
 8005fbc:	bf04      	itt	eq
 8005fbe:	2100      	moveq	r1, #0
 8005fc0:	4770      	bxeq	lr
 8005fc2:	b530      	push	{r4, r5, lr}
 8005fc4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005fc8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8005fcc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8005fd0:	bf48      	it	mi
 8005fd2:	4240      	negmi	r0, r0
 8005fd4:	f04f 0100 	mov.w	r1, #0
 8005fd8:	e73e      	b.n	8005e58 <__adddf3+0x138>
 8005fda:	bf00      	nop

08005fdc <__aeabi_f2d>:
 8005fdc:	0042      	lsls	r2, r0, #1
 8005fde:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8005fe2:	ea4f 0131 	mov.w	r1, r1, rrx
 8005fe6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8005fea:	bf1f      	itttt	ne
 8005fec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8005ff0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8005ff4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8005ff8:	4770      	bxne	lr
 8005ffa:	f092 0f00 	teq	r2, #0
 8005ffe:	bf14      	ite	ne
 8006000:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8006004:	4770      	bxeq	lr
 8006006:	b530      	push	{r4, r5, lr}
 8006008:	f44f 7460 	mov.w	r4, #896	; 0x380
 800600c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006010:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006014:	e720      	b.n	8005e58 <__adddf3+0x138>
 8006016:	bf00      	nop

08006018 <__aeabi_ul2d>:
 8006018:	ea50 0201 	orrs.w	r2, r0, r1
 800601c:	bf08      	it	eq
 800601e:	4770      	bxeq	lr
 8006020:	b530      	push	{r4, r5, lr}
 8006022:	f04f 0500 	mov.w	r5, #0
 8006026:	e00a      	b.n	800603e <__aeabi_l2d+0x16>

08006028 <__aeabi_l2d>:
 8006028:	ea50 0201 	orrs.w	r2, r0, r1
 800602c:	bf08      	it	eq
 800602e:	4770      	bxeq	lr
 8006030:	b530      	push	{r4, r5, lr}
 8006032:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8006036:	d502      	bpl.n	800603e <__aeabi_l2d+0x16>
 8006038:	4240      	negs	r0, r0
 800603a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800603e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006042:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006046:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800604a:	f43f aedc 	beq.w	8005e06 <__adddf3+0xe6>
 800604e:	f04f 0203 	mov.w	r2, #3
 8006052:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8006056:	bf18      	it	ne
 8006058:	3203      	addne	r2, #3
 800605a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800605e:	bf18      	it	ne
 8006060:	3203      	addne	r2, #3
 8006062:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8006066:	f1c2 0320 	rsb	r3, r2, #32
 800606a:	fa00 fc03 	lsl.w	ip, r0, r3
 800606e:	fa20 f002 	lsr.w	r0, r0, r2
 8006072:	fa01 fe03 	lsl.w	lr, r1, r3
 8006076:	ea40 000e 	orr.w	r0, r0, lr
 800607a:	fa21 f102 	lsr.w	r1, r1, r2
 800607e:	4414      	add	r4, r2
 8006080:	e6c1      	b.n	8005e06 <__adddf3+0xe6>
 8006082:	bf00      	nop

08006084 <__aeabi_dmul>:
 8006084:	b570      	push	{r4, r5, r6, lr}
 8006086:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800608a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800608e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8006092:	bf1d      	ittte	ne
 8006094:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8006098:	ea94 0f0c 	teqne	r4, ip
 800609c:	ea95 0f0c 	teqne	r5, ip
 80060a0:	f000 f8de 	bleq	8006260 <__aeabi_dmul+0x1dc>
 80060a4:	442c      	add	r4, r5
 80060a6:	ea81 0603 	eor.w	r6, r1, r3
 80060aa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80060ae:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80060b2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80060b6:	bf18      	it	ne
 80060b8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80060bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80060c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060c4:	d038      	beq.n	8006138 <__aeabi_dmul+0xb4>
 80060c6:	fba0 ce02 	umull	ip, lr, r0, r2
 80060ca:	f04f 0500 	mov.w	r5, #0
 80060ce:	fbe1 e502 	umlal	lr, r5, r1, r2
 80060d2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80060d6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80060da:	f04f 0600 	mov.w	r6, #0
 80060de:	fbe1 5603 	umlal	r5, r6, r1, r3
 80060e2:	f09c 0f00 	teq	ip, #0
 80060e6:	bf18      	it	ne
 80060e8:	f04e 0e01 	orrne.w	lr, lr, #1
 80060ec:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80060f0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80060f4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80060f8:	d204      	bcs.n	8006104 <__aeabi_dmul+0x80>
 80060fa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80060fe:	416d      	adcs	r5, r5
 8006100:	eb46 0606 	adc.w	r6, r6, r6
 8006104:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8006108:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800610c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8006110:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8006114:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8006118:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800611c:	bf88      	it	hi
 800611e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8006122:	d81e      	bhi.n	8006162 <__aeabi_dmul+0xde>
 8006124:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8006128:	bf08      	it	eq
 800612a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800612e:	f150 0000 	adcs.w	r0, r0, #0
 8006132:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006136:	bd70      	pop	{r4, r5, r6, pc}
 8006138:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800613c:	ea46 0101 	orr.w	r1, r6, r1
 8006140:	ea40 0002 	orr.w	r0, r0, r2
 8006144:	ea81 0103 	eor.w	r1, r1, r3
 8006148:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800614c:	bfc2      	ittt	gt
 800614e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8006152:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8006156:	bd70      	popgt	{r4, r5, r6, pc}
 8006158:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800615c:	f04f 0e00 	mov.w	lr, #0
 8006160:	3c01      	subs	r4, #1
 8006162:	f300 80ab 	bgt.w	80062bc <__aeabi_dmul+0x238>
 8006166:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800616a:	bfde      	ittt	le
 800616c:	2000      	movle	r0, #0
 800616e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8006172:	bd70      	pople	{r4, r5, r6, pc}
 8006174:	f1c4 0400 	rsb	r4, r4, #0
 8006178:	3c20      	subs	r4, #32
 800617a:	da35      	bge.n	80061e8 <__aeabi_dmul+0x164>
 800617c:	340c      	adds	r4, #12
 800617e:	dc1b      	bgt.n	80061b8 <__aeabi_dmul+0x134>
 8006180:	f104 0414 	add.w	r4, r4, #20
 8006184:	f1c4 0520 	rsb	r5, r4, #32
 8006188:	fa00 f305 	lsl.w	r3, r0, r5
 800618c:	fa20 f004 	lsr.w	r0, r0, r4
 8006190:	fa01 f205 	lsl.w	r2, r1, r5
 8006194:	ea40 0002 	orr.w	r0, r0, r2
 8006198:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800619c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80061a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80061a4:	fa21 f604 	lsr.w	r6, r1, r4
 80061a8:	eb42 0106 	adc.w	r1, r2, r6
 80061ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80061b0:	bf08      	it	eq
 80061b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80061b6:	bd70      	pop	{r4, r5, r6, pc}
 80061b8:	f1c4 040c 	rsb	r4, r4, #12
 80061bc:	f1c4 0520 	rsb	r5, r4, #32
 80061c0:	fa00 f304 	lsl.w	r3, r0, r4
 80061c4:	fa20 f005 	lsr.w	r0, r0, r5
 80061c8:	fa01 f204 	lsl.w	r2, r1, r4
 80061cc:	ea40 0002 	orr.w	r0, r0, r2
 80061d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80061d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80061d8:	f141 0100 	adc.w	r1, r1, #0
 80061dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80061e0:	bf08      	it	eq
 80061e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80061e6:	bd70      	pop	{r4, r5, r6, pc}
 80061e8:	f1c4 0520 	rsb	r5, r4, #32
 80061ec:	fa00 f205 	lsl.w	r2, r0, r5
 80061f0:	ea4e 0e02 	orr.w	lr, lr, r2
 80061f4:	fa20 f304 	lsr.w	r3, r0, r4
 80061f8:	fa01 f205 	lsl.w	r2, r1, r5
 80061fc:	ea43 0302 	orr.w	r3, r3, r2
 8006200:	fa21 f004 	lsr.w	r0, r1, r4
 8006204:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006208:	fa21 f204 	lsr.w	r2, r1, r4
 800620c:	ea20 0002 	bic.w	r0, r0, r2
 8006210:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8006214:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006218:	bf08      	it	eq
 800621a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800621e:	bd70      	pop	{r4, r5, r6, pc}
 8006220:	f094 0f00 	teq	r4, #0
 8006224:	d10f      	bne.n	8006246 <__aeabi_dmul+0x1c2>
 8006226:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800622a:	0040      	lsls	r0, r0, #1
 800622c:	eb41 0101 	adc.w	r1, r1, r1
 8006230:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006234:	bf08      	it	eq
 8006236:	3c01      	subeq	r4, #1
 8006238:	d0f7      	beq.n	800622a <__aeabi_dmul+0x1a6>
 800623a:	ea41 0106 	orr.w	r1, r1, r6
 800623e:	f095 0f00 	teq	r5, #0
 8006242:	bf18      	it	ne
 8006244:	4770      	bxne	lr
 8006246:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800624a:	0052      	lsls	r2, r2, #1
 800624c:	eb43 0303 	adc.w	r3, r3, r3
 8006250:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8006254:	bf08      	it	eq
 8006256:	3d01      	subeq	r5, #1
 8006258:	d0f7      	beq.n	800624a <__aeabi_dmul+0x1c6>
 800625a:	ea43 0306 	orr.w	r3, r3, r6
 800625e:	4770      	bx	lr
 8006260:	ea94 0f0c 	teq	r4, ip
 8006264:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8006268:	bf18      	it	ne
 800626a:	ea95 0f0c 	teqne	r5, ip
 800626e:	d00c      	beq.n	800628a <__aeabi_dmul+0x206>
 8006270:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006274:	bf18      	it	ne
 8006276:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800627a:	d1d1      	bne.n	8006220 <__aeabi_dmul+0x19c>
 800627c:	ea81 0103 	eor.w	r1, r1, r3
 8006280:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006284:	f04f 0000 	mov.w	r0, #0
 8006288:	bd70      	pop	{r4, r5, r6, pc}
 800628a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800628e:	bf06      	itte	eq
 8006290:	4610      	moveq	r0, r2
 8006292:	4619      	moveq	r1, r3
 8006294:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006298:	d019      	beq.n	80062ce <__aeabi_dmul+0x24a>
 800629a:	ea94 0f0c 	teq	r4, ip
 800629e:	d102      	bne.n	80062a6 <__aeabi_dmul+0x222>
 80062a0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80062a4:	d113      	bne.n	80062ce <__aeabi_dmul+0x24a>
 80062a6:	ea95 0f0c 	teq	r5, ip
 80062aa:	d105      	bne.n	80062b8 <__aeabi_dmul+0x234>
 80062ac:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80062b0:	bf1c      	itt	ne
 80062b2:	4610      	movne	r0, r2
 80062b4:	4619      	movne	r1, r3
 80062b6:	d10a      	bne.n	80062ce <__aeabi_dmul+0x24a>
 80062b8:	ea81 0103 	eor.w	r1, r1, r3
 80062bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80062c0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80062c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80062c8:	f04f 0000 	mov.w	r0, #0
 80062cc:	bd70      	pop	{r4, r5, r6, pc}
 80062ce:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80062d2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80062d6:	bd70      	pop	{r4, r5, r6, pc}

080062d8 <__aeabi_ddiv>:
 80062d8:	b570      	push	{r4, r5, r6, lr}
 80062da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80062de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80062e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80062e6:	bf1d      	ittte	ne
 80062e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80062ec:	ea94 0f0c 	teqne	r4, ip
 80062f0:	ea95 0f0c 	teqne	r5, ip
 80062f4:	f000 f8a7 	bleq	8006446 <__aeabi_ddiv+0x16e>
 80062f8:	eba4 0405 	sub.w	r4, r4, r5
 80062fc:	ea81 0e03 	eor.w	lr, r1, r3
 8006300:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8006304:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8006308:	f000 8088 	beq.w	800641c <__aeabi_ddiv+0x144>
 800630c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006310:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8006314:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8006318:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800631c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8006320:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8006324:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8006328:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800632c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8006330:	429d      	cmp	r5, r3
 8006332:	bf08      	it	eq
 8006334:	4296      	cmpeq	r6, r2
 8006336:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800633a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800633e:	d202      	bcs.n	8006346 <__aeabi_ddiv+0x6e>
 8006340:	085b      	lsrs	r3, r3, #1
 8006342:	ea4f 0232 	mov.w	r2, r2, rrx
 8006346:	1ab6      	subs	r6, r6, r2
 8006348:	eb65 0503 	sbc.w	r5, r5, r3
 800634c:	085b      	lsrs	r3, r3, #1
 800634e:	ea4f 0232 	mov.w	r2, r2, rrx
 8006352:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006356:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800635a:	ebb6 0e02 	subs.w	lr, r6, r2
 800635e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006362:	bf22      	ittt	cs
 8006364:	1ab6      	subcs	r6, r6, r2
 8006366:	4675      	movcs	r5, lr
 8006368:	ea40 000c 	orrcs.w	r0, r0, ip
 800636c:	085b      	lsrs	r3, r3, #1
 800636e:	ea4f 0232 	mov.w	r2, r2, rrx
 8006372:	ebb6 0e02 	subs.w	lr, r6, r2
 8006376:	eb75 0e03 	sbcs.w	lr, r5, r3
 800637a:	bf22      	ittt	cs
 800637c:	1ab6      	subcs	r6, r6, r2
 800637e:	4675      	movcs	r5, lr
 8006380:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8006384:	085b      	lsrs	r3, r3, #1
 8006386:	ea4f 0232 	mov.w	r2, r2, rrx
 800638a:	ebb6 0e02 	subs.w	lr, r6, r2
 800638e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006392:	bf22      	ittt	cs
 8006394:	1ab6      	subcs	r6, r6, r2
 8006396:	4675      	movcs	r5, lr
 8006398:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800639c:	085b      	lsrs	r3, r3, #1
 800639e:	ea4f 0232 	mov.w	r2, r2, rrx
 80063a2:	ebb6 0e02 	subs.w	lr, r6, r2
 80063a6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80063aa:	bf22      	ittt	cs
 80063ac:	1ab6      	subcs	r6, r6, r2
 80063ae:	4675      	movcs	r5, lr
 80063b0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80063b4:	ea55 0e06 	orrs.w	lr, r5, r6
 80063b8:	d018      	beq.n	80063ec <__aeabi_ddiv+0x114>
 80063ba:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80063be:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80063c2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80063c6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80063ca:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80063ce:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80063d2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80063d6:	d1c0      	bne.n	800635a <__aeabi_ddiv+0x82>
 80063d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80063dc:	d10b      	bne.n	80063f6 <__aeabi_ddiv+0x11e>
 80063de:	ea41 0100 	orr.w	r1, r1, r0
 80063e2:	f04f 0000 	mov.w	r0, #0
 80063e6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80063ea:	e7b6      	b.n	800635a <__aeabi_ddiv+0x82>
 80063ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80063f0:	bf04      	itt	eq
 80063f2:	4301      	orreq	r1, r0
 80063f4:	2000      	moveq	r0, #0
 80063f6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80063fa:	bf88      	it	hi
 80063fc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8006400:	f63f aeaf 	bhi.w	8006162 <__aeabi_dmul+0xde>
 8006404:	ebb5 0c03 	subs.w	ip, r5, r3
 8006408:	bf04      	itt	eq
 800640a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800640e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006412:	f150 0000 	adcs.w	r0, r0, #0
 8006416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800641a:	bd70      	pop	{r4, r5, r6, pc}
 800641c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8006420:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8006424:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8006428:	bfc2      	ittt	gt
 800642a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800642e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8006432:	bd70      	popgt	{r4, r5, r6, pc}
 8006434:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006438:	f04f 0e00 	mov.w	lr, #0
 800643c:	3c01      	subs	r4, #1
 800643e:	e690      	b.n	8006162 <__aeabi_dmul+0xde>
 8006440:	ea45 0e06 	orr.w	lr, r5, r6
 8006444:	e68d      	b.n	8006162 <__aeabi_dmul+0xde>
 8006446:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800644a:	ea94 0f0c 	teq	r4, ip
 800644e:	bf08      	it	eq
 8006450:	ea95 0f0c 	teqeq	r5, ip
 8006454:	f43f af3b 	beq.w	80062ce <__aeabi_dmul+0x24a>
 8006458:	ea94 0f0c 	teq	r4, ip
 800645c:	d10a      	bne.n	8006474 <__aeabi_ddiv+0x19c>
 800645e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8006462:	f47f af34 	bne.w	80062ce <__aeabi_dmul+0x24a>
 8006466:	ea95 0f0c 	teq	r5, ip
 800646a:	f47f af25 	bne.w	80062b8 <__aeabi_dmul+0x234>
 800646e:	4610      	mov	r0, r2
 8006470:	4619      	mov	r1, r3
 8006472:	e72c      	b.n	80062ce <__aeabi_dmul+0x24a>
 8006474:	ea95 0f0c 	teq	r5, ip
 8006478:	d106      	bne.n	8006488 <__aeabi_ddiv+0x1b0>
 800647a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800647e:	f43f aefd 	beq.w	800627c <__aeabi_dmul+0x1f8>
 8006482:	4610      	mov	r0, r2
 8006484:	4619      	mov	r1, r3
 8006486:	e722      	b.n	80062ce <__aeabi_dmul+0x24a>
 8006488:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800648c:	bf18      	it	ne
 800648e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006492:	f47f aec5 	bne.w	8006220 <__aeabi_dmul+0x19c>
 8006496:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800649a:	f47f af0d 	bne.w	80062b8 <__aeabi_dmul+0x234>
 800649e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80064a2:	f47f aeeb 	bne.w	800627c <__aeabi_dmul+0x1f8>
 80064a6:	e712      	b.n	80062ce <__aeabi_dmul+0x24a>

080064a8 <__gedf2>:
 80064a8:	f04f 3cff 	mov.w	ip, #4294967295
 80064ac:	e006      	b.n	80064bc <__cmpdf2+0x4>
 80064ae:	bf00      	nop

080064b0 <__ledf2>:
 80064b0:	f04f 0c01 	mov.w	ip, #1
 80064b4:	e002      	b.n	80064bc <__cmpdf2+0x4>
 80064b6:	bf00      	nop

080064b8 <__cmpdf2>:
 80064b8:	f04f 0c01 	mov.w	ip, #1
 80064bc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80064c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80064c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80064c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80064cc:	bf18      	it	ne
 80064ce:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80064d2:	d01b      	beq.n	800650c <__cmpdf2+0x54>
 80064d4:	b001      	add	sp, #4
 80064d6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80064da:	bf0c      	ite	eq
 80064dc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80064e0:	ea91 0f03 	teqne	r1, r3
 80064e4:	bf02      	ittt	eq
 80064e6:	ea90 0f02 	teqeq	r0, r2
 80064ea:	2000      	moveq	r0, #0
 80064ec:	4770      	bxeq	lr
 80064ee:	f110 0f00 	cmn.w	r0, #0
 80064f2:	ea91 0f03 	teq	r1, r3
 80064f6:	bf58      	it	pl
 80064f8:	4299      	cmppl	r1, r3
 80064fa:	bf08      	it	eq
 80064fc:	4290      	cmpeq	r0, r2
 80064fe:	bf2c      	ite	cs
 8006500:	17d8      	asrcs	r0, r3, #31
 8006502:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8006506:	f040 0001 	orr.w	r0, r0, #1
 800650a:	4770      	bx	lr
 800650c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006510:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006514:	d102      	bne.n	800651c <__cmpdf2+0x64>
 8006516:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800651a:	d107      	bne.n	800652c <__cmpdf2+0x74>
 800651c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006520:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006524:	d1d6      	bne.n	80064d4 <__cmpdf2+0x1c>
 8006526:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800652a:	d0d3      	beq.n	80064d4 <__cmpdf2+0x1c>
 800652c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop

08006534 <__aeabi_cdrcmple>:
 8006534:	4684      	mov	ip, r0
 8006536:	4610      	mov	r0, r2
 8006538:	4662      	mov	r2, ip
 800653a:	468c      	mov	ip, r1
 800653c:	4619      	mov	r1, r3
 800653e:	4663      	mov	r3, ip
 8006540:	e000      	b.n	8006544 <__aeabi_cdcmpeq>
 8006542:	bf00      	nop

08006544 <__aeabi_cdcmpeq>:
 8006544:	b501      	push	{r0, lr}
 8006546:	f7ff ffb7 	bl	80064b8 <__cmpdf2>
 800654a:	2800      	cmp	r0, #0
 800654c:	bf48      	it	mi
 800654e:	f110 0f00 	cmnmi.w	r0, #0
 8006552:	bd01      	pop	{r0, pc}

08006554 <__aeabi_dcmpeq>:
 8006554:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006558:	f7ff fff4 	bl	8006544 <__aeabi_cdcmpeq>
 800655c:	bf0c      	ite	eq
 800655e:	2001      	moveq	r0, #1
 8006560:	2000      	movne	r0, #0
 8006562:	f85d fb08 	ldr.w	pc, [sp], #8
 8006566:	bf00      	nop

08006568 <__aeabi_dcmplt>:
 8006568:	f84d ed08 	str.w	lr, [sp, #-8]!
 800656c:	f7ff ffea 	bl	8006544 <__aeabi_cdcmpeq>
 8006570:	bf34      	ite	cc
 8006572:	2001      	movcc	r0, #1
 8006574:	2000      	movcs	r0, #0
 8006576:	f85d fb08 	ldr.w	pc, [sp], #8
 800657a:	bf00      	nop

0800657c <__aeabi_dcmple>:
 800657c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006580:	f7ff ffe0 	bl	8006544 <__aeabi_cdcmpeq>
 8006584:	bf94      	ite	ls
 8006586:	2001      	movls	r0, #1
 8006588:	2000      	movhi	r0, #0
 800658a:	f85d fb08 	ldr.w	pc, [sp], #8
 800658e:	bf00      	nop

08006590 <__aeabi_dcmpge>:
 8006590:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006594:	f7ff ffce 	bl	8006534 <__aeabi_cdrcmple>
 8006598:	bf94      	ite	ls
 800659a:	2001      	movls	r0, #1
 800659c:	2000      	movhi	r0, #0
 800659e:	f85d fb08 	ldr.w	pc, [sp], #8
 80065a2:	bf00      	nop

080065a4 <__aeabi_dcmpgt>:
 80065a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80065a8:	f7ff ffc4 	bl	8006534 <__aeabi_cdrcmple>
 80065ac:	bf34      	ite	cc
 80065ae:	2001      	movcc	r0, #1
 80065b0:	2000      	movcs	r0, #0
 80065b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80065b6:	bf00      	nop

080065b8 <__aeabi_d2iz>:
 80065b8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80065bc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80065c0:	d215      	bcs.n	80065ee <__aeabi_d2iz+0x36>
 80065c2:	d511      	bpl.n	80065e8 <__aeabi_d2iz+0x30>
 80065c4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80065c8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80065cc:	d912      	bls.n	80065f4 <__aeabi_d2iz+0x3c>
 80065ce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80065d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065d6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80065da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80065de:	fa23 f002 	lsr.w	r0, r3, r2
 80065e2:	bf18      	it	ne
 80065e4:	4240      	negne	r0, r0
 80065e6:	4770      	bx	lr
 80065e8:	f04f 0000 	mov.w	r0, #0
 80065ec:	4770      	bx	lr
 80065ee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80065f2:	d105      	bne.n	8006600 <__aeabi_d2iz+0x48>
 80065f4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80065f8:	bf08      	it	eq
 80065fa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80065fe:	4770      	bx	lr
 8006600:	f04f 0000 	mov.w	r0, #0
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop

08006608 <main>:
{
 8006608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800660c:	b084      	sub	sp, #16
	clockConfig();
 800660e:	f7f9 fddb 	bl	80001c8 <clockConfig>
	SystemCoreClockUpdate();
 8006612:	f7f9 fe9d 	bl	8000350 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/1000);
 8006616:	4b7c      	ldr	r3, [pc, #496]	; (8006808 <main+0x200>)
 8006618:	4a7c      	ldr	r2, [pc, #496]	; (800680c <main+0x204>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	fba2 2303 	umull	r2, r3, r2, r3
 8006620:	099b      	lsrs	r3, r3, #6
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006622:	3b01      	subs	r3, #1
 8006624:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006628:	d209      	bcs.n	800663e <main+0x36>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800662a:	4a79      	ldr	r2, [pc, #484]	; (8006810 <main+0x208>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800662c:	4879      	ldr	r0, [pc, #484]	; (8006814 <main+0x20c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800662e:	6053      	str	r3, [r2, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006630:	24f0      	movs	r4, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006632:	2100      	movs	r1, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006634:	2307      	movs	r3, #7
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006636:	f880 4023 	strb.w	r4, [r0, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800663a:	6091      	str	r1, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800663c:	6013      	str	r3, [r2, #0]
	initFSMC();
 800663e:	f7f9 fe07 	bl	8000250 <initFSMC>
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8006642:	4a75      	ldr	r2, [pc, #468]	; (8006818 <main+0x210>)
    GPIOA->MODER |= GPIO_MODER_MODER7_0 | GPIO_MODER_MODER6_0;
 8006644:	4b75      	ldr	r3, [pc, #468]	; (800681c <main+0x214>)
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8006646:	6b11      	ldr	r1, [r2, #48]	; 0x30
        wi.width = gdispGetWidth();
 8006648:	4c75      	ldr	r4, [pc, #468]	; (8006820 <main+0x218>)
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 800664a:	f041 0101 	orr.w	r1, r1, #1
 800664e:	6311      	str	r1, [r2, #48]	; 0x30
    GPIOA->MODER |= GPIO_MODER_MODER7_0 | GPIO_MODER_MODER6_0;
 8006650:	6819      	ldr	r1, [r3, #0]
 8006652:	f441 41a0 	orr.w	r1, r1, #20480	; 0x5000
 8006656:	6019      	str	r1, [r3, #0]
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8006658:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800665a:	f041 0101 	orr.w	r1, r1, #1
 800665e:	6311      	str	r1, [r2, #48]	; 0x30
	GPIOA->MODER |= GPIO_MODER_MODER5_0;
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006666:	601a      	str	r2, [r3, #0]
    GPIOA->OSPEEDR |= GPIO_OSPEEDR_OSPEED5;
 8006668:	689a      	ldr	r2, [r3, #8]
 800666a:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
 800666e:	609a      	str	r2, [r3, #8]
    GPIOA->BSRR |= GPIO_BSRR_BS5; //Set to logic one
 8006670:	699a      	ldr	r2, [r3, #24]
 8006672:	f042 0220 	orr.w	r2, r2, #32
 8006676:	619a      	str	r2, [r3, #24]
    gfxInit();
 8006678:	f7fb ff16 	bl	80024a8 <gfxInit>
        wi.x = wi.y = 0;
 800667c:	2500      	movs	r5, #0
        wi.show = TRUE;
 800667e:	23ff      	movs	r3, #255	; 0xff
        wi.width = gdispGetWidth();
 8006680:	6820      	ldr	r0, [r4, #0]
        wi.show = TRUE;
 8006682:	f88d 300c 	strb.w	r3, [sp, #12]
        wi.x = wi.y = 0;
 8006686:	9501      	str	r5, [sp, #4]
        wi.width = gdispGetWidth();
 8006688:	f7fc f934 	bl	80028f4 <gdispGGetWidth>
 800668c:	f8ad 0008 	strh.w	r0, [sp, #8]
        wi.height = gdispGetHeight();
 8006690:	6820      	ldr	r0, [r4, #0]
 8006692:	f7fc f933 	bl	80028fc <gdispGGetHeight>
        gh = gwinGraphCreate(0, &wi);
 8006696:	4629      	mov	r1, r5
        wi.height = gdispGetHeight();
 8006698:	f8ad 000a 	strh.w	r0, [sp, #10]
        gh = gwinGraphCreate(0, &wi);
 800669c:	aa01      	add	r2, sp, #4
 800669e:	6820      	ldr	r0, [r4, #0]
 80066a0:	f7fe fecc 	bl	800543c <gwinGGraphCreate>
    gwinGraphSetOrigin(gh, gwinGetWidth(gh)/2, gwinGetHeight(gh)/2);
 80066a4:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
 80066a8:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
 80066ac:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 80066b0:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
        gh = gwinGraphCreate(0, &wi);
 80066b4:	4604      	mov	r4, r0
    gwinGraphSetOrigin(gh, gwinGetWidth(gh)/2, gwinGetHeight(gh)/2);
 80066b6:	1052      	asrs	r2, r2, #1
 80066b8:	1049      	asrs	r1, r1, #1
 80066ba:	f7ff f809 	bl	80056d0 <gwinGraphSetOrigin>
    gwinGraphSetStyle(gh, &GraphStyle1);
 80066be:	4620      	mov	r0, r4
 80066c0:	4958      	ldr	r1, [pc, #352]	; (8006824 <main+0x21c>)
 80066c2:	f7fe ffcd 	bl	8005660 <gwinGraphSetStyle>
    gwinGraphDrawAxis(gh);
 80066c6:	4620      	mov	r0, r4
 80066c8:	f7ff f810 	bl	80056ec <gwinGraphDrawAxis>
    for(i = 0; i < gwinGetWidth(gh); i++) {
 80066cc:	f9b4 a010 	ldrsh.w	sl, [r4, #16]
 80066d0:	45aa      	cmp	sl, r5
 80066d2:	dd2f      	ble.n	8006734 <main+0x12c>
 80066d4:	2000      	movs	r0, #0
 80066d6:	2100      	movs	r1, #0
        gwinGraphDrawPoint(gh, i-gwinGetWidth(gh)/2, 80*sin(2*0.2*M_PI*i/180));
 80066d8:	f04f 0800 	mov.w	r8, #0
 80066dc:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8006838 <main+0x230>
 80066e0:	a745      	add	r7, pc, #276	; (adr r7, 80067f8 <main+0x1f0>)
 80066e2:	e9d7 6700 	ldrd	r6, r7, [r7]
 80066e6:	e00f      	b.n	8006708 <main+0x100>
 80066e8:	f7ff fc66 	bl	8005fb8 <__aeabi_i2d>
 80066ec:	4632      	mov	r2, r6
 80066ee:	463b      	mov	r3, r7
 80066f0:	f7ff fcc8 	bl	8006084 <__aeabi_dmul>
 80066f4:	2200      	movs	r2, #0
 80066f6:	4b4c      	ldr	r3, [pc, #304]	; (8006828 <main+0x220>)
 80066f8:	f7ff fdee 	bl	80062d8 <__aeabi_ddiv>
 80066fc:	ec41 0b10 	vmov	d0, r0, r1
 8006700:	f000 fa82 	bl	8006c08 <sin>
 8006704:	ec51 0b10 	vmov	r0, r1, d0
 8006708:	4642      	mov	r2, r8
 800670a:	464b      	mov	r3, r9
 800670c:	f7ff fcba 	bl	8006084 <__aeabi_dmul>
 8006710:	f7ff ff52 	bl	80065b8 <__aeabi_d2iz>
 8006714:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
 8006718:	eba5 016a 	sub.w	r1, r5, sl, asr #1
 800671c:	b202      	sxth	r2, r0
 800671e:	b209      	sxth	r1, r1
 8006720:	4620      	mov	r0, r4
 8006722:	f7ff f921 	bl	8005968 <gwinGraphDrawPoint>
    for(i = 0; i < gwinGetWidth(gh); i++) {
 8006726:	3501      	adds	r5, #1
 8006728:	f9b4 a010 	ldrsh.w	sl, [r4, #16]
 800672c:	b2ad      	uxth	r5, r5
 800672e:	4555      	cmp	r5, sl
 8006730:	4628      	mov	r0, r5
 8006732:	dbd9      	blt.n	80066e8 <main+0xe0>
    gwinGraphStartSet(gh);
 8006734:	4620      	mov	r0, r4
 8006736:	f7ff f90b 	bl	8005950 <gwinGraphStartSet>
    GraphStyle1.point.color = Green;
 800673a:	4b3a      	ldr	r3, [pc, #232]	; (8006824 <main+0x21c>)
 800673c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    gwinGraphSetStyle(gh, &GraphStyle1);
 8006740:	4619      	mov	r1, r3
 8006742:	4620      	mov	r0, r4
    GraphStyle1.point.color = Green;
 8006744:	809a      	strh	r2, [r3, #4]
    gwinGraphSetStyle(gh, &GraphStyle1);
 8006746:	f7fe ff8b 	bl	8005660 <gwinGraphSetStyle>
    for(i = 0; i < gwinGetWidth(gh)*5; i++) {
 800674a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
 800674e:	2d00      	cmp	r5, #0
 8006750:	dd39      	ble.n	80067c6 <main+0x1be>
 8006752:	2000      	movs	r0, #0
 8006754:	2100      	movs	r1, #0
 8006756:	f04f 0a00 	mov.w	sl, #0
        gwinGraphDrawPoint(gh, i/5-gwinGetWidth(gh)/2, 95*sin(2*0.2*M_PI*i/180));
 800675a:	f20f 09a4 	addw	r9, pc, #164	; 0xa4
 800675e:	e9d9 8900 	ldrd	r8, r9, [r9]
 8006762:	a725      	add	r7, pc, #148	; (adr r7, 80067f8 <main+0x1f0>)
 8006764:	e9d7 6700 	ldrd	r6, r7, [r7]
 8006768:	e00f      	b.n	800678a <main+0x182>
 800676a:	f7ff fc25 	bl	8005fb8 <__aeabi_i2d>
 800676e:	4632      	mov	r2, r6
 8006770:	463b      	mov	r3, r7
 8006772:	f7ff fc87 	bl	8006084 <__aeabi_dmul>
 8006776:	2200      	movs	r2, #0
 8006778:	4b2b      	ldr	r3, [pc, #172]	; (8006828 <main+0x220>)
 800677a:	f7ff fdad 	bl	80062d8 <__aeabi_ddiv>
 800677e:	ec41 0b10 	vmov	d0, r0, r1
 8006782:	f000 fa41 	bl	8006c08 <sin>
 8006786:	ec51 0b10 	vmov	r0, r1, d0
 800678a:	4642      	mov	r2, r8
 800678c:	464b      	mov	r3, r9
 800678e:	f7ff fc79 	bl	8006084 <__aeabi_dmul>
 8006792:	f7ff ff11 	bl	80065b8 <__aeabi_d2iz>
 8006796:	4b25      	ldr	r3, [pc, #148]	; (800682c <main+0x224>)
 8006798:	eb05 71d5 	add.w	r1, r5, r5, lsr #31
 800679c:	fba3 230a 	umull	r2, r3, r3, sl
 80067a0:	1049      	asrs	r1, r1, #1
 80067a2:	ebc1 0193 	rsb	r1, r1, r3, lsr #2
 80067a6:	b202      	sxth	r2, r0
 80067a8:	b209      	sxth	r1, r1
 80067aa:	4620      	mov	r0, r4
 80067ac:	f7ff f8dc 	bl	8005968 <gwinGraphDrawPoint>
    for(i = 0; i < gwinGetWidth(gh)*5; i++) {
 80067b0:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
 80067b4:	f10a 0a01 	add.w	sl, sl, #1
 80067b8:	fa1f fa8a 	uxth.w	sl, sl
 80067bc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80067c0:	459a      	cmp	sl, r3
 80067c2:	4650      	mov	r0, sl
 80067c4:	dbd1      	blt.n	800676a <main+0x162>
    gwinGraphStartSet(gh);
 80067c6:	4620      	mov	r0, r4
 80067c8:	f7ff f8c2 	bl	8005950 <gwinGraphStartSet>
    gwinGraphSetStyle(gh, &GraphStyle2);
 80067cc:	4918      	ldr	r1, [pc, #96]	; (8006830 <main+0x228>)
		WRITE_REG(GPIOA->ODR, READ_REG(GPIOA->ODR) ^ GPIO_ODR_OD6);
 80067ce:	4d13      	ldr	r5, [pc, #76]	; (800681c <main+0x214>)
    gwinGraphSetStyle(gh, &GraphStyle2);
 80067d0:	4620      	mov	r0, r4
 80067d2:	f7fe ff45 	bl	8005660 <gwinGraphSetStyle>
    gwinGraphDrawPoints(gh, data, sizeof(data)/sizeof(data[0]));
 80067d6:	4620      	mov	r0, r4
 80067d8:	2205      	movs	r2, #5
 80067da:	4916      	ldr	r1, [pc, #88]	; (8006834 <main+0x22c>)
 80067dc:	f7ff f97a 	bl	8005ad4 <gwinGraphDrawPoints>
		gfxSleepMilliseconds(500);
 80067e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80067e4:	f7fb fa78 	bl	8001cd8 <gfxSleepMilliseconds>
		WRITE_REG(GPIOA->ODR, READ_REG(GPIOA->ODR) ^ GPIO_ODR_OD6);
 80067e8:	696b      	ldr	r3, [r5, #20]
 80067ea:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 80067ee:	616b      	str	r3, [r5, #20]
 80067f0:	e7f6      	b.n	80067e0 <main+0x1d8>
 80067f2:	bf00      	nop
 80067f4:	f3af 8000 	nop.w
 80067f8:	769cf0e0 	.word	0x769cf0e0
 80067fc:	3ff41b2f 	.word	0x3ff41b2f
 8006800:	00000000 	.word	0x00000000
 8006804:	4057c000 	.word	0x4057c000
 8006808:	20000030 	.word	0x20000030
 800680c:	10624dd3 	.word	0x10624dd3
 8006810:	e000e010 	.word	0xe000e010
 8006814:	e000ed00 	.word	0xe000ed00
 8006818:	40023800 	.word	0x40023800
 800681c:	40020000 	.word	0x40020000
 8006820:	2000094c 	.word	0x2000094c
 8006824:	20000004 	.word	0x20000004
 8006828:	40668000 	.word	0x40668000
 800682c:	cccccccd 	.word	0xcccccccd
 8006830:	08007cc8 	.word	0x08007cc8
 8006834:	08007cf4 	.word	0x08007cf4
 8006838:	40540000 	.word	0x40540000

0800683c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800683c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006874 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006840:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006842:	e003      	b.n	800684c <LoopCopyDataInit>

08006844 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006844:	4b0c      	ldr	r3, [pc, #48]	; (8006878 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006846:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006848:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800684a:	3104      	adds	r1, #4

0800684c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800684c:	480b      	ldr	r0, [pc, #44]	; (800687c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800684e:	4b0c      	ldr	r3, [pc, #48]	; (8006880 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006850:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006852:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006854:	d3f6      	bcc.n	8006844 <CopyDataInit>
  ldr  r2, =_sbss
 8006856:	4a0b      	ldr	r2, [pc, #44]	; (8006884 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006858:	e002      	b.n	8006860 <LoopFillZerobss>

0800685a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800685a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800685c:	f842 3b04 	str.w	r3, [r2], #4

08006860 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006860:	4b09      	ldr	r3, [pc, #36]	; (8006888 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006862:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006864:	d3f9      	bcc.n	800685a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006866:	f7f9 fd4b 	bl	8000300 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800686a:	f000 f819 	bl	80068a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800686e:	f7ff fecb 	bl	8006608 <main>
  bx  lr    
 8006872:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006874:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8006878:	08008bb0 	.word	0x08008bb0
  ldr  r0, =_sdata
 800687c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006880:	2000009c 	.word	0x2000009c
  ldr  r2, =_sbss
 8006884:	2000009c 	.word	0x2000009c
  ldr  r3, = _ebss
 8006888:	20000954 	.word	0x20000954

0800688c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800688c:	e7fe      	b.n	800688c <ADC_IRQHandler>
	...

08006890 <calloc>:
 8006890:	4b02      	ldr	r3, [pc, #8]	; (800689c <calloc+0xc>)
 8006892:	460a      	mov	r2, r1
 8006894:	4601      	mov	r1, r0
 8006896:	6818      	ldr	r0, [r3, #0]
 8006898:	f000 b83e 	b.w	8006918 <_calloc_r>
 800689c:	20000038 	.word	0x20000038

080068a0 <__libc_init_array>:
 80068a0:	b570      	push	{r4, r5, r6, lr}
 80068a2:	4e0d      	ldr	r6, [pc, #52]	; (80068d8 <__libc_init_array+0x38>)
 80068a4:	4c0d      	ldr	r4, [pc, #52]	; (80068dc <__libc_init_array+0x3c>)
 80068a6:	1ba4      	subs	r4, r4, r6
 80068a8:	10a4      	asrs	r4, r4, #2
 80068aa:	2500      	movs	r5, #0
 80068ac:	42a5      	cmp	r5, r4
 80068ae:	d109      	bne.n	80068c4 <__libc_init_array+0x24>
 80068b0:	4e0b      	ldr	r6, [pc, #44]	; (80068e0 <__libc_init_array+0x40>)
 80068b2:	4c0c      	ldr	r4, [pc, #48]	; (80068e4 <__libc_init_array+0x44>)
 80068b4:	f001 f9fc 	bl	8007cb0 <_init>
 80068b8:	1ba4      	subs	r4, r4, r6
 80068ba:	10a4      	asrs	r4, r4, #2
 80068bc:	2500      	movs	r5, #0
 80068be:	42a5      	cmp	r5, r4
 80068c0:	d105      	bne.n	80068ce <__libc_init_array+0x2e>
 80068c2:	bd70      	pop	{r4, r5, r6, pc}
 80068c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80068c8:	4798      	blx	r3
 80068ca:	3501      	adds	r5, #1
 80068cc:	e7ee      	b.n	80068ac <__libc_init_array+0xc>
 80068ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80068d2:	4798      	blx	r3
 80068d4:	3501      	adds	r5, #1
 80068d6:	e7f2      	b.n	80068be <__libc_init_array+0x1e>
 80068d8:	08008ba8 	.word	0x08008ba8
 80068dc:	08008ba8 	.word	0x08008ba8
 80068e0:	08008ba8 	.word	0x08008ba8
 80068e4:	08008bac 	.word	0x08008bac

080068e8 <malloc>:
 80068e8:	4b02      	ldr	r3, [pc, #8]	; (80068f4 <malloc+0xc>)
 80068ea:	4601      	mov	r1, r0
 80068ec:	6818      	ldr	r0, [r3, #0]
 80068ee:	f000 b86f 	b.w	80069d0 <_malloc_r>
 80068f2:	bf00      	nop
 80068f4:	20000038 	.word	0x20000038

080068f8 <free>:
 80068f8:	4b02      	ldr	r3, [pc, #8]	; (8006904 <free+0xc>)
 80068fa:	4601      	mov	r1, r0
 80068fc:	6818      	ldr	r0, [r3, #0]
 80068fe:	f000 b819 	b.w	8006934 <_free_r>
 8006902:	bf00      	nop
 8006904:	20000038 	.word	0x20000038

08006908 <memset>:
 8006908:	4402      	add	r2, r0
 800690a:	4603      	mov	r3, r0
 800690c:	4293      	cmp	r3, r2
 800690e:	d100      	bne.n	8006912 <memset+0xa>
 8006910:	4770      	bx	lr
 8006912:	f803 1b01 	strb.w	r1, [r3], #1
 8006916:	e7f9      	b.n	800690c <memset+0x4>

08006918 <_calloc_r>:
 8006918:	b538      	push	{r3, r4, r5, lr}
 800691a:	fb02 f401 	mul.w	r4, r2, r1
 800691e:	4621      	mov	r1, r4
 8006920:	f000 f856 	bl	80069d0 <_malloc_r>
 8006924:	4605      	mov	r5, r0
 8006926:	b118      	cbz	r0, 8006930 <_calloc_r+0x18>
 8006928:	4622      	mov	r2, r4
 800692a:	2100      	movs	r1, #0
 800692c:	f7ff ffec 	bl	8006908 <memset>
 8006930:	4628      	mov	r0, r5
 8006932:	bd38      	pop	{r3, r4, r5, pc}

08006934 <_free_r>:
 8006934:	b538      	push	{r3, r4, r5, lr}
 8006936:	4605      	mov	r5, r0
 8006938:	2900      	cmp	r1, #0
 800693a:	d045      	beq.n	80069c8 <_free_r+0x94>
 800693c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006940:	1f0c      	subs	r4, r1, #4
 8006942:	2b00      	cmp	r3, #0
 8006944:	bfb8      	it	lt
 8006946:	18e4      	addlt	r4, r4, r3
 8006948:	f000 f8b8 	bl	8006abc <__malloc_lock>
 800694c:	4a1f      	ldr	r2, [pc, #124]	; (80069cc <_free_r+0x98>)
 800694e:	6813      	ldr	r3, [r2, #0]
 8006950:	4610      	mov	r0, r2
 8006952:	b933      	cbnz	r3, 8006962 <_free_r+0x2e>
 8006954:	6063      	str	r3, [r4, #4]
 8006956:	6014      	str	r4, [r2, #0]
 8006958:	4628      	mov	r0, r5
 800695a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800695e:	f000 b8ae 	b.w	8006abe <__malloc_unlock>
 8006962:	42a3      	cmp	r3, r4
 8006964:	d90c      	bls.n	8006980 <_free_r+0x4c>
 8006966:	6821      	ldr	r1, [r4, #0]
 8006968:	1862      	adds	r2, r4, r1
 800696a:	4293      	cmp	r3, r2
 800696c:	bf04      	itt	eq
 800696e:	681a      	ldreq	r2, [r3, #0]
 8006970:	685b      	ldreq	r3, [r3, #4]
 8006972:	6063      	str	r3, [r4, #4]
 8006974:	bf04      	itt	eq
 8006976:	1852      	addeq	r2, r2, r1
 8006978:	6022      	streq	r2, [r4, #0]
 800697a:	6004      	str	r4, [r0, #0]
 800697c:	e7ec      	b.n	8006958 <_free_r+0x24>
 800697e:	4613      	mov	r3, r2
 8006980:	685a      	ldr	r2, [r3, #4]
 8006982:	b10a      	cbz	r2, 8006988 <_free_r+0x54>
 8006984:	42a2      	cmp	r2, r4
 8006986:	d9fa      	bls.n	800697e <_free_r+0x4a>
 8006988:	6819      	ldr	r1, [r3, #0]
 800698a:	1858      	adds	r0, r3, r1
 800698c:	42a0      	cmp	r0, r4
 800698e:	d10b      	bne.n	80069a8 <_free_r+0x74>
 8006990:	6820      	ldr	r0, [r4, #0]
 8006992:	4401      	add	r1, r0
 8006994:	1858      	adds	r0, r3, r1
 8006996:	4282      	cmp	r2, r0
 8006998:	6019      	str	r1, [r3, #0]
 800699a:	d1dd      	bne.n	8006958 <_free_r+0x24>
 800699c:	6810      	ldr	r0, [r2, #0]
 800699e:	6852      	ldr	r2, [r2, #4]
 80069a0:	605a      	str	r2, [r3, #4]
 80069a2:	4401      	add	r1, r0
 80069a4:	6019      	str	r1, [r3, #0]
 80069a6:	e7d7      	b.n	8006958 <_free_r+0x24>
 80069a8:	d902      	bls.n	80069b0 <_free_r+0x7c>
 80069aa:	230c      	movs	r3, #12
 80069ac:	602b      	str	r3, [r5, #0]
 80069ae:	e7d3      	b.n	8006958 <_free_r+0x24>
 80069b0:	6820      	ldr	r0, [r4, #0]
 80069b2:	1821      	adds	r1, r4, r0
 80069b4:	428a      	cmp	r2, r1
 80069b6:	bf04      	itt	eq
 80069b8:	6811      	ldreq	r1, [r2, #0]
 80069ba:	6852      	ldreq	r2, [r2, #4]
 80069bc:	6062      	str	r2, [r4, #4]
 80069be:	bf04      	itt	eq
 80069c0:	1809      	addeq	r1, r1, r0
 80069c2:	6021      	streq	r1, [r4, #0]
 80069c4:	605c      	str	r4, [r3, #4]
 80069c6:	e7c7      	b.n	8006958 <_free_r+0x24>
 80069c8:	bd38      	pop	{r3, r4, r5, pc}
 80069ca:	bf00      	nop
 80069cc:	20000930 	.word	0x20000930

080069d0 <_malloc_r>:
 80069d0:	b570      	push	{r4, r5, r6, lr}
 80069d2:	1ccd      	adds	r5, r1, #3
 80069d4:	f025 0503 	bic.w	r5, r5, #3
 80069d8:	3508      	adds	r5, #8
 80069da:	2d0c      	cmp	r5, #12
 80069dc:	bf38      	it	cc
 80069de:	250c      	movcc	r5, #12
 80069e0:	2d00      	cmp	r5, #0
 80069e2:	4606      	mov	r6, r0
 80069e4:	db01      	blt.n	80069ea <_malloc_r+0x1a>
 80069e6:	42a9      	cmp	r1, r5
 80069e8:	d903      	bls.n	80069f2 <_malloc_r+0x22>
 80069ea:	230c      	movs	r3, #12
 80069ec:	6033      	str	r3, [r6, #0]
 80069ee:	2000      	movs	r0, #0
 80069f0:	bd70      	pop	{r4, r5, r6, pc}
 80069f2:	f000 f863 	bl	8006abc <__malloc_lock>
 80069f6:	4a23      	ldr	r2, [pc, #140]	; (8006a84 <_malloc_r+0xb4>)
 80069f8:	6814      	ldr	r4, [r2, #0]
 80069fa:	4621      	mov	r1, r4
 80069fc:	b991      	cbnz	r1, 8006a24 <_malloc_r+0x54>
 80069fe:	4c22      	ldr	r4, [pc, #136]	; (8006a88 <_malloc_r+0xb8>)
 8006a00:	6823      	ldr	r3, [r4, #0]
 8006a02:	b91b      	cbnz	r3, 8006a0c <_malloc_r+0x3c>
 8006a04:	4630      	mov	r0, r6
 8006a06:	f000 f849 	bl	8006a9c <_sbrk_r>
 8006a0a:	6020      	str	r0, [r4, #0]
 8006a0c:	4629      	mov	r1, r5
 8006a0e:	4630      	mov	r0, r6
 8006a10:	f000 f844 	bl	8006a9c <_sbrk_r>
 8006a14:	1c43      	adds	r3, r0, #1
 8006a16:	d126      	bne.n	8006a66 <_malloc_r+0x96>
 8006a18:	230c      	movs	r3, #12
 8006a1a:	6033      	str	r3, [r6, #0]
 8006a1c:	4630      	mov	r0, r6
 8006a1e:	f000 f84e 	bl	8006abe <__malloc_unlock>
 8006a22:	e7e4      	b.n	80069ee <_malloc_r+0x1e>
 8006a24:	680b      	ldr	r3, [r1, #0]
 8006a26:	1b5b      	subs	r3, r3, r5
 8006a28:	d41a      	bmi.n	8006a60 <_malloc_r+0x90>
 8006a2a:	2b0b      	cmp	r3, #11
 8006a2c:	d90f      	bls.n	8006a4e <_malloc_r+0x7e>
 8006a2e:	600b      	str	r3, [r1, #0]
 8006a30:	50cd      	str	r5, [r1, r3]
 8006a32:	18cc      	adds	r4, r1, r3
 8006a34:	4630      	mov	r0, r6
 8006a36:	f000 f842 	bl	8006abe <__malloc_unlock>
 8006a3a:	f104 000b 	add.w	r0, r4, #11
 8006a3e:	1d23      	adds	r3, r4, #4
 8006a40:	f020 0007 	bic.w	r0, r0, #7
 8006a44:	1ac3      	subs	r3, r0, r3
 8006a46:	d01b      	beq.n	8006a80 <_malloc_r+0xb0>
 8006a48:	425a      	negs	r2, r3
 8006a4a:	50e2      	str	r2, [r4, r3]
 8006a4c:	bd70      	pop	{r4, r5, r6, pc}
 8006a4e:	428c      	cmp	r4, r1
 8006a50:	bf0d      	iteet	eq
 8006a52:	6863      	ldreq	r3, [r4, #4]
 8006a54:	684b      	ldrne	r3, [r1, #4]
 8006a56:	6063      	strne	r3, [r4, #4]
 8006a58:	6013      	streq	r3, [r2, #0]
 8006a5a:	bf18      	it	ne
 8006a5c:	460c      	movne	r4, r1
 8006a5e:	e7e9      	b.n	8006a34 <_malloc_r+0x64>
 8006a60:	460c      	mov	r4, r1
 8006a62:	6849      	ldr	r1, [r1, #4]
 8006a64:	e7ca      	b.n	80069fc <_malloc_r+0x2c>
 8006a66:	1cc4      	adds	r4, r0, #3
 8006a68:	f024 0403 	bic.w	r4, r4, #3
 8006a6c:	42a0      	cmp	r0, r4
 8006a6e:	d005      	beq.n	8006a7c <_malloc_r+0xac>
 8006a70:	1a21      	subs	r1, r4, r0
 8006a72:	4630      	mov	r0, r6
 8006a74:	f000 f812 	bl	8006a9c <_sbrk_r>
 8006a78:	3001      	adds	r0, #1
 8006a7a:	d0cd      	beq.n	8006a18 <_malloc_r+0x48>
 8006a7c:	6025      	str	r5, [r4, #0]
 8006a7e:	e7d9      	b.n	8006a34 <_malloc_r+0x64>
 8006a80:	bd70      	pop	{r4, r5, r6, pc}
 8006a82:	bf00      	nop
 8006a84:	20000930 	.word	0x20000930
 8006a88:	20000934 	.word	0x20000934

08006a8c <realloc>:
 8006a8c:	4b02      	ldr	r3, [pc, #8]	; (8006a98 <realloc+0xc>)
 8006a8e:	460a      	mov	r2, r1
 8006a90:	4601      	mov	r1, r0
 8006a92:	6818      	ldr	r0, [r3, #0]
 8006a94:	f000 b814 	b.w	8006ac0 <_realloc_r>
 8006a98:	20000038 	.word	0x20000038

08006a9c <_sbrk_r>:
 8006a9c:	b538      	push	{r3, r4, r5, lr}
 8006a9e:	4c06      	ldr	r4, [pc, #24]	; (8006ab8 <_sbrk_r+0x1c>)
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	4605      	mov	r5, r0
 8006aa4:	4608      	mov	r0, r1
 8006aa6:	6023      	str	r3, [r4, #0]
 8006aa8:	f001 f8f2 	bl	8007c90 <_sbrk>
 8006aac:	1c43      	adds	r3, r0, #1
 8006aae:	d102      	bne.n	8006ab6 <_sbrk_r+0x1a>
 8006ab0:	6823      	ldr	r3, [r4, #0]
 8006ab2:	b103      	cbz	r3, 8006ab6 <_sbrk_r+0x1a>
 8006ab4:	602b      	str	r3, [r5, #0]
 8006ab6:	bd38      	pop	{r3, r4, r5, pc}
 8006ab8:	20000950 	.word	0x20000950

08006abc <__malloc_lock>:
 8006abc:	4770      	bx	lr

08006abe <__malloc_unlock>:
 8006abe:	4770      	bx	lr

08006ac0 <_realloc_r>:
 8006ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ac2:	4607      	mov	r7, r0
 8006ac4:	4614      	mov	r4, r2
 8006ac6:	460e      	mov	r6, r1
 8006ac8:	b921      	cbnz	r1, 8006ad4 <_realloc_r+0x14>
 8006aca:	4611      	mov	r1, r2
 8006acc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006ad0:	f7ff bf7e 	b.w	80069d0 <_malloc_r>
 8006ad4:	b922      	cbnz	r2, 8006ae0 <_realloc_r+0x20>
 8006ad6:	f7ff ff2d 	bl	8006934 <_free_r>
 8006ada:	4625      	mov	r5, r4
 8006adc:	4628      	mov	r0, r5
 8006ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ae0:	f000 f889 	bl	8006bf6 <_malloc_usable_size_r>
 8006ae4:	4284      	cmp	r4, r0
 8006ae6:	d90f      	bls.n	8006b08 <_realloc_r+0x48>
 8006ae8:	4621      	mov	r1, r4
 8006aea:	4638      	mov	r0, r7
 8006aec:	f7ff ff70 	bl	80069d0 <_malloc_r>
 8006af0:	4605      	mov	r5, r0
 8006af2:	2800      	cmp	r0, #0
 8006af4:	d0f2      	beq.n	8006adc <_realloc_r+0x1c>
 8006af6:	4631      	mov	r1, r6
 8006af8:	4622      	mov	r2, r4
 8006afa:	f000 f871 	bl	8006be0 <memcpy>
 8006afe:	4631      	mov	r1, r6
 8006b00:	4638      	mov	r0, r7
 8006b02:	f7ff ff17 	bl	8006934 <_free_r>
 8006b06:	e7e9      	b.n	8006adc <_realloc_r+0x1c>
 8006b08:	4635      	mov	r5, r6
 8006b0a:	e7e7      	b.n	8006adc <_realloc_r+0x1c>

08006b0c <cleanup_glue>:
 8006b0c:	b538      	push	{r3, r4, r5, lr}
 8006b0e:	460c      	mov	r4, r1
 8006b10:	6809      	ldr	r1, [r1, #0]
 8006b12:	4605      	mov	r5, r0
 8006b14:	b109      	cbz	r1, 8006b1a <cleanup_glue+0xe>
 8006b16:	f7ff fff9 	bl	8006b0c <cleanup_glue>
 8006b1a:	4621      	mov	r1, r4
 8006b1c:	4628      	mov	r0, r5
 8006b1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b22:	f7ff bf07 	b.w	8006934 <_free_r>
	...

08006b28 <_reclaim_reent>:
 8006b28:	4b2c      	ldr	r3, [pc, #176]	; (8006bdc <_reclaim_reent+0xb4>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4283      	cmp	r3, r0
 8006b2e:	b570      	push	{r4, r5, r6, lr}
 8006b30:	4604      	mov	r4, r0
 8006b32:	d051      	beq.n	8006bd8 <_reclaim_reent+0xb0>
 8006b34:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006b36:	b1ab      	cbz	r3, 8006b64 <_reclaim_reent+0x3c>
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	b16b      	cbz	r3, 8006b58 <_reclaim_reent+0x30>
 8006b3c:	2500      	movs	r5, #0
 8006b3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	5959      	ldr	r1, [r3, r5]
 8006b44:	2900      	cmp	r1, #0
 8006b46:	d141      	bne.n	8006bcc <_reclaim_reent+0xa4>
 8006b48:	3504      	adds	r5, #4
 8006b4a:	2d80      	cmp	r5, #128	; 0x80
 8006b4c:	d1f7      	bne.n	8006b3e <_reclaim_reent+0x16>
 8006b4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b50:	4620      	mov	r0, r4
 8006b52:	68d9      	ldr	r1, [r3, #12]
 8006b54:	f7ff feee 	bl	8006934 <_free_r>
 8006b58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b5a:	6819      	ldr	r1, [r3, #0]
 8006b5c:	b111      	cbz	r1, 8006b64 <_reclaim_reent+0x3c>
 8006b5e:	4620      	mov	r0, r4
 8006b60:	f7ff fee8 	bl	8006934 <_free_r>
 8006b64:	6961      	ldr	r1, [r4, #20]
 8006b66:	b111      	cbz	r1, 8006b6e <_reclaim_reent+0x46>
 8006b68:	4620      	mov	r0, r4
 8006b6a:	f7ff fee3 	bl	8006934 <_free_r>
 8006b6e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006b70:	b111      	cbz	r1, 8006b78 <_reclaim_reent+0x50>
 8006b72:	4620      	mov	r0, r4
 8006b74:	f7ff fede 	bl	8006934 <_free_r>
 8006b78:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006b7a:	b111      	cbz	r1, 8006b82 <_reclaim_reent+0x5a>
 8006b7c:	4620      	mov	r0, r4
 8006b7e:	f7ff fed9 	bl	8006934 <_free_r>
 8006b82:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006b84:	b111      	cbz	r1, 8006b8c <_reclaim_reent+0x64>
 8006b86:	4620      	mov	r0, r4
 8006b88:	f7ff fed4 	bl	8006934 <_free_r>
 8006b8c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006b8e:	b111      	cbz	r1, 8006b96 <_reclaim_reent+0x6e>
 8006b90:	4620      	mov	r0, r4
 8006b92:	f7ff fecf 	bl	8006934 <_free_r>
 8006b96:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006b98:	b111      	cbz	r1, 8006ba0 <_reclaim_reent+0x78>
 8006b9a:	4620      	mov	r0, r4
 8006b9c:	f7ff feca 	bl	8006934 <_free_r>
 8006ba0:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006ba2:	b111      	cbz	r1, 8006baa <_reclaim_reent+0x82>
 8006ba4:	4620      	mov	r0, r4
 8006ba6:	f7ff fec5 	bl	8006934 <_free_r>
 8006baa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bac:	b111      	cbz	r1, 8006bb4 <_reclaim_reent+0x8c>
 8006bae:	4620      	mov	r0, r4
 8006bb0:	f7ff fec0 	bl	8006934 <_free_r>
 8006bb4:	69a3      	ldr	r3, [r4, #24]
 8006bb6:	b17b      	cbz	r3, 8006bd8 <_reclaim_reent+0xb0>
 8006bb8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006bba:	4620      	mov	r0, r4
 8006bbc:	4798      	blx	r3
 8006bbe:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006bc0:	b151      	cbz	r1, 8006bd8 <_reclaim_reent+0xb0>
 8006bc2:	4620      	mov	r0, r4
 8006bc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006bc8:	f7ff bfa0 	b.w	8006b0c <cleanup_glue>
 8006bcc:	680e      	ldr	r6, [r1, #0]
 8006bce:	4620      	mov	r0, r4
 8006bd0:	f7ff feb0 	bl	8006934 <_free_r>
 8006bd4:	4631      	mov	r1, r6
 8006bd6:	e7b5      	b.n	8006b44 <_reclaim_reent+0x1c>
 8006bd8:	bd70      	pop	{r4, r5, r6, pc}
 8006bda:	bf00      	nop
 8006bdc:	20000038 	.word	0x20000038

08006be0 <memcpy>:
 8006be0:	b510      	push	{r4, lr}
 8006be2:	1e43      	subs	r3, r0, #1
 8006be4:	440a      	add	r2, r1
 8006be6:	4291      	cmp	r1, r2
 8006be8:	d100      	bne.n	8006bec <memcpy+0xc>
 8006bea:	bd10      	pop	{r4, pc}
 8006bec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bf0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bf4:	e7f7      	b.n	8006be6 <memcpy+0x6>

08006bf6 <_malloc_usable_size_r>:
 8006bf6:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8006bfa:	2800      	cmp	r0, #0
 8006bfc:	f1a0 0004 	sub.w	r0, r0, #4
 8006c00:	bfbc      	itt	lt
 8006c02:	580b      	ldrlt	r3, [r1, r0]
 8006c04:	18c0      	addlt	r0, r0, r3
 8006c06:	4770      	bx	lr

08006c08 <sin>:
 8006c08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006c0a:	ec51 0b10 	vmov	r0, r1, d0
 8006c0e:	4a20      	ldr	r2, [pc, #128]	; (8006c90 <sin+0x88>)
 8006c10:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006c14:	4293      	cmp	r3, r2
 8006c16:	dc07      	bgt.n	8006c28 <sin+0x20>
 8006c18:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8006c88 <sin+0x80>
 8006c1c:	2000      	movs	r0, #0
 8006c1e:	f000 fe67 	bl	80078f0 <__kernel_sin>
 8006c22:	ec51 0b10 	vmov	r0, r1, d0
 8006c26:	e007      	b.n	8006c38 <sin+0x30>
 8006c28:	4a1a      	ldr	r2, [pc, #104]	; (8006c94 <sin+0x8c>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	dd09      	ble.n	8006c42 <sin+0x3a>
 8006c2e:	ee10 2a10 	vmov	r2, s0
 8006c32:	460b      	mov	r3, r1
 8006c34:	f7ff f872 	bl	8005d1c <__aeabi_dsub>
 8006c38:	ec41 0b10 	vmov	d0, r0, r1
 8006c3c:	b005      	add	sp, #20
 8006c3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006c42:	4668      	mov	r0, sp
 8006c44:	f000 f828 	bl	8006c98 <__ieee754_rem_pio2>
 8006c48:	f000 0003 	and.w	r0, r0, #3
 8006c4c:	2801      	cmp	r0, #1
 8006c4e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006c52:	ed9d 0b00 	vldr	d0, [sp]
 8006c56:	d004      	beq.n	8006c62 <sin+0x5a>
 8006c58:	2802      	cmp	r0, #2
 8006c5a:	d005      	beq.n	8006c68 <sin+0x60>
 8006c5c:	b970      	cbnz	r0, 8006c7c <sin+0x74>
 8006c5e:	2001      	movs	r0, #1
 8006c60:	e7dd      	b.n	8006c1e <sin+0x16>
 8006c62:	f000 fa0d 	bl	8007080 <__kernel_cos>
 8006c66:	e7dc      	b.n	8006c22 <sin+0x1a>
 8006c68:	2001      	movs	r0, #1
 8006c6a:	f000 fe41 	bl	80078f0 <__kernel_sin>
 8006c6e:	ec53 2b10 	vmov	r2, r3, d0
 8006c72:	ee10 0a10 	vmov	r0, s0
 8006c76:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006c7a:	e7dd      	b.n	8006c38 <sin+0x30>
 8006c7c:	f000 fa00 	bl	8007080 <__kernel_cos>
 8006c80:	e7f5      	b.n	8006c6e <sin+0x66>
 8006c82:	bf00      	nop
 8006c84:	f3af 8000 	nop.w
	...
 8006c90:	3fe921fb 	.word	0x3fe921fb
 8006c94:	7fefffff 	.word	0x7fefffff

08006c98 <__ieee754_rem_pio2>:
 8006c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c9c:	ec57 6b10 	vmov	r6, r7, d0
 8006ca0:	4bc3      	ldr	r3, [pc, #780]	; (8006fb0 <__ieee754_rem_pio2+0x318>)
 8006ca2:	b08d      	sub	sp, #52	; 0x34
 8006ca4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8006ca8:	4598      	cmp	r8, r3
 8006caa:	4604      	mov	r4, r0
 8006cac:	9704      	str	r7, [sp, #16]
 8006cae:	dc07      	bgt.n	8006cc0 <__ieee754_rem_pio2+0x28>
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	ed84 0b00 	vstr	d0, [r4]
 8006cb8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006cbc:	2500      	movs	r5, #0
 8006cbe:	e027      	b.n	8006d10 <__ieee754_rem_pio2+0x78>
 8006cc0:	4bbc      	ldr	r3, [pc, #752]	; (8006fb4 <__ieee754_rem_pio2+0x31c>)
 8006cc2:	4598      	cmp	r8, r3
 8006cc4:	dc75      	bgt.n	8006db2 <__ieee754_rem_pio2+0x11a>
 8006cc6:	9b04      	ldr	r3, [sp, #16]
 8006cc8:	4dbb      	ldr	r5, [pc, #748]	; (8006fb8 <__ieee754_rem_pio2+0x320>)
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	ee10 0a10 	vmov	r0, s0
 8006cd0:	a3a9      	add	r3, pc, #676	; (adr r3, 8006f78 <__ieee754_rem_pio2+0x2e0>)
 8006cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd6:	4639      	mov	r1, r7
 8006cd8:	dd36      	ble.n	8006d48 <__ieee754_rem_pio2+0xb0>
 8006cda:	f7ff f81f 	bl	8005d1c <__aeabi_dsub>
 8006cde:	45a8      	cmp	r8, r5
 8006ce0:	4606      	mov	r6, r0
 8006ce2:	460f      	mov	r7, r1
 8006ce4:	d018      	beq.n	8006d18 <__ieee754_rem_pio2+0x80>
 8006ce6:	a3a6      	add	r3, pc, #664	; (adr r3, 8006f80 <__ieee754_rem_pio2+0x2e8>)
 8006ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cec:	f7ff f816 	bl	8005d1c <__aeabi_dsub>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	e9c4 2300 	strd	r2, r3, [r4]
 8006cf8:	4630      	mov	r0, r6
 8006cfa:	4639      	mov	r1, r7
 8006cfc:	f7ff f80e 	bl	8005d1c <__aeabi_dsub>
 8006d00:	a39f      	add	r3, pc, #636	; (adr r3, 8006f80 <__ieee754_rem_pio2+0x2e8>)
 8006d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d06:	f7ff f809 	bl	8005d1c <__aeabi_dsub>
 8006d0a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006d0e:	2501      	movs	r5, #1
 8006d10:	4628      	mov	r0, r5
 8006d12:	b00d      	add	sp, #52	; 0x34
 8006d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d18:	a39b      	add	r3, pc, #620	; (adr r3, 8006f88 <__ieee754_rem_pio2+0x2f0>)
 8006d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d1e:	f7fe fffd 	bl	8005d1c <__aeabi_dsub>
 8006d22:	a39b      	add	r3, pc, #620	; (adr r3, 8006f90 <__ieee754_rem_pio2+0x2f8>)
 8006d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d28:	4606      	mov	r6, r0
 8006d2a:	460f      	mov	r7, r1
 8006d2c:	f7fe fff6 	bl	8005d1c <__aeabi_dsub>
 8006d30:	4602      	mov	r2, r0
 8006d32:	460b      	mov	r3, r1
 8006d34:	e9c4 2300 	strd	r2, r3, [r4]
 8006d38:	4630      	mov	r0, r6
 8006d3a:	4639      	mov	r1, r7
 8006d3c:	f7fe ffee 	bl	8005d1c <__aeabi_dsub>
 8006d40:	a393      	add	r3, pc, #588	; (adr r3, 8006f90 <__ieee754_rem_pio2+0x2f8>)
 8006d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d46:	e7de      	b.n	8006d06 <__ieee754_rem_pio2+0x6e>
 8006d48:	f7fe ffea 	bl	8005d20 <__adddf3>
 8006d4c:	45a8      	cmp	r8, r5
 8006d4e:	4606      	mov	r6, r0
 8006d50:	460f      	mov	r7, r1
 8006d52:	d016      	beq.n	8006d82 <__ieee754_rem_pio2+0xea>
 8006d54:	a38a      	add	r3, pc, #552	; (adr r3, 8006f80 <__ieee754_rem_pio2+0x2e8>)
 8006d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d5a:	f7fe ffe1 	bl	8005d20 <__adddf3>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	460b      	mov	r3, r1
 8006d62:	e9c4 2300 	strd	r2, r3, [r4]
 8006d66:	4630      	mov	r0, r6
 8006d68:	4639      	mov	r1, r7
 8006d6a:	f7fe ffd7 	bl	8005d1c <__aeabi_dsub>
 8006d6e:	a384      	add	r3, pc, #528	; (adr r3, 8006f80 <__ieee754_rem_pio2+0x2e8>)
 8006d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d74:	f7fe ffd4 	bl	8005d20 <__adddf3>
 8006d78:	f04f 35ff 	mov.w	r5, #4294967295
 8006d7c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006d80:	e7c6      	b.n	8006d10 <__ieee754_rem_pio2+0x78>
 8006d82:	a381      	add	r3, pc, #516	; (adr r3, 8006f88 <__ieee754_rem_pio2+0x2f0>)
 8006d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d88:	f7fe ffca 	bl	8005d20 <__adddf3>
 8006d8c:	a380      	add	r3, pc, #512	; (adr r3, 8006f90 <__ieee754_rem_pio2+0x2f8>)
 8006d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d92:	4606      	mov	r6, r0
 8006d94:	460f      	mov	r7, r1
 8006d96:	f7fe ffc3 	bl	8005d20 <__adddf3>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	460b      	mov	r3, r1
 8006d9e:	e9c4 2300 	strd	r2, r3, [r4]
 8006da2:	4630      	mov	r0, r6
 8006da4:	4639      	mov	r1, r7
 8006da6:	f7fe ffb9 	bl	8005d1c <__aeabi_dsub>
 8006daa:	a379      	add	r3, pc, #484	; (adr r3, 8006f90 <__ieee754_rem_pio2+0x2f8>)
 8006dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db0:	e7e0      	b.n	8006d74 <__ieee754_rem_pio2+0xdc>
 8006db2:	4b82      	ldr	r3, [pc, #520]	; (8006fbc <__ieee754_rem_pio2+0x324>)
 8006db4:	4598      	cmp	r8, r3
 8006db6:	f300 80d0 	bgt.w	8006f5a <__ieee754_rem_pio2+0x2c2>
 8006dba:	f000 fe53 	bl	8007a64 <fabs>
 8006dbe:	ec57 6b10 	vmov	r6, r7, d0
 8006dc2:	ee10 0a10 	vmov	r0, s0
 8006dc6:	a374      	add	r3, pc, #464	; (adr r3, 8006f98 <__ieee754_rem_pio2+0x300>)
 8006dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dcc:	4639      	mov	r1, r7
 8006dce:	f7ff f959 	bl	8006084 <__aeabi_dmul>
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	4b7a      	ldr	r3, [pc, #488]	; (8006fc0 <__ieee754_rem_pio2+0x328>)
 8006dd6:	f7fe ffa3 	bl	8005d20 <__adddf3>
 8006dda:	f7ff fbed 	bl	80065b8 <__aeabi_d2iz>
 8006dde:	4605      	mov	r5, r0
 8006de0:	f7ff f8ea 	bl	8005fb8 <__aeabi_i2d>
 8006de4:	a364      	add	r3, pc, #400	; (adr r3, 8006f78 <__ieee754_rem_pio2+0x2e0>)
 8006de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dee:	f7ff f949 	bl	8006084 <__aeabi_dmul>
 8006df2:	4602      	mov	r2, r0
 8006df4:	460b      	mov	r3, r1
 8006df6:	4630      	mov	r0, r6
 8006df8:	4639      	mov	r1, r7
 8006dfa:	f7fe ff8f 	bl	8005d1c <__aeabi_dsub>
 8006dfe:	a360      	add	r3, pc, #384	; (adr r3, 8006f80 <__ieee754_rem_pio2+0x2e8>)
 8006e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e04:	4682      	mov	sl, r0
 8006e06:	468b      	mov	fp, r1
 8006e08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e0c:	f7ff f93a 	bl	8006084 <__aeabi_dmul>
 8006e10:	2d1f      	cmp	r5, #31
 8006e12:	4606      	mov	r6, r0
 8006e14:	460f      	mov	r7, r1
 8006e16:	dc2a      	bgt.n	8006e6e <__ieee754_rem_pio2+0x1d6>
 8006e18:	1e6a      	subs	r2, r5, #1
 8006e1a:	4b6a      	ldr	r3, [pc, #424]	; (8006fc4 <__ieee754_rem_pio2+0x32c>)
 8006e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e20:	4598      	cmp	r8, r3
 8006e22:	d024      	beq.n	8006e6e <__ieee754_rem_pio2+0x1d6>
 8006e24:	4632      	mov	r2, r6
 8006e26:	463b      	mov	r3, r7
 8006e28:	4650      	mov	r0, sl
 8006e2a:	4659      	mov	r1, fp
 8006e2c:	f7fe ff76 	bl	8005d1c <__aeabi_dsub>
 8006e30:	e9c4 0100 	strd	r0, r1, [r4]
 8006e34:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006e38:	4650      	mov	r0, sl
 8006e3a:	4642      	mov	r2, r8
 8006e3c:	464b      	mov	r3, r9
 8006e3e:	4659      	mov	r1, fp
 8006e40:	f7fe ff6c 	bl	8005d1c <__aeabi_dsub>
 8006e44:	463b      	mov	r3, r7
 8006e46:	4632      	mov	r2, r6
 8006e48:	f7fe ff68 	bl	8005d1c <__aeabi_dsub>
 8006e4c:	9b04      	ldr	r3, [sp, #16]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006e54:	f6bf af5c 	bge.w	8006d10 <__ieee754_rem_pio2+0x78>
 8006e58:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006e5c:	6063      	str	r3, [r4, #4]
 8006e5e:	f8c4 8000 	str.w	r8, [r4]
 8006e62:	60a0      	str	r0, [r4, #8]
 8006e64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e68:	60e3      	str	r3, [r4, #12]
 8006e6a:	426d      	negs	r5, r5
 8006e6c:	e750      	b.n	8006d10 <__ieee754_rem_pio2+0x78>
 8006e6e:	4632      	mov	r2, r6
 8006e70:	463b      	mov	r3, r7
 8006e72:	4650      	mov	r0, sl
 8006e74:	4659      	mov	r1, fp
 8006e76:	f7fe ff51 	bl	8005d1c <__aeabi_dsub>
 8006e7a:	ea4f 5228 	mov.w	r2, r8, asr #20
 8006e7e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006e82:	1ad3      	subs	r3, r2, r3
 8006e84:	2b10      	cmp	r3, #16
 8006e86:	e9c4 0100 	strd	r0, r1, [r4]
 8006e8a:	9205      	str	r2, [sp, #20]
 8006e8c:	ddd2      	ble.n	8006e34 <__ieee754_rem_pio2+0x19c>
 8006e8e:	a33e      	add	r3, pc, #248	; (adr r3, 8006f88 <__ieee754_rem_pio2+0x2f0>)
 8006e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e98:	f7ff f8f4 	bl	8006084 <__aeabi_dmul>
 8006e9c:	4606      	mov	r6, r0
 8006e9e:	460f      	mov	r7, r1
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	4650      	mov	r0, sl
 8006ea6:	4659      	mov	r1, fp
 8006ea8:	f7fe ff38 	bl	8005d1c <__aeabi_dsub>
 8006eac:	4602      	mov	r2, r0
 8006eae:	460b      	mov	r3, r1
 8006eb0:	4680      	mov	r8, r0
 8006eb2:	4689      	mov	r9, r1
 8006eb4:	4650      	mov	r0, sl
 8006eb6:	4659      	mov	r1, fp
 8006eb8:	f7fe ff30 	bl	8005d1c <__aeabi_dsub>
 8006ebc:	4632      	mov	r2, r6
 8006ebe:	463b      	mov	r3, r7
 8006ec0:	f7fe ff2c 	bl	8005d1c <__aeabi_dsub>
 8006ec4:	a332      	add	r3, pc, #200	; (adr r3, 8006f90 <__ieee754_rem_pio2+0x2f8>)
 8006ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eca:	4606      	mov	r6, r0
 8006ecc:	460f      	mov	r7, r1
 8006ece:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ed2:	f7ff f8d7 	bl	8006084 <__aeabi_dmul>
 8006ed6:	4632      	mov	r2, r6
 8006ed8:	463b      	mov	r3, r7
 8006eda:	f7fe ff1f 	bl	8005d1c <__aeabi_dsub>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	460b      	mov	r3, r1
 8006ee2:	4606      	mov	r6, r0
 8006ee4:	460f      	mov	r7, r1
 8006ee6:	4640      	mov	r0, r8
 8006ee8:	4649      	mov	r1, r9
 8006eea:	f7fe ff17 	bl	8005d1c <__aeabi_dsub>
 8006eee:	9a05      	ldr	r2, [sp, #20]
 8006ef0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006ef4:	1ad3      	subs	r3, r2, r3
 8006ef6:	2b31      	cmp	r3, #49	; 0x31
 8006ef8:	e9c4 0100 	strd	r0, r1, [r4]
 8006efc:	dd2a      	ble.n	8006f54 <__ieee754_rem_pio2+0x2bc>
 8006efe:	a328      	add	r3, pc, #160	; (adr r3, 8006fa0 <__ieee754_rem_pio2+0x308>)
 8006f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f08:	f7ff f8bc 	bl	8006084 <__aeabi_dmul>
 8006f0c:	4606      	mov	r6, r0
 8006f0e:	460f      	mov	r7, r1
 8006f10:	4602      	mov	r2, r0
 8006f12:	460b      	mov	r3, r1
 8006f14:	4640      	mov	r0, r8
 8006f16:	4649      	mov	r1, r9
 8006f18:	f7fe ff00 	bl	8005d1c <__aeabi_dsub>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	460b      	mov	r3, r1
 8006f20:	4682      	mov	sl, r0
 8006f22:	468b      	mov	fp, r1
 8006f24:	4640      	mov	r0, r8
 8006f26:	4649      	mov	r1, r9
 8006f28:	f7fe fef8 	bl	8005d1c <__aeabi_dsub>
 8006f2c:	4632      	mov	r2, r6
 8006f2e:	463b      	mov	r3, r7
 8006f30:	f7fe fef4 	bl	8005d1c <__aeabi_dsub>
 8006f34:	a31c      	add	r3, pc, #112	; (adr r3, 8006fa8 <__ieee754_rem_pio2+0x310>)
 8006f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3a:	4606      	mov	r6, r0
 8006f3c:	460f      	mov	r7, r1
 8006f3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f42:	f7ff f89f 	bl	8006084 <__aeabi_dmul>
 8006f46:	4632      	mov	r2, r6
 8006f48:	463b      	mov	r3, r7
 8006f4a:	f7fe fee7 	bl	8005d1c <__aeabi_dsub>
 8006f4e:	4606      	mov	r6, r0
 8006f50:	460f      	mov	r7, r1
 8006f52:	e767      	b.n	8006e24 <__ieee754_rem_pio2+0x18c>
 8006f54:	46c2      	mov	sl, r8
 8006f56:	46cb      	mov	fp, r9
 8006f58:	e76c      	b.n	8006e34 <__ieee754_rem_pio2+0x19c>
 8006f5a:	4b1b      	ldr	r3, [pc, #108]	; (8006fc8 <__ieee754_rem_pio2+0x330>)
 8006f5c:	4598      	cmp	r8, r3
 8006f5e:	dd35      	ble.n	8006fcc <__ieee754_rem_pio2+0x334>
 8006f60:	ee10 2a10 	vmov	r2, s0
 8006f64:	463b      	mov	r3, r7
 8006f66:	4630      	mov	r0, r6
 8006f68:	4639      	mov	r1, r7
 8006f6a:	f7fe fed7 	bl	8005d1c <__aeabi_dsub>
 8006f6e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006f72:	e9c4 0100 	strd	r0, r1, [r4]
 8006f76:	e6a1      	b.n	8006cbc <__ieee754_rem_pio2+0x24>
 8006f78:	54400000 	.word	0x54400000
 8006f7c:	3ff921fb 	.word	0x3ff921fb
 8006f80:	1a626331 	.word	0x1a626331
 8006f84:	3dd0b461 	.word	0x3dd0b461
 8006f88:	1a600000 	.word	0x1a600000
 8006f8c:	3dd0b461 	.word	0x3dd0b461
 8006f90:	2e037073 	.word	0x2e037073
 8006f94:	3ba3198a 	.word	0x3ba3198a
 8006f98:	6dc9c883 	.word	0x6dc9c883
 8006f9c:	3fe45f30 	.word	0x3fe45f30
 8006fa0:	2e000000 	.word	0x2e000000
 8006fa4:	3ba3198a 	.word	0x3ba3198a
 8006fa8:	252049c1 	.word	0x252049c1
 8006fac:	397b839a 	.word	0x397b839a
 8006fb0:	3fe921fb 	.word	0x3fe921fb
 8006fb4:	4002d97b 	.word	0x4002d97b
 8006fb8:	3ff921fb 	.word	0x3ff921fb
 8006fbc:	413921fb 	.word	0x413921fb
 8006fc0:	3fe00000 	.word	0x3fe00000
 8006fc4:	080089d0 	.word	0x080089d0
 8006fc8:	7fefffff 	.word	0x7fefffff
 8006fcc:	ea4f 5528 	mov.w	r5, r8, asr #20
 8006fd0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8006fd4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8006fd8:	4630      	mov	r0, r6
 8006fda:	460f      	mov	r7, r1
 8006fdc:	f7ff faec 	bl	80065b8 <__aeabi_d2iz>
 8006fe0:	f7fe ffea 	bl	8005fb8 <__aeabi_i2d>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	4630      	mov	r0, r6
 8006fea:	4639      	mov	r1, r7
 8006fec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006ff0:	f7fe fe94 	bl	8005d1c <__aeabi_dsub>
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	4b1f      	ldr	r3, [pc, #124]	; (8007074 <__ieee754_rem_pio2+0x3dc>)
 8006ff8:	f7ff f844 	bl	8006084 <__aeabi_dmul>
 8006ffc:	460f      	mov	r7, r1
 8006ffe:	4606      	mov	r6, r0
 8007000:	f7ff fada 	bl	80065b8 <__aeabi_d2iz>
 8007004:	f7fe ffd8 	bl	8005fb8 <__aeabi_i2d>
 8007008:	4602      	mov	r2, r0
 800700a:	460b      	mov	r3, r1
 800700c:	4630      	mov	r0, r6
 800700e:	4639      	mov	r1, r7
 8007010:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007014:	f7fe fe82 	bl	8005d1c <__aeabi_dsub>
 8007018:	2200      	movs	r2, #0
 800701a:	4b16      	ldr	r3, [pc, #88]	; (8007074 <__ieee754_rem_pio2+0x3dc>)
 800701c:	f7ff f832 	bl	8006084 <__aeabi_dmul>
 8007020:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007024:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8007028:	f04f 0803 	mov.w	r8, #3
 800702c:	2600      	movs	r6, #0
 800702e:	2700      	movs	r7, #0
 8007030:	4632      	mov	r2, r6
 8007032:	463b      	mov	r3, r7
 8007034:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8007038:	f108 3aff 	add.w	sl, r8, #4294967295
 800703c:	f7ff fa8a 	bl	8006554 <__aeabi_dcmpeq>
 8007040:	b9b0      	cbnz	r0, 8007070 <__ieee754_rem_pio2+0x3d8>
 8007042:	4b0d      	ldr	r3, [pc, #52]	; (8007078 <__ieee754_rem_pio2+0x3e0>)
 8007044:	9301      	str	r3, [sp, #4]
 8007046:	2302      	movs	r3, #2
 8007048:	9300      	str	r3, [sp, #0]
 800704a:	462a      	mov	r2, r5
 800704c:	4643      	mov	r3, r8
 800704e:	4621      	mov	r1, r4
 8007050:	a806      	add	r0, sp, #24
 8007052:	f000 f8fd 	bl	8007250 <__kernel_rem_pio2>
 8007056:	9b04      	ldr	r3, [sp, #16]
 8007058:	2b00      	cmp	r3, #0
 800705a:	4605      	mov	r5, r0
 800705c:	f6bf ae58 	bge.w	8006d10 <__ieee754_rem_pio2+0x78>
 8007060:	6863      	ldr	r3, [r4, #4]
 8007062:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007066:	6063      	str	r3, [r4, #4]
 8007068:	68e3      	ldr	r3, [r4, #12]
 800706a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800706e:	e6fb      	b.n	8006e68 <__ieee754_rem_pio2+0x1d0>
 8007070:	46d0      	mov	r8, sl
 8007072:	e7dd      	b.n	8007030 <__ieee754_rem_pio2+0x398>
 8007074:	41700000 	.word	0x41700000
 8007078:	08008a50 	.word	0x08008a50
 800707c:	00000000 	.word	0x00000000

08007080 <__kernel_cos>:
 8007080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007084:	ec59 8b10 	vmov	r8, r9, d0
 8007088:	f029 4700 	bic.w	r7, r9, #2147483648	; 0x80000000
 800708c:	b085      	sub	sp, #20
 800708e:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 8007092:	ed8d 1b00 	vstr	d1, [sp]
 8007096:	da07      	bge.n	80070a8 <__kernel_cos+0x28>
 8007098:	ee10 0a10 	vmov	r0, s0
 800709c:	4649      	mov	r1, r9
 800709e:	f7ff fa8b 	bl	80065b8 <__aeabi_d2iz>
 80070a2:	2800      	cmp	r0, #0
 80070a4:	f000 80aa 	beq.w	80071fc <__kernel_cos+0x17c>
 80070a8:	4642      	mov	r2, r8
 80070aa:	464b      	mov	r3, r9
 80070ac:	4640      	mov	r0, r8
 80070ae:	4649      	mov	r1, r9
 80070b0:	f7fe ffe8 	bl	8006084 <__aeabi_dmul>
 80070b4:	a359      	add	r3, pc, #356	; (adr r3, 800721c <__kernel_cos+0x19c>)
 80070b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ba:	4604      	mov	r4, r0
 80070bc:	460d      	mov	r5, r1
 80070be:	f7fe ffe1 	bl	8006084 <__aeabi_dmul>
 80070c2:	a358      	add	r3, pc, #352	; (adr r3, 8007224 <__kernel_cos+0x1a4>)
 80070c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c8:	f7fe fe2a 	bl	8005d20 <__adddf3>
 80070cc:	4622      	mov	r2, r4
 80070ce:	462b      	mov	r3, r5
 80070d0:	f7fe ffd8 	bl	8006084 <__aeabi_dmul>
 80070d4:	a355      	add	r3, pc, #340	; (adr r3, 800722c <__kernel_cos+0x1ac>)
 80070d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070da:	f7fe fe1f 	bl	8005d1c <__aeabi_dsub>
 80070de:	4622      	mov	r2, r4
 80070e0:	462b      	mov	r3, r5
 80070e2:	f7fe ffcf 	bl	8006084 <__aeabi_dmul>
 80070e6:	a353      	add	r3, pc, #332	; (adr r3, 8007234 <__kernel_cos+0x1b4>)
 80070e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ec:	f7fe fe18 	bl	8005d20 <__adddf3>
 80070f0:	4622      	mov	r2, r4
 80070f2:	462b      	mov	r3, r5
 80070f4:	f7fe ffc6 	bl	8006084 <__aeabi_dmul>
 80070f8:	a350      	add	r3, pc, #320	; (adr r3, 800723c <__kernel_cos+0x1bc>)
 80070fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070fe:	f7fe fe0d 	bl	8005d1c <__aeabi_dsub>
 8007102:	4622      	mov	r2, r4
 8007104:	462b      	mov	r3, r5
 8007106:	f7fe ffbd 	bl	8006084 <__aeabi_dmul>
 800710a:	a34e      	add	r3, pc, #312	; (adr r3, 8007244 <__kernel_cos+0x1c4>)
 800710c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007110:	f7fe fe06 	bl	8005d20 <__adddf3>
 8007114:	462b      	mov	r3, r5
 8007116:	4622      	mov	r2, r4
 8007118:	f7fe ffb4 	bl	8006084 <__aeabi_dmul>
 800711c:	4b3a      	ldr	r3, [pc, #232]	; (8007208 <__kernel_cos+0x188>)
 800711e:	429f      	cmp	r7, r3
 8007120:	4682      	mov	sl, r0
 8007122:	468b      	mov	fp, r1
 8007124:	dc2c      	bgt.n	8007180 <__kernel_cos+0x100>
 8007126:	2200      	movs	r2, #0
 8007128:	4b38      	ldr	r3, [pc, #224]	; (800720c <__kernel_cos+0x18c>)
 800712a:	4620      	mov	r0, r4
 800712c:	4629      	mov	r1, r5
 800712e:	f7fe ffa9 	bl	8006084 <__aeabi_dmul>
 8007132:	4652      	mov	r2, sl
 8007134:	4606      	mov	r6, r0
 8007136:	460f      	mov	r7, r1
 8007138:	465b      	mov	r3, fp
 800713a:	4620      	mov	r0, r4
 800713c:	4629      	mov	r1, r5
 800713e:	f7fe ffa1 	bl	8006084 <__aeabi_dmul>
 8007142:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007146:	4604      	mov	r4, r0
 8007148:	460d      	mov	r5, r1
 800714a:	4640      	mov	r0, r8
 800714c:	4649      	mov	r1, r9
 800714e:	f7fe ff99 	bl	8006084 <__aeabi_dmul>
 8007152:	4602      	mov	r2, r0
 8007154:	460b      	mov	r3, r1
 8007156:	4620      	mov	r0, r4
 8007158:	4629      	mov	r1, r5
 800715a:	f7fe fddf 	bl	8005d1c <__aeabi_dsub>
 800715e:	4602      	mov	r2, r0
 8007160:	460b      	mov	r3, r1
 8007162:	4630      	mov	r0, r6
 8007164:	4639      	mov	r1, r7
 8007166:	f7fe fdd9 	bl	8005d1c <__aeabi_dsub>
 800716a:	460b      	mov	r3, r1
 800716c:	4928      	ldr	r1, [pc, #160]	; (8007210 <__kernel_cos+0x190>)
 800716e:	4602      	mov	r2, r0
 8007170:	2000      	movs	r0, #0
 8007172:	f7fe fdd3 	bl	8005d1c <__aeabi_dsub>
 8007176:	ec41 0b10 	vmov	d0, r0, r1
 800717a:	b005      	add	sp, #20
 800717c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007180:	4b24      	ldr	r3, [pc, #144]	; (8007214 <__kernel_cos+0x194>)
 8007182:	4923      	ldr	r1, [pc, #140]	; (8007210 <__kernel_cos+0x190>)
 8007184:	429f      	cmp	r7, r3
 8007186:	bfd7      	itett	le
 8007188:	f5a7 1300 	suble.w	r3, r7, #2097152	; 0x200000
 800718c:	4f22      	ldrgt	r7, [pc, #136]	; (8007218 <__kernel_cos+0x198>)
 800718e:	2200      	movle	r2, #0
 8007190:	4616      	movle	r6, r2
 8007192:	bfd4      	ite	le
 8007194:	461f      	movle	r7, r3
 8007196:	2600      	movgt	r6, #0
 8007198:	4632      	mov	r2, r6
 800719a:	463b      	mov	r3, r7
 800719c:	2000      	movs	r0, #0
 800719e:	f7fe fdbd 	bl	8005d1c <__aeabi_dsub>
 80071a2:	2200      	movs	r2, #0
 80071a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071a8:	4b18      	ldr	r3, [pc, #96]	; (800720c <__kernel_cos+0x18c>)
 80071aa:	4620      	mov	r0, r4
 80071ac:	4629      	mov	r1, r5
 80071ae:	f7fe ff69 	bl	8006084 <__aeabi_dmul>
 80071b2:	4632      	mov	r2, r6
 80071b4:	463b      	mov	r3, r7
 80071b6:	f7fe fdb1 	bl	8005d1c <__aeabi_dsub>
 80071ba:	4652      	mov	r2, sl
 80071bc:	4606      	mov	r6, r0
 80071be:	460f      	mov	r7, r1
 80071c0:	465b      	mov	r3, fp
 80071c2:	4620      	mov	r0, r4
 80071c4:	4629      	mov	r1, r5
 80071c6:	f7fe ff5d 	bl	8006084 <__aeabi_dmul>
 80071ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80071ce:	4604      	mov	r4, r0
 80071d0:	460d      	mov	r5, r1
 80071d2:	4640      	mov	r0, r8
 80071d4:	4649      	mov	r1, r9
 80071d6:	f7fe ff55 	bl	8006084 <__aeabi_dmul>
 80071da:	4602      	mov	r2, r0
 80071dc:	460b      	mov	r3, r1
 80071de:	4620      	mov	r0, r4
 80071e0:	4629      	mov	r1, r5
 80071e2:	f7fe fd9b 	bl	8005d1c <__aeabi_dsub>
 80071e6:	4602      	mov	r2, r0
 80071e8:	460b      	mov	r3, r1
 80071ea:	4630      	mov	r0, r6
 80071ec:	4639      	mov	r1, r7
 80071ee:	f7fe fd95 	bl	8005d1c <__aeabi_dsub>
 80071f2:	4602      	mov	r2, r0
 80071f4:	460b      	mov	r3, r1
 80071f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071fa:	e7ba      	b.n	8007172 <__kernel_cos+0xf2>
 80071fc:	2000      	movs	r0, #0
 80071fe:	4904      	ldr	r1, [pc, #16]	; (8007210 <__kernel_cos+0x190>)
 8007200:	e7b9      	b.n	8007176 <__kernel_cos+0xf6>
 8007202:	bf00      	nop
 8007204:	f3af 8000 	nop.w
 8007208:	3fd33332 	.word	0x3fd33332
 800720c:	3fe00000 	.word	0x3fe00000
 8007210:	3ff00000 	.word	0x3ff00000
 8007214:	3fe90000 	.word	0x3fe90000
 8007218:	3fd20000 	.word	0x3fd20000
 800721c:	be8838d4 	.word	0xbe8838d4
 8007220:	bda8fae9 	.word	0xbda8fae9
 8007224:	bdb4b1c4 	.word	0xbdb4b1c4
 8007228:	3e21ee9e 	.word	0x3e21ee9e
 800722c:	809c52ad 	.word	0x809c52ad
 8007230:	3e927e4f 	.word	0x3e927e4f
 8007234:	19cb1590 	.word	0x19cb1590
 8007238:	3efa01a0 	.word	0x3efa01a0
 800723c:	16c15177 	.word	0x16c15177
 8007240:	3f56c16c 	.word	0x3f56c16c
 8007244:	5555554c 	.word	0x5555554c
 8007248:	3fa55555 	.word	0x3fa55555
 800724c:	00000000 	.word	0x00000000

08007250 <__kernel_rem_pio2>:
 8007250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007254:	ed2d 8b02 	vpush	{d8}
 8007258:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800725c:	1ed4      	subs	r4, r2, #3
 800725e:	9306      	str	r3, [sp, #24]
 8007260:	9102      	str	r1, [sp, #8]
 8007262:	4bc3      	ldr	r3, [pc, #780]	; (8007570 <__kernel_rem_pio2+0x320>)
 8007264:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8007266:	9009      	str	r0, [sp, #36]	; 0x24
 8007268:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800726c:	9300      	str	r3, [sp, #0]
 800726e:	9b06      	ldr	r3, [sp, #24]
 8007270:	3b01      	subs	r3, #1
 8007272:	9304      	str	r3, [sp, #16]
 8007274:	2318      	movs	r3, #24
 8007276:	fb94 f4f3 	sdiv	r4, r4, r3
 800727a:	f06f 0317 	mvn.w	r3, #23
 800727e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8007282:	fb04 3303 	mla	r3, r4, r3, r3
 8007286:	eb03 0a02 	add.w	sl, r3, r2
 800728a:	9b00      	ldr	r3, [sp, #0]
 800728c:	9a04      	ldr	r2, [sp, #16]
 800728e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8007560 <__kernel_rem_pio2+0x310>
 8007292:	eb03 0802 	add.w	r8, r3, r2
 8007296:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8007298:	1aa7      	subs	r7, r4, r2
 800729a:	ae20      	add	r6, sp, #128	; 0x80
 800729c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80072a0:	2500      	movs	r5, #0
 80072a2:	4545      	cmp	r5, r8
 80072a4:	dd13      	ble.n	80072ce <__kernel_rem_pio2+0x7e>
 80072a6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8007560 <__kernel_rem_pio2+0x310>
 80072aa:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80072ae:	2600      	movs	r6, #0
 80072b0:	9b00      	ldr	r3, [sp, #0]
 80072b2:	429e      	cmp	r6, r3
 80072b4:	dc32      	bgt.n	800731c <__kernel_rem_pio2+0xcc>
 80072b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072b8:	9303      	str	r3, [sp, #12]
 80072ba:	9b06      	ldr	r3, [sp, #24]
 80072bc:	199d      	adds	r5, r3, r6
 80072be:	ab20      	add	r3, sp, #128	; 0x80
 80072c0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80072c4:	9308      	str	r3, [sp, #32]
 80072c6:	ec59 8b18 	vmov	r8, r9, d8
 80072ca:	2700      	movs	r7, #0
 80072cc:	e01f      	b.n	800730e <__kernel_rem_pio2+0xbe>
 80072ce:	42ef      	cmn	r7, r5
 80072d0:	d407      	bmi.n	80072e2 <__kernel_rem_pio2+0x92>
 80072d2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80072d6:	f7fe fe6f 	bl	8005fb8 <__aeabi_i2d>
 80072da:	e8e6 0102 	strd	r0, r1, [r6], #8
 80072de:	3501      	adds	r5, #1
 80072e0:	e7df      	b.n	80072a2 <__kernel_rem_pio2+0x52>
 80072e2:	ec51 0b18 	vmov	r0, r1, d8
 80072e6:	e7f8      	b.n	80072da <__kernel_rem_pio2+0x8a>
 80072e8:	9908      	ldr	r1, [sp, #32]
 80072ea:	9d03      	ldr	r5, [sp, #12]
 80072ec:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80072f0:	9108      	str	r1, [sp, #32]
 80072f2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80072f6:	9503      	str	r5, [sp, #12]
 80072f8:	f7fe fec4 	bl	8006084 <__aeabi_dmul>
 80072fc:	4602      	mov	r2, r0
 80072fe:	460b      	mov	r3, r1
 8007300:	4640      	mov	r0, r8
 8007302:	4649      	mov	r1, r9
 8007304:	f7fe fd0c 	bl	8005d20 <__adddf3>
 8007308:	3701      	adds	r7, #1
 800730a:	4680      	mov	r8, r0
 800730c:	4689      	mov	r9, r1
 800730e:	9b04      	ldr	r3, [sp, #16]
 8007310:	429f      	cmp	r7, r3
 8007312:	dde9      	ble.n	80072e8 <__kernel_rem_pio2+0x98>
 8007314:	e8eb 8902 	strd	r8, r9, [fp], #8
 8007318:	3601      	adds	r6, #1
 800731a:	e7c9      	b.n	80072b0 <__kernel_rem_pio2+0x60>
 800731c:	9b00      	ldr	r3, [sp, #0]
 800731e:	9f00      	ldr	r7, [sp, #0]
 8007320:	aa0c      	add	r2, sp, #48	; 0x30
 8007322:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007326:	930b      	str	r3, [sp, #44]	; 0x2c
 8007328:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800732a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800732e:	930a      	str	r3, [sp, #40]	; 0x28
 8007330:	ab98      	add	r3, sp, #608	; 0x260
 8007332:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 8007336:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800733a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800733e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8007342:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007346:	9308      	str	r3, [sp, #32]
 8007348:	9a08      	ldr	r2, [sp, #32]
 800734a:	ab98      	add	r3, sp, #608	; 0x260
 800734c:	4413      	add	r3, r2
 800734e:	f1a3 0b98 	sub.w	fp, r3, #152	; 0x98
 8007352:	2600      	movs	r6, #0
 8007354:	1bbb      	subs	r3, r7, r6
 8007356:	2b00      	cmp	r3, #0
 8007358:	dc77      	bgt.n	800744a <__kernel_rem_pio2+0x1fa>
 800735a:	ec49 8b10 	vmov	d0, r8, r9
 800735e:	4650      	mov	r0, sl
 8007360:	f000 fc0e 	bl	8007b80 <scalbn>
 8007364:	ec55 4b10 	vmov	r4, r5, d0
 8007368:	2200      	movs	r2, #0
 800736a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800736e:	ee10 0a10 	vmov	r0, s0
 8007372:	4629      	mov	r1, r5
 8007374:	f7fe fe86 	bl	8006084 <__aeabi_dmul>
 8007378:	ec41 0b10 	vmov	d0, r0, r1
 800737c:	f000 fb7c 	bl	8007a78 <floor>
 8007380:	2200      	movs	r2, #0
 8007382:	ec51 0b10 	vmov	r0, r1, d0
 8007386:	4b7b      	ldr	r3, [pc, #492]	; (8007574 <__kernel_rem_pio2+0x324>)
 8007388:	f7fe fe7c 	bl	8006084 <__aeabi_dmul>
 800738c:	4602      	mov	r2, r0
 800738e:	460b      	mov	r3, r1
 8007390:	4620      	mov	r0, r4
 8007392:	4629      	mov	r1, r5
 8007394:	f7fe fcc2 	bl	8005d1c <__aeabi_dsub>
 8007398:	460d      	mov	r5, r1
 800739a:	4604      	mov	r4, r0
 800739c:	f7ff f90c 	bl	80065b8 <__aeabi_d2iz>
 80073a0:	9003      	str	r0, [sp, #12]
 80073a2:	f7fe fe09 	bl	8005fb8 <__aeabi_i2d>
 80073a6:	4602      	mov	r2, r0
 80073a8:	460b      	mov	r3, r1
 80073aa:	4620      	mov	r0, r4
 80073ac:	4629      	mov	r1, r5
 80073ae:	f7fe fcb5 	bl	8005d1c <__aeabi_dsub>
 80073b2:	f1ba 0f00 	cmp.w	sl, #0
 80073b6:	4680      	mov	r8, r0
 80073b8:	4689      	mov	r9, r1
 80073ba:	dd6b      	ble.n	8007494 <__kernel_rem_pio2+0x244>
 80073bc:	1e7a      	subs	r2, r7, #1
 80073be:	ab0c      	add	r3, sp, #48	; 0x30
 80073c0:	f1ca 0118 	rsb	r1, sl, #24
 80073c4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80073c8:	9c03      	ldr	r4, [sp, #12]
 80073ca:	fa40 f301 	asr.w	r3, r0, r1
 80073ce:	441c      	add	r4, r3
 80073d0:	408b      	lsls	r3, r1
 80073d2:	1ac0      	subs	r0, r0, r3
 80073d4:	ab0c      	add	r3, sp, #48	; 0x30
 80073d6:	9403      	str	r4, [sp, #12]
 80073d8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80073dc:	f1ca 0317 	rsb	r3, sl, #23
 80073e0:	fa40 fb03 	asr.w	fp, r0, r3
 80073e4:	f1bb 0f00 	cmp.w	fp, #0
 80073e8:	dd62      	ble.n	80074b0 <__kernel_rem_pio2+0x260>
 80073ea:	9b03      	ldr	r3, [sp, #12]
 80073ec:	2200      	movs	r2, #0
 80073ee:	3301      	adds	r3, #1
 80073f0:	9303      	str	r3, [sp, #12]
 80073f2:	4614      	mov	r4, r2
 80073f4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80073f8:	4297      	cmp	r7, r2
 80073fa:	f300 8089 	bgt.w	8007510 <__kernel_rem_pio2+0x2c0>
 80073fe:	f1ba 0f00 	cmp.w	sl, #0
 8007402:	dd07      	ble.n	8007414 <__kernel_rem_pio2+0x1c4>
 8007404:	f1ba 0f01 	cmp.w	sl, #1
 8007408:	f000 8096 	beq.w	8007538 <__kernel_rem_pio2+0x2e8>
 800740c:	f1ba 0f02 	cmp.w	sl, #2
 8007410:	f000 809c 	beq.w	800754c <__kernel_rem_pio2+0x2fc>
 8007414:	f1bb 0f02 	cmp.w	fp, #2
 8007418:	d14a      	bne.n	80074b0 <__kernel_rem_pio2+0x260>
 800741a:	4642      	mov	r2, r8
 800741c:	464b      	mov	r3, r9
 800741e:	2000      	movs	r0, #0
 8007420:	4955      	ldr	r1, [pc, #340]	; (8007578 <__kernel_rem_pio2+0x328>)
 8007422:	f7fe fc7b 	bl	8005d1c <__aeabi_dsub>
 8007426:	4680      	mov	r8, r0
 8007428:	4689      	mov	r9, r1
 800742a:	2c00      	cmp	r4, #0
 800742c:	d040      	beq.n	80074b0 <__kernel_rem_pio2+0x260>
 800742e:	4650      	mov	r0, sl
 8007430:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8007568 <__kernel_rem_pio2+0x318>
 8007434:	f000 fba4 	bl	8007b80 <scalbn>
 8007438:	4640      	mov	r0, r8
 800743a:	4649      	mov	r1, r9
 800743c:	ec53 2b10 	vmov	r2, r3, d0
 8007440:	f7fe fc6c 	bl	8005d1c <__aeabi_dsub>
 8007444:	4680      	mov	r8, r0
 8007446:	4689      	mov	r9, r1
 8007448:	e032      	b.n	80074b0 <__kernel_rem_pio2+0x260>
 800744a:	2200      	movs	r2, #0
 800744c:	4b4b      	ldr	r3, [pc, #300]	; (800757c <__kernel_rem_pio2+0x32c>)
 800744e:	4640      	mov	r0, r8
 8007450:	4649      	mov	r1, r9
 8007452:	f7fe fe17 	bl	8006084 <__aeabi_dmul>
 8007456:	f7ff f8af 	bl	80065b8 <__aeabi_d2iz>
 800745a:	f7fe fdad 	bl	8005fb8 <__aeabi_i2d>
 800745e:	2200      	movs	r2, #0
 8007460:	4b47      	ldr	r3, [pc, #284]	; (8007580 <__kernel_rem_pio2+0x330>)
 8007462:	4604      	mov	r4, r0
 8007464:	460d      	mov	r5, r1
 8007466:	f7fe fe0d 	bl	8006084 <__aeabi_dmul>
 800746a:	4602      	mov	r2, r0
 800746c:	460b      	mov	r3, r1
 800746e:	4640      	mov	r0, r8
 8007470:	4649      	mov	r1, r9
 8007472:	f7fe fc53 	bl	8005d1c <__aeabi_dsub>
 8007476:	f7ff f89f 	bl	80065b8 <__aeabi_d2iz>
 800747a:	ab0c      	add	r3, sp, #48	; 0x30
 800747c:	4629      	mov	r1, r5
 800747e:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8007482:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007486:	4620      	mov	r0, r4
 8007488:	f7fe fc4a 	bl	8005d20 <__adddf3>
 800748c:	3601      	adds	r6, #1
 800748e:	4680      	mov	r8, r0
 8007490:	4689      	mov	r9, r1
 8007492:	e75f      	b.n	8007354 <__kernel_rem_pio2+0x104>
 8007494:	d106      	bne.n	80074a4 <__kernel_rem_pio2+0x254>
 8007496:	1e7b      	subs	r3, r7, #1
 8007498:	aa0c      	add	r2, sp, #48	; 0x30
 800749a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800749e:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80074a2:	e79f      	b.n	80073e4 <__kernel_rem_pio2+0x194>
 80074a4:	2200      	movs	r2, #0
 80074a6:	4b37      	ldr	r3, [pc, #220]	; (8007584 <__kernel_rem_pio2+0x334>)
 80074a8:	f7ff f872 	bl	8006590 <__aeabi_dcmpge>
 80074ac:	bb68      	cbnz	r0, 800750a <__kernel_rem_pio2+0x2ba>
 80074ae:	4683      	mov	fp, r0
 80074b0:	2200      	movs	r2, #0
 80074b2:	2300      	movs	r3, #0
 80074b4:	4640      	mov	r0, r8
 80074b6:	4649      	mov	r1, r9
 80074b8:	f7ff f84c 	bl	8006554 <__aeabi_dcmpeq>
 80074bc:	2800      	cmp	r0, #0
 80074be:	f000 80c1 	beq.w	8007644 <__kernel_rem_pio2+0x3f4>
 80074c2:	1e7c      	subs	r4, r7, #1
 80074c4:	4623      	mov	r3, r4
 80074c6:	2200      	movs	r2, #0
 80074c8:	9900      	ldr	r1, [sp, #0]
 80074ca:	428b      	cmp	r3, r1
 80074cc:	da5c      	bge.n	8007588 <__kernel_rem_pio2+0x338>
 80074ce:	2a00      	cmp	r2, #0
 80074d0:	f040 808b 	bne.w	80075ea <__kernel_rem_pio2+0x39a>
 80074d4:	2401      	movs	r4, #1
 80074d6:	f06f 0203 	mvn.w	r2, #3
 80074da:	fb02 f304 	mul.w	r3, r2, r4
 80074de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80074e0:	58cb      	ldr	r3, [r1, r3]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d056      	beq.n	8007594 <__kernel_rem_pio2+0x344>
 80074e6:	9b08      	ldr	r3, [sp, #32]
 80074e8:	aa98      	add	r2, sp, #608	; 0x260
 80074ea:	4413      	add	r3, r2
 80074ec:	f1a3 0b90 	sub.w	fp, r3, #144	; 0x90
 80074f0:	9b06      	ldr	r3, [sp, #24]
 80074f2:	19dd      	adds	r5, r3, r7
 80074f4:	ab20      	add	r3, sp, #128	; 0x80
 80074f6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80074fa:	19e3      	adds	r3, r4, r7
 80074fc:	1c7e      	adds	r6, r7, #1
 80074fe:	9303      	str	r3, [sp, #12]
 8007500:	9b03      	ldr	r3, [sp, #12]
 8007502:	429e      	cmp	r6, r3
 8007504:	dd48      	ble.n	8007598 <__kernel_rem_pio2+0x348>
 8007506:	461f      	mov	r7, r3
 8007508:	e712      	b.n	8007330 <__kernel_rem_pio2+0xe0>
 800750a:	f04f 0b02 	mov.w	fp, #2
 800750e:	e76c      	b.n	80073ea <__kernel_rem_pio2+0x19a>
 8007510:	ab0c      	add	r3, sp, #48	; 0x30
 8007512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007516:	b94c      	cbnz	r4, 800752c <__kernel_rem_pio2+0x2dc>
 8007518:	b12b      	cbz	r3, 8007526 <__kernel_rem_pio2+0x2d6>
 800751a:	a80c      	add	r0, sp, #48	; 0x30
 800751c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007520:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8007524:	2301      	movs	r3, #1
 8007526:	3201      	adds	r2, #1
 8007528:	461c      	mov	r4, r3
 800752a:	e765      	b.n	80073f8 <__kernel_rem_pio2+0x1a8>
 800752c:	a80c      	add	r0, sp, #48	; 0x30
 800752e:	1acb      	subs	r3, r1, r3
 8007530:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8007534:	4623      	mov	r3, r4
 8007536:	e7f6      	b.n	8007526 <__kernel_rem_pio2+0x2d6>
 8007538:	1e7a      	subs	r2, r7, #1
 800753a:	ab0c      	add	r3, sp, #48	; 0x30
 800753c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007540:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007544:	a90c      	add	r1, sp, #48	; 0x30
 8007546:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800754a:	e763      	b.n	8007414 <__kernel_rem_pio2+0x1c4>
 800754c:	1e7a      	subs	r2, r7, #1
 800754e:	ab0c      	add	r3, sp, #48	; 0x30
 8007550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007554:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007558:	e7f4      	b.n	8007544 <__kernel_rem_pio2+0x2f4>
 800755a:	bf00      	nop
 800755c:	f3af 8000 	nop.w
	...
 800756c:	3ff00000 	.word	0x3ff00000
 8007570:	08008b98 	.word	0x08008b98
 8007574:	40200000 	.word	0x40200000
 8007578:	3ff00000 	.word	0x3ff00000
 800757c:	3e700000 	.word	0x3e700000
 8007580:	41700000 	.word	0x41700000
 8007584:	3fe00000 	.word	0x3fe00000
 8007588:	a90c      	add	r1, sp, #48	; 0x30
 800758a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800758e:	3b01      	subs	r3, #1
 8007590:	430a      	orrs	r2, r1
 8007592:	e799      	b.n	80074c8 <__kernel_rem_pio2+0x278>
 8007594:	3401      	adds	r4, #1
 8007596:	e7a0      	b.n	80074da <__kernel_rem_pio2+0x28a>
 8007598:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800759a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800759e:	f7fe fd0b 	bl	8005fb8 <__aeabi_i2d>
 80075a2:	e8e5 0102 	strd	r0, r1, [r5], #8
 80075a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075a8:	9508      	str	r5, [sp, #32]
 80075aa:	461c      	mov	r4, r3
 80075ac:	2700      	movs	r7, #0
 80075ae:	f04f 0800 	mov.w	r8, #0
 80075b2:	f04f 0900 	mov.w	r9, #0
 80075b6:	9b04      	ldr	r3, [sp, #16]
 80075b8:	429f      	cmp	r7, r3
 80075ba:	dd03      	ble.n	80075c4 <__kernel_rem_pio2+0x374>
 80075bc:	e8eb 8902 	strd	r8, r9, [fp], #8
 80075c0:	3601      	adds	r6, #1
 80075c2:	e79d      	b.n	8007500 <__kernel_rem_pio2+0x2b0>
 80075c4:	9908      	ldr	r1, [sp, #32]
 80075c6:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80075ca:	9108      	str	r1, [sp, #32]
 80075cc:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80075d0:	f7fe fd58 	bl	8006084 <__aeabi_dmul>
 80075d4:	4602      	mov	r2, r0
 80075d6:	460b      	mov	r3, r1
 80075d8:	4640      	mov	r0, r8
 80075da:	4649      	mov	r1, r9
 80075dc:	f7fe fba0 	bl	8005d20 <__adddf3>
 80075e0:	3701      	adds	r7, #1
 80075e2:	4680      	mov	r8, r0
 80075e4:	4689      	mov	r9, r1
 80075e6:	e7e6      	b.n	80075b6 <__kernel_rem_pio2+0x366>
 80075e8:	3c01      	subs	r4, #1
 80075ea:	ab0c      	add	r3, sp, #48	; 0x30
 80075ec:	f1aa 0a18 	sub.w	sl, sl, #24
 80075f0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d0f7      	beq.n	80075e8 <__kernel_rem_pio2+0x398>
 80075f8:	4650      	mov	r0, sl
 80075fa:	ed9f 0bb5 	vldr	d0, [pc, #724]	; 80078d0 <__kernel_rem_pio2+0x680>
 80075fe:	f000 fabf 	bl	8007b80 <scalbn>
 8007602:	00e5      	lsls	r5, r4, #3
 8007604:	ab98      	add	r3, sp, #608	; 0x260
 8007606:	eb03 0905 	add.w	r9, r3, r5
 800760a:	ec57 6b10 	vmov	r6, r7, d0
 800760e:	f1a9 0998 	sub.w	r9, r9, #152	; 0x98
 8007612:	46a0      	mov	r8, r4
 8007614:	f1b8 0f00 	cmp.w	r8, #0
 8007618:	da4d      	bge.n	80076b6 <__kernel_rem_pio2+0x466>
 800761a:	ed9f 8baf 	vldr	d8, [pc, #700]	; 80078d8 <__kernel_rem_pio2+0x688>
 800761e:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
 8007622:	2300      	movs	r3, #0
 8007624:	9304      	str	r3, [sp, #16]
 8007626:	4657      	mov	r7, sl
 8007628:	9b04      	ldr	r3, [sp, #16]
 800762a:	ebb4 0903 	subs.w	r9, r4, r3
 800762e:	d476      	bmi.n	800771e <__kernel_rem_pio2+0x4ce>
 8007630:	4bab      	ldr	r3, [pc, #684]	; (80078e0 <__kernel_rem_pio2+0x690>)
 8007632:	461e      	mov	r6, r3
 8007634:	ab70      	add	r3, sp, #448	; 0x1c0
 8007636:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800763a:	ed8d 8b06 	vstr	d8, [sp, #24]
 800763e:	f04f 0800 	mov.w	r8, #0
 8007642:	e05e      	b.n	8007702 <__kernel_rem_pio2+0x4b2>
 8007644:	f1ca 0000 	rsb	r0, sl, #0
 8007648:	ec49 8b10 	vmov	d0, r8, r9
 800764c:	f000 fa98 	bl	8007b80 <scalbn>
 8007650:	ec55 4b10 	vmov	r4, r5, d0
 8007654:	2200      	movs	r2, #0
 8007656:	4ba3      	ldr	r3, [pc, #652]	; (80078e4 <__kernel_rem_pio2+0x694>)
 8007658:	ee10 0a10 	vmov	r0, s0
 800765c:	4629      	mov	r1, r5
 800765e:	f7fe ff97 	bl	8006590 <__aeabi_dcmpge>
 8007662:	b1f8      	cbz	r0, 80076a4 <__kernel_rem_pio2+0x454>
 8007664:	2200      	movs	r2, #0
 8007666:	4ba0      	ldr	r3, [pc, #640]	; (80078e8 <__kernel_rem_pio2+0x698>)
 8007668:	4620      	mov	r0, r4
 800766a:	4629      	mov	r1, r5
 800766c:	f7fe fd0a 	bl	8006084 <__aeabi_dmul>
 8007670:	f7fe ffa2 	bl	80065b8 <__aeabi_d2iz>
 8007674:	4606      	mov	r6, r0
 8007676:	f7fe fc9f 	bl	8005fb8 <__aeabi_i2d>
 800767a:	2200      	movs	r2, #0
 800767c:	4b99      	ldr	r3, [pc, #612]	; (80078e4 <__kernel_rem_pio2+0x694>)
 800767e:	f7fe fd01 	bl	8006084 <__aeabi_dmul>
 8007682:	460b      	mov	r3, r1
 8007684:	4602      	mov	r2, r0
 8007686:	4629      	mov	r1, r5
 8007688:	4620      	mov	r0, r4
 800768a:	f7fe fb47 	bl	8005d1c <__aeabi_dsub>
 800768e:	f7fe ff93 	bl	80065b8 <__aeabi_d2iz>
 8007692:	1c7c      	adds	r4, r7, #1
 8007694:	ab0c      	add	r3, sp, #48	; 0x30
 8007696:	f10a 0a18 	add.w	sl, sl, #24
 800769a:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800769e:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 80076a2:	e7a9      	b.n	80075f8 <__kernel_rem_pio2+0x3a8>
 80076a4:	4620      	mov	r0, r4
 80076a6:	4629      	mov	r1, r5
 80076a8:	f7fe ff86 	bl	80065b8 <__aeabi_d2iz>
 80076ac:	ab0c      	add	r3, sp, #48	; 0x30
 80076ae:	463c      	mov	r4, r7
 80076b0:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80076b4:	e7a0      	b.n	80075f8 <__kernel_rem_pio2+0x3a8>
 80076b6:	ab0c      	add	r3, sp, #48	; 0x30
 80076b8:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80076bc:	f7fe fc7c 	bl	8005fb8 <__aeabi_i2d>
 80076c0:	4632      	mov	r2, r6
 80076c2:	463b      	mov	r3, r7
 80076c4:	f7fe fcde 	bl	8006084 <__aeabi_dmul>
 80076c8:	2200      	movs	r2, #0
 80076ca:	e969 0102 	strd	r0, r1, [r9, #-8]!
 80076ce:	4b86      	ldr	r3, [pc, #536]	; (80078e8 <__kernel_rem_pio2+0x698>)
 80076d0:	4630      	mov	r0, r6
 80076d2:	4639      	mov	r1, r7
 80076d4:	f7fe fcd6 	bl	8006084 <__aeabi_dmul>
 80076d8:	f108 38ff 	add.w	r8, r8, #4294967295
 80076dc:	4606      	mov	r6, r0
 80076de:	460f      	mov	r7, r1
 80076e0:	e798      	b.n	8007614 <__kernel_rem_pio2+0x3c4>
 80076e2:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80076e6:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 80076ea:	f7fe fccb 	bl	8006084 <__aeabi_dmul>
 80076ee:	4602      	mov	r2, r0
 80076f0:	460b      	mov	r3, r1
 80076f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80076f6:	f7fe fb13 	bl	8005d20 <__adddf3>
 80076fa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80076fe:	f108 0801 	add.w	r8, r8, #1
 8007702:	9b00      	ldr	r3, [sp, #0]
 8007704:	4598      	cmp	r8, r3
 8007706:	dc02      	bgt.n	800770e <__kernel_rem_pio2+0x4be>
 8007708:	9b04      	ldr	r3, [sp, #16]
 800770a:	4598      	cmp	r8, r3
 800770c:	dde9      	ble.n	80076e2 <__kernel_rem_pio2+0x492>
 800770e:	9b04      	ldr	r3, [sp, #16]
 8007710:	ed9d 7b06 	vldr	d7, [sp, #24]
 8007714:	3301      	adds	r3, #1
 8007716:	ecaa 7b02 	vstmia	sl!, {d7}
 800771a:	9304      	str	r3, [sp, #16]
 800771c:	e784      	b.n	8007628 <__kernel_rem_pio2+0x3d8>
 800771e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007720:	2b03      	cmp	r3, #3
 8007722:	d85d      	bhi.n	80077e0 <__kernel_rem_pio2+0x590>
 8007724:	e8df f003 	tbb	[pc, r3]
 8007728:	0226264b 	.word	0x0226264b
 800772c:	ab98      	add	r3, sp, #608	; 0x260
 800772e:	441d      	add	r5, r3
 8007730:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 8007734:	462e      	mov	r6, r5
 8007736:	46a2      	mov	sl, r4
 8007738:	f1ba 0f00 	cmp.w	sl, #0
 800773c:	dc6e      	bgt.n	800781c <__kernel_rem_pio2+0x5cc>
 800773e:	462e      	mov	r6, r5
 8007740:	46a2      	mov	sl, r4
 8007742:	f1ba 0f01 	cmp.w	sl, #1
 8007746:	f300 808a 	bgt.w	800785e <__kernel_rem_pio2+0x60e>
 800774a:	2000      	movs	r0, #0
 800774c:	2100      	movs	r1, #0
 800774e:	2c01      	cmp	r4, #1
 8007750:	f300 80a6 	bgt.w	80078a0 <__kernel_rem_pio2+0x650>
 8007754:	f1bb 0f00 	cmp.w	fp, #0
 8007758:	f040 80a8 	bne.w	80078ac <__kernel_rem_pio2+0x65c>
 800775c:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
 8007760:	9c02      	ldr	r4, [sp, #8]
 8007762:	e9c4 2300 	strd	r2, r3, [r4]
 8007766:	e9dd 234a 	ldrd	r2, r3, [sp, #296]	; 0x128
 800776a:	e9c4 0104 	strd	r0, r1, [r4, #16]
 800776e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8007772:	e035      	b.n	80077e0 <__kernel_rem_pio2+0x590>
 8007774:	3508      	adds	r5, #8
 8007776:	ab48      	add	r3, sp, #288	; 0x120
 8007778:	441d      	add	r5, r3
 800777a:	4626      	mov	r6, r4
 800777c:	2000      	movs	r0, #0
 800777e:	2100      	movs	r1, #0
 8007780:	2e00      	cmp	r6, #0
 8007782:	da3c      	bge.n	80077fe <__kernel_rem_pio2+0x5ae>
 8007784:	f1bb 0f00 	cmp.w	fp, #0
 8007788:	d03f      	beq.n	800780a <__kernel_rem_pio2+0x5ba>
 800778a:	4602      	mov	r2, r0
 800778c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007790:	9d02      	ldr	r5, [sp, #8]
 8007792:	e9c5 2300 	strd	r2, r3, [r5]
 8007796:	4602      	mov	r2, r0
 8007798:	460b      	mov	r3, r1
 800779a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800779e:	f7fe fabd 	bl	8005d1c <__aeabi_dsub>
 80077a2:	ae4a      	add	r6, sp, #296	; 0x128
 80077a4:	2501      	movs	r5, #1
 80077a6:	42ac      	cmp	r4, r5
 80077a8:	da32      	bge.n	8007810 <__kernel_rem_pio2+0x5c0>
 80077aa:	f1bb 0f00 	cmp.w	fp, #0
 80077ae:	d002      	beq.n	80077b6 <__kernel_rem_pio2+0x566>
 80077b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80077b4:	4619      	mov	r1, r3
 80077b6:	9b02      	ldr	r3, [sp, #8]
 80077b8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80077bc:	e010      	b.n	80077e0 <__kernel_rem_pio2+0x590>
 80077be:	ab98      	add	r3, sp, #608	; 0x260
 80077c0:	441d      	add	r5, r3
 80077c2:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 80077c6:	2000      	movs	r0, #0
 80077c8:	2100      	movs	r1, #0
 80077ca:	2c00      	cmp	r4, #0
 80077cc:	da11      	bge.n	80077f2 <__kernel_rem_pio2+0x5a2>
 80077ce:	f1bb 0f00 	cmp.w	fp, #0
 80077d2:	d002      	beq.n	80077da <__kernel_rem_pio2+0x58a>
 80077d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80077d8:	4619      	mov	r1, r3
 80077da:	9b02      	ldr	r3, [sp, #8]
 80077dc:	e9c3 0100 	strd	r0, r1, [r3]
 80077e0:	9b03      	ldr	r3, [sp, #12]
 80077e2:	f003 0007 	and.w	r0, r3, #7
 80077e6:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80077ea:	ecbd 8b02 	vpop	{d8}
 80077ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077f2:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80077f6:	f7fe fa93 	bl	8005d20 <__adddf3>
 80077fa:	3c01      	subs	r4, #1
 80077fc:	e7e5      	b.n	80077ca <__kernel_rem_pio2+0x57a>
 80077fe:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8007802:	f7fe fa8d 	bl	8005d20 <__adddf3>
 8007806:	3e01      	subs	r6, #1
 8007808:	e7ba      	b.n	8007780 <__kernel_rem_pio2+0x530>
 800780a:	4602      	mov	r2, r0
 800780c:	460b      	mov	r3, r1
 800780e:	e7bf      	b.n	8007790 <__kernel_rem_pio2+0x540>
 8007810:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8007814:	f7fe fa84 	bl	8005d20 <__adddf3>
 8007818:	3501      	adds	r5, #1
 800781a:	e7c4      	b.n	80077a6 <__kernel_rem_pio2+0x556>
 800781c:	ed16 7b02 	vldr	d7, [r6, #-8]
 8007820:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 8007824:	ec53 2b17 	vmov	r2, r3, d7
 8007828:	4640      	mov	r0, r8
 800782a:	4649      	mov	r1, r9
 800782c:	ed8d 7b00 	vstr	d7, [sp]
 8007830:	f7fe fa76 	bl	8005d20 <__adddf3>
 8007834:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007838:	4602      	mov	r2, r0
 800783a:	460b      	mov	r3, r1
 800783c:	4640      	mov	r0, r8
 800783e:	4649      	mov	r1, r9
 8007840:	f7fe fa6c 	bl	8005d1c <__aeabi_dsub>
 8007844:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007848:	f7fe fa6a 	bl	8005d20 <__adddf3>
 800784c:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007850:	e966 0102 	strd	r0, r1, [r6, #-8]!
 8007854:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007858:	ed06 7b02 	vstr	d7, [r6, #-8]
 800785c:	e76c      	b.n	8007738 <__kernel_rem_pio2+0x4e8>
 800785e:	ed16 7b02 	vldr	d7, [r6, #-8]
 8007862:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 8007866:	ec53 2b17 	vmov	r2, r3, d7
 800786a:	4640      	mov	r0, r8
 800786c:	4649      	mov	r1, r9
 800786e:	ed8d 7b00 	vstr	d7, [sp]
 8007872:	f7fe fa55 	bl	8005d20 <__adddf3>
 8007876:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800787a:	4602      	mov	r2, r0
 800787c:	460b      	mov	r3, r1
 800787e:	4640      	mov	r0, r8
 8007880:	4649      	mov	r1, r9
 8007882:	f7fe fa4b 	bl	8005d1c <__aeabi_dsub>
 8007886:	e9dd 2300 	ldrd	r2, r3, [sp]
 800788a:	f7fe fa49 	bl	8005d20 <__adddf3>
 800788e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007892:	e966 0102 	strd	r0, r1, [r6, #-8]!
 8007896:	f10a 3aff 	add.w	sl, sl, #4294967295
 800789a:	ed06 7b02 	vstr	d7, [r6, #-8]
 800789e:	e750      	b.n	8007742 <__kernel_rem_pio2+0x4f2>
 80078a0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80078a4:	f7fe fa3c 	bl	8005d20 <__adddf3>
 80078a8:	3c01      	subs	r4, #1
 80078aa:	e750      	b.n	800774e <__kernel_rem_pio2+0x4fe>
 80078ac:	9a02      	ldr	r2, [sp, #8]
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	6013      	str	r3, [r2, #0]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6110      	str	r0, [r2, #16]
 80078b6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80078ba:	6053      	str	r3, [r2, #4]
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	6093      	str	r3, [r2, #8]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80078c6:	60d3      	str	r3, [r2, #12]
 80078c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80078cc:	6153      	str	r3, [r2, #20]
 80078ce:	e787      	b.n	80077e0 <__kernel_rem_pio2+0x590>
 80078d0:	00000000 	.word	0x00000000
 80078d4:	3ff00000 	.word	0x3ff00000
	...
 80078e0:	08008b58 	.word	0x08008b58
 80078e4:	41700000 	.word	0x41700000
 80078e8:	3e700000 	.word	0x3e700000
 80078ec:	00000000 	.word	0x00000000

080078f0 <__kernel_sin>:
 80078f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078f4:	ec55 4b10 	vmov	r4, r5, d0
 80078f8:	b085      	sub	sp, #20
 80078fa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80078fe:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007902:	ed8d 1b00 	vstr	d1, [sp]
 8007906:	9002      	str	r0, [sp, #8]
 8007908:	da06      	bge.n	8007918 <__kernel_sin+0x28>
 800790a:	ee10 0a10 	vmov	r0, s0
 800790e:	4629      	mov	r1, r5
 8007910:	f7fe fe52 	bl	80065b8 <__aeabi_d2iz>
 8007914:	2800      	cmp	r0, #0
 8007916:	d051      	beq.n	80079bc <__kernel_sin+0xcc>
 8007918:	4622      	mov	r2, r4
 800791a:	462b      	mov	r3, r5
 800791c:	4620      	mov	r0, r4
 800791e:	4629      	mov	r1, r5
 8007920:	f7fe fbb0 	bl	8006084 <__aeabi_dmul>
 8007924:	4682      	mov	sl, r0
 8007926:	468b      	mov	fp, r1
 8007928:	4602      	mov	r2, r0
 800792a:	460b      	mov	r3, r1
 800792c:	4620      	mov	r0, r4
 800792e:	4629      	mov	r1, r5
 8007930:	f7fe fba8 	bl	8006084 <__aeabi_dmul>
 8007934:	a341      	add	r3, pc, #260	; (adr r3, 8007a3c <__kernel_sin+0x14c>)
 8007936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800793a:	4680      	mov	r8, r0
 800793c:	4689      	mov	r9, r1
 800793e:	4650      	mov	r0, sl
 8007940:	4659      	mov	r1, fp
 8007942:	f7fe fb9f 	bl	8006084 <__aeabi_dmul>
 8007946:	a33f      	add	r3, pc, #252	; (adr r3, 8007a44 <__kernel_sin+0x154>)
 8007948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794c:	f7fe f9e6 	bl	8005d1c <__aeabi_dsub>
 8007950:	4652      	mov	r2, sl
 8007952:	465b      	mov	r3, fp
 8007954:	f7fe fb96 	bl	8006084 <__aeabi_dmul>
 8007958:	a33c      	add	r3, pc, #240	; (adr r3, 8007a4c <__kernel_sin+0x15c>)
 800795a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795e:	f7fe f9df 	bl	8005d20 <__adddf3>
 8007962:	4652      	mov	r2, sl
 8007964:	465b      	mov	r3, fp
 8007966:	f7fe fb8d 	bl	8006084 <__aeabi_dmul>
 800796a:	a33a      	add	r3, pc, #232	; (adr r3, 8007a54 <__kernel_sin+0x164>)
 800796c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007970:	f7fe f9d4 	bl	8005d1c <__aeabi_dsub>
 8007974:	4652      	mov	r2, sl
 8007976:	465b      	mov	r3, fp
 8007978:	f7fe fb84 	bl	8006084 <__aeabi_dmul>
 800797c:	a337      	add	r3, pc, #220	; (adr r3, 8007a5c <__kernel_sin+0x16c>)
 800797e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007982:	f7fe f9cd 	bl	8005d20 <__adddf3>
 8007986:	9b02      	ldr	r3, [sp, #8]
 8007988:	4606      	mov	r6, r0
 800798a:	460f      	mov	r7, r1
 800798c:	b9db      	cbnz	r3, 80079c6 <__kernel_sin+0xd6>
 800798e:	4602      	mov	r2, r0
 8007990:	460b      	mov	r3, r1
 8007992:	4650      	mov	r0, sl
 8007994:	4659      	mov	r1, fp
 8007996:	f7fe fb75 	bl	8006084 <__aeabi_dmul>
 800799a:	a325      	add	r3, pc, #148	; (adr r3, 8007a30 <__kernel_sin+0x140>)
 800799c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a0:	f7fe f9bc 	bl	8005d1c <__aeabi_dsub>
 80079a4:	4642      	mov	r2, r8
 80079a6:	464b      	mov	r3, r9
 80079a8:	f7fe fb6c 	bl	8006084 <__aeabi_dmul>
 80079ac:	4602      	mov	r2, r0
 80079ae:	460b      	mov	r3, r1
 80079b0:	4620      	mov	r0, r4
 80079b2:	4629      	mov	r1, r5
 80079b4:	f7fe f9b4 	bl	8005d20 <__adddf3>
 80079b8:	4604      	mov	r4, r0
 80079ba:	460d      	mov	r5, r1
 80079bc:	ec45 4b10 	vmov	d0, r4, r5
 80079c0:	b005      	add	sp, #20
 80079c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079c6:	2200      	movs	r2, #0
 80079c8:	4b1b      	ldr	r3, [pc, #108]	; (8007a38 <__kernel_sin+0x148>)
 80079ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80079ce:	f7fe fb59 	bl	8006084 <__aeabi_dmul>
 80079d2:	4632      	mov	r2, r6
 80079d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079d8:	463b      	mov	r3, r7
 80079da:	4640      	mov	r0, r8
 80079dc:	4649      	mov	r1, r9
 80079de:	f7fe fb51 	bl	8006084 <__aeabi_dmul>
 80079e2:	4602      	mov	r2, r0
 80079e4:	460b      	mov	r3, r1
 80079e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079ea:	f7fe f997 	bl	8005d1c <__aeabi_dsub>
 80079ee:	4652      	mov	r2, sl
 80079f0:	465b      	mov	r3, fp
 80079f2:	f7fe fb47 	bl	8006084 <__aeabi_dmul>
 80079f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80079fa:	f7fe f98f 	bl	8005d1c <__aeabi_dsub>
 80079fe:	a30c      	add	r3, pc, #48	; (adr r3, 8007a30 <__kernel_sin+0x140>)
 8007a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a04:	4606      	mov	r6, r0
 8007a06:	460f      	mov	r7, r1
 8007a08:	4640      	mov	r0, r8
 8007a0a:	4649      	mov	r1, r9
 8007a0c:	f7fe fb3a 	bl	8006084 <__aeabi_dmul>
 8007a10:	4602      	mov	r2, r0
 8007a12:	460b      	mov	r3, r1
 8007a14:	4630      	mov	r0, r6
 8007a16:	4639      	mov	r1, r7
 8007a18:	f7fe f982 	bl	8005d20 <__adddf3>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	460b      	mov	r3, r1
 8007a20:	4620      	mov	r0, r4
 8007a22:	4629      	mov	r1, r5
 8007a24:	f7fe f97a 	bl	8005d1c <__aeabi_dsub>
 8007a28:	e7c6      	b.n	80079b8 <__kernel_sin+0xc8>
 8007a2a:	bf00      	nop
 8007a2c:	f3af 8000 	nop.w
 8007a30:	55555549 	.word	0x55555549
 8007a34:	3fc55555 	.word	0x3fc55555
 8007a38:	3fe00000 	.word	0x3fe00000
 8007a3c:	5acfd57c 	.word	0x5acfd57c
 8007a40:	3de5d93a 	.word	0x3de5d93a
 8007a44:	8a2b9ceb 	.word	0x8a2b9ceb
 8007a48:	3e5ae5e6 	.word	0x3e5ae5e6
 8007a4c:	57b1fe7d 	.word	0x57b1fe7d
 8007a50:	3ec71de3 	.word	0x3ec71de3
 8007a54:	19c161d5 	.word	0x19c161d5
 8007a58:	3f2a01a0 	.word	0x3f2a01a0
 8007a5c:	1110f8a6 	.word	0x1110f8a6
 8007a60:	3f811111 	.word	0x3f811111

08007a64 <fabs>:
 8007a64:	ec53 2b10 	vmov	r2, r3, d0
 8007a68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a6c:	ec43 2b10 	vmov	d0, r2, r3
 8007a70:	4770      	bx	lr
 8007a72:	0000      	movs	r0, r0
 8007a74:	0000      	movs	r0, r0
	...

08007a78 <floor>:
 8007a78:	ec51 0b10 	vmov	r0, r1, d0
 8007a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a80:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007a84:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007a88:	2e13      	cmp	r6, #19
 8007a8a:	ee10 8a10 	vmov	r8, s0
 8007a8e:	460c      	mov	r4, r1
 8007a90:	ee10 5a10 	vmov	r5, s0
 8007a94:	dc35      	bgt.n	8007b02 <floor+0x8a>
 8007a96:	2e00      	cmp	r6, #0
 8007a98:	da17      	bge.n	8007aca <floor+0x52>
 8007a9a:	a335      	add	r3, pc, #212	; (adr r3, 8007b70 <floor+0xf8>)
 8007a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa0:	f7fe f93e 	bl	8005d20 <__adddf3>
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	f7fe fd7c 	bl	80065a4 <__aeabi_dcmpgt>
 8007aac:	b150      	cbz	r0, 8007ac4 <floor+0x4c>
 8007aae:	2c00      	cmp	r4, #0
 8007ab0:	da5a      	bge.n	8007b68 <floor+0xf0>
 8007ab2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007ab6:	ea53 0308 	orrs.w	r3, r3, r8
 8007aba:	4b2f      	ldr	r3, [pc, #188]	; (8007b78 <floor+0x100>)
 8007abc:	f04f 0500 	mov.w	r5, #0
 8007ac0:	bf18      	it	ne
 8007ac2:	461c      	movne	r4, r3
 8007ac4:	4621      	mov	r1, r4
 8007ac6:	4628      	mov	r0, r5
 8007ac8:	e025      	b.n	8007b16 <floor+0x9e>
 8007aca:	4f2c      	ldr	r7, [pc, #176]	; (8007b7c <floor+0x104>)
 8007acc:	4137      	asrs	r7, r6
 8007ace:	ea01 0307 	and.w	r3, r1, r7
 8007ad2:	4303      	orrs	r3, r0
 8007ad4:	d01f      	beq.n	8007b16 <floor+0x9e>
 8007ad6:	a326      	add	r3, pc, #152	; (adr r3, 8007b70 <floor+0xf8>)
 8007ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007adc:	f7fe f920 	bl	8005d20 <__adddf3>
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	f7fe fd5e 	bl	80065a4 <__aeabi_dcmpgt>
 8007ae8:	2800      	cmp	r0, #0
 8007aea:	d0eb      	beq.n	8007ac4 <floor+0x4c>
 8007aec:	2c00      	cmp	r4, #0
 8007aee:	bfbe      	ittt	lt
 8007af0:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007af4:	fa43 f606 	asrlt.w	r6, r3, r6
 8007af8:	19a4      	addlt	r4, r4, r6
 8007afa:	ea24 0407 	bic.w	r4, r4, r7
 8007afe:	2500      	movs	r5, #0
 8007b00:	e7e0      	b.n	8007ac4 <floor+0x4c>
 8007b02:	2e33      	cmp	r6, #51	; 0x33
 8007b04:	dd0b      	ble.n	8007b1e <floor+0xa6>
 8007b06:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007b0a:	d104      	bne.n	8007b16 <floor+0x9e>
 8007b0c:	ee10 2a10 	vmov	r2, s0
 8007b10:	460b      	mov	r3, r1
 8007b12:	f7fe f905 	bl	8005d20 <__adddf3>
 8007b16:	ec41 0b10 	vmov	d0, r0, r1
 8007b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b1e:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8007b22:	f04f 33ff 	mov.w	r3, #4294967295
 8007b26:	fa23 f707 	lsr.w	r7, r3, r7
 8007b2a:	4238      	tst	r0, r7
 8007b2c:	d0f3      	beq.n	8007b16 <floor+0x9e>
 8007b2e:	a310      	add	r3, pc, #64	; (adr r3, 8007b70 <floor+0xf8>)
 8007b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b34:	f7fe f8f4 	bl	8005d20 <__adddf3>
 8007b38:	2200      	movs	r2, #0
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	f7fe fd32 	bl	80065a4 <__aeabi_dcmpgt>
 8007b40:	2800      	cmp	r0, #0
 8007b42:	d0bf      	beq.n	8007ac4 <floor+0x4c>
 8007b44:	2c00      	cmp	r4, #0
 8007b46:	da02      	bge.n	8007b4e <floor+0xd6>
 8007b48:	2e14      	cmp	r6, #20
 8007b4a:	d103      	bne.n	8007b54 <floor+0xdc>
 8007b4c:	3401      	adds	r4, #1
 8007b4e:	ea25 0507 	bic.w	r5, r5, r7
 8007b52:	e7b7      	b.n	8007ac4 <floor+0x4c>
 8007b54:	2301      	movs	r3, #1
 8007b56:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007b5a:	fa03 f606 	lsl.w	r6, r3, r6
 8007b5e:	4435      	add	r5, r6
 8007b60:	45a8      	cmp	r8, r5
 8007b62:	bf88      	it	hi
 8007b64:	18e4      	addhi	r4, r4, r3
 8007b66:	e7f2      	b.n	8007b4e <floor+0xd6>
 8007b68:	2500      	movs	r5, #0
 8007b6a:	462c      	mov	r4, r5
 8007b6c:	e7aa      	b.n	8007ac4 <floor+0x4c>
 8007b6e:	bf00      	nop
 8007b70:	8800759c 	.word	0x8800759c
 8007b74:	7e37e43c 	.word	0x7e37e43c
 8007b78:	bff00000 	.word	0xbff00000
 8007b7c:	000fffff 	.word	0x000fffff

08007b80 <scalbn>:
 8007b80:	b570      	push	{r4, r5, r6, lr}
 8007b82:	ec55 4b10 	vmov	r4, r5, d0
 8007b86:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007b8a:	4606      	mov	r6, r0
 8007b8c:	462b      	mov	r3, r5
 8007b8e:	b9b2      	cbnz	r2, 8007bbe <scalbn+0x3e>
 8007b90:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007b94:	4323      	orrs	r3, r4
 8007b96:	d03c      	beq.n	8007c12 <scalbn+0x92>
 8007b98:	2200      	movs	r2, #0
 8007b9a:	4b33      	ldr	r3, [pc, #204]	; (8007c68 <scalbn+0xe8>)
 8007b9c:	4629      	mov	r1, r5
 8007b9e:	ee10 0a10 	vmov	r0, s0
 8007ba2:	f7fe fa6f 	bl	8006084 <__aeabi_dmul>
 8007ba6:	4a31      	ldr	r2, [pc, #196]	; (8007c6c <scalbn+0xec>)
 8007ba8:	4296      	cmp	r6, r2
 8007baa:	4604      	mov	r4, r0
 8007bac:	460d      	mov	r5, r1
 8007bae:	460b      	mov	r3, r1
 8007bb0:	da13      	bge.n	8007bda <scalbn+0x5a>
 8007bb2:	a329      	add	r3, pc, #164	; (adr r3, 8007c58 <scalbn+0xd8>)
 8007bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb8:	f7fe fa64 	bl	8006084 <__aeabi_dmul>
 8007bbc:	e00a      	b.n	8007bd4 <scalbn+0x54>
 8007bbe:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007bc2:	428a      	cmp	r2, r1
 8007bc4:	d10c      	bne.n	8007be0 <scalbn+0x60>
 8007bc6:	ee10 2a10 	vmov	r2, s0
 8007bca:	462b      	mov	r3, r5
 8007bcc:	4620      	mov	r0, r4
 8007bce:	4629      	mov	r1, r5
 8007bd0:	f7fe f8a6 	bl	8005d20 <__adddf3>
 8007bd4:	4604      	mov	r4, r0
 8007bd6:	460d      	mov	r5, r1
 8007bd8:	e01b      	b.n	8007c12 <scalbn+0x92>
 8007bda:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007bde:	3a36      	subs	r2, #54	; 0x36
 8007be0:	4432      	add	r2, r6
 8007be2:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007be6:	428a      	cmp	r2, r1
 8007be8:	dd0b      	ble.n	8007c02 <scalbn+0x82>
 8007bea:	ec45 4b11 	vmov	d1, r4, r5
 8007bee:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8007c60 <scalbn+0xe0>
 8007bf2:	f000 f83f 	bl	8007c74 <copysign>
 8007bf6:	a31a      	add	r3, pc, #104	; (adr r3, 8007c60 <scalbn+0xe0>)
 8007bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bfc:	ec51 0b10 	vmov	r0, r1, d0
 8007c00:	e7da      	b.n	8007bb8 <scalbn+0x38>
 8007c02:	2a00      	cmp	r2, #0
 8007c04:	dd08      	ble.n	8007c18 <scalbn+0x98>
 8007c06:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007c0a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007c0e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007c12:	ec45 4b10 	vmov	d0, r4, r5
 8007c16:	bd70      	pop	{r4, r5, r6, pc}
 8007c18:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007c1c:	da0d      	bge.n	8007c3a <scalbn+0xba>
 8007c1e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007c22:	429e      	cmp	r6, r3
 8007c24:	ec45 4b11 	vmov	d1, r4, r5
 8007c28:	dce1      	bgt.n	8007bee <scalbn+0x6e>
 8007c2a:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8007c58 <scalbn+0xd8>
 8007c2e:	f000 f821 	bl	8007c74 <copysign>
 8007c32:	a309      	add	r3, pc, #36	; (adr r3, 8007c58 <scalbn+0xd8>)
 8007c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c38:	e7e0      	b.n	8007bfc <scalbn+0x7c>
 8007c3a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007c3e:	3236      	adds	r2, #54	; 0x36
 8007c40:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007c44:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007c48:	4620      	mov	r0, r4
 8007c4a:	4629      	mov	r1, r5
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	4b08      	ldr	r3, [pc, #32]	; (8007c70 <scalbn+0xf0>)
 8007c50:	e7b2      	b.n	8007bb8 <scalbn+0x38>
 8007c52:	bf00      	nop
 8007c54:	f3af 8000 	nop.w
 8007c58:	c2f8f359 	.word	0xc2f8f359
 8007c5c:	01a56e1f 	.word	0x01a56e1f
 8007c60:	8800759c 	.word	0x8800759c
 8007c64:	7e37e43c 	.word	0x7e37e43c
 8007c68:	43500000 	.word	0x43500000
 8007c6c:	ffff3cb0 	.word	0xffff3cb0
 8007c70:	3c900000 	.word	0x3c900000

08007c74 <copysign>:
 8007c74:	ec53 2b10 	vmov	r2, r3, d0
 8007c78:	ee11 0a90 	vmov	r0, s3
 8007c7c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007c80:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8007c84:	ea41 0300 	orr.w	r3, r1, r0
 8007c88:	ec43 2b10 	vmov	d0, r2, r3
 8007c8c:	4770      	bx	lr
	...

08007c90 <_sbrk>:
 8007c90:	4b04      	ldr	r3, [pc, #16]	; (8007ca4 <_sbrk+0x14>)
 8007c92:	6819      	ldr	r1, [r3, #0]
 8007c94:	4602      	mov	r2, r0
 8007c96:	b909      	cbnz	r1, 8007c9c <_sbrk+0xc>
 8007c98:	4903      	ldr	r1, [pc, #12]	; (8007ca8 <_sbrk+0x18>)
 8007c9a:	6019      	str	r1, [r3, #0]
 8007c9c:	6818      	ldr	r0, [r3, #0]
 8007c9e:	4402      	add	r2, r0
 8007ca0:	601a      	str	r2, [r3, #0]
 8007ca2:	4770      	bx	lr
 8007ca4:	20000938 	.word	0x20000938
 8007ca8:	20000954 	.word	0x20000954

08007cac <__EH_FRAME_BEGIN__>:
 8007cac:	00000000                                ....

08007cb0 <_init>:
 8007cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cb2:	bf00      	nop
 8007cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cb6:	bc08      	pop	{r3}
 8007cb8:	469e      	mov	lr, r3
 8007cba:	4770      	bx	lr

08007cbc <_fini>:
 8007cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cbe:	bf00      	nop
 8007cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cc2:	bc08      	pop	{r3}
 8007cc4:	469e      	mov	lr, r3
 8007cc6:	4770      	bx	lr
